[{"path":"index.html","id":"about-the-book","chapter":"About the Book","heading":"About the Book","text":"-progress version R Without Statistics, forthcoming book Starch Press.Since R invented 1993, become widely used programming language statistical analysis. academia tech world beyond, R used wide range statistical analysis.R’s ubiquity world statistics leads many assume useful complex statistical work. R grown popularity, number ways can used grown well. Today, R used :Data visualizationData visualizationMap makingMap makingSharing results reports, slides, websitesSharing results reports, slides, websitesAutomating processesAutomating processesAnd much !much !idea R statistical analysis outdated inaccurate. , without single book demonstrates power R non-statistical purposes, perception persists.Enter R Without Statistics.R Without Statistics show ways R can used beyond complex statistical analysis. Readers learn range uses R, many likely never even considered.chapter , using consistent format, cover one novel way using R.Readers first introduced R user done something novel learn using R way transformed work.Readers first introduced R user done something novel learn using R way transformed work.Following , code samples demonstrate exactly R user thing profiled .Following , code samples demonstrate exactly R user thing profiled .Finally, summary, lessons learned novel way using R.Finally, summary, lessons learned novel way using R.Written David Keyes, Founder CEO R Rest Us, R Without Statistics published Starch Press.","code":""},{"path":"introduction.html","id":"introduction","chapter":"Introduction","heading":"Introduction","text":"early 2020, world struggled contain spread COVID-19, one country succeeded others : New Zealand. many reasons New Zealand able tackle COVID-19. One R programming language (yes, really).humble tool data analysis help New Zealand fight COVID-19? allowed team Ministry Health generate daily reports cases throughout New Zealand. reports enabled officials develop policies kept country largely COVID-19 free. team small, however, producing reports every day tool like Excel wouldn’t feasible. team leader Chris Knox told , “Trying point--click environment possible.”Instead, staff members wrote R code re-run every day produce updated reports. reports involve complicated statistics; literally counts COVID-19 cases. value came everything else R can : data analysis visualization, report creation, workflow automation.book explores many ways people use R communicate automate tasks. ’ll learn activities like following:Make professional-quality data visualizations, maps, tables.Make professional-quality data visualizations, maps, tables.Replace clunky multi-tool workflow creating reports R Markdown.Replace clunky multi-tool workflow creating reports R Markdown.Use parameterized reporting generate multiple reports .Use parameterized reporting generate multiple reports .Produce slideshow presentations websites using R Markdown.Produce slideshow presentations websites using R Markdown.Automate process importing online data Google Sheets US Census Bureau.Automate process importing online data Google Sheets US Census Bureau.Create functions automate tasks repeatedly.Create functions automate tasks repeatedly.Bundle functions package can share others.Bundle functions package can share others.Best , ’ll without performing statistical analysis complex calculating averages.","code":""},{"path":"introduction.html","id":"isnt-r-just-a-tool-for-statistical-analysis","chapter":"Introduction","heading":"Isn’t R Just a Tool for Statistical Analysis?","text":"Many people think R simply tool hardcore statistical analysis. , quarter century since creation, R can much manipulate numerical values. , every R user must illuminate findings communicate results somehow, whether via data visualizations, reports, websites, presentations. Also, use R, ’ll find wanting automate tasks used manually.qualitatively-trained anthropologist without quantitative background, used feel ashamed using R visualization communication tasks. R good things. ggplot2 package tool choice many top information designers. Users around world taken advantage R’s ability automate reporting make work efficient. Rather simply replace tools, R can allow things, like generate reports tables, ’re already probably , can better existing workflow.","code":""},{"path":"introduction.html","id":"who-this-book-is-for","chapter":"Introduction","heading":"Who This Book is For","text":"matter background, using R can transform work. book either current R user keen explore uses R visualization communication non-R user wondering R right . ’ve written R Without Statistics make sense even ’ve never written line R code. written many lines R code, book help learn plenty new techniques R game.R great tool anyone works data. Maybe ’re researcher looking new way share results. Perhaps ’re journalist looking analyze public data efficiently. maybe ’re data analyst tired working expensive, proprietary tools. work data, get value R.","code":""},{"path":"introduction.html","id":"about-this-book","chapter":"Introduction","heading":"About This Book","text":"chapter focuses one use R language includes examples real R projects employ techniques cover. ’ll dive code, breaking programs help understand works, suggest ways going beyond example. book three parts:","code":""},{"path":"introduction.html","id":"part-1-visualizations","chapter":"Introduction","heading":"Part 1: Visualizations","text":"first part, ’ll learn ways use R visualize data.Chapter 1: R Programming Crash CourseIntroduces R Studio programming environment foundational R syntax ’ll need understand rest book.Chapter 2: Principles Data VisualizationBreaks visualization created Scientific American drought conditions United States. , introduces ggplot2 package data visualization addresses important principles can help make high-quality graphics.Chapter 3: Making ggplot ThemeDescribes journalists BBC made custom theme ggplot2 data visualization package. ’ll walk package created, process, ’ll learn make theme.Chapter 4: Creating MapsWalks process making maps R using simple features data. ’ll learn write map-making code, find geospatial data, choose appropriate projections, apply data visualization principles make map appealing.Chapter 5: Crafting High-Quality TablesShows use gt package make high-quality tables R. draw conversation R table connoisseur Tom Mock learn apply design principles ensure tables communicate effectively.","code":""},{"path":"introduction.html","id":"part-2-reports-presentations-and-websites","chapter":"Introduction","heading":"Part 2: Reports, Presentations, and Websites","text":"second part book focuses using R Markdown communicate efficiently. ’ll learn incorporate visualizations like ones discussed Part 1 complete reports, slideshow presentations, static websites generated entirely using R code.Chapter 6: Writing Reports R MarkdownIntroduces R Markdown, tool allows generate professional report R. chapter cover structure R Markdown document, show use inline code automatically update report’s text data values change, discusses tool’s many export options.Chapter 7: Using Parameters Automate ReportsCovers one advantages using R Markdown: fact can produce multiple reports time using technique called parameterized reporting. explore staff members Urban Institute used R generate fiscal briefs 50 US states. process, ’ll learn parameterized reporting works can use .Chapter 8: Making Slideshow Presentations xaringanExplains use R Markdown make slides xaringan package. ’ll learn make presentations, adjust content fit slide, add effects slideshow.Chapter 9: Building Websites distillShows create website R Markdown distill package. explore distill works considering website COVID-19 rates Westchester County, New York. process, cover create pages site, add interactivity R packages, deploy website using several options.Chapter 10: Reproducible Reporting QuartoExplains use Quarto, next-generation version R Markdown. ’ll learn use Quarto things previously R Markdown (reports, parameterized reporting, slideshow presentations, websites).","code":""},{"path":"introduction.html","id":"part-3-automation-and-collaboration","chapter":"Introduction","heading":"Part 3: Automation and Collaboration","text":"last part book focuses ways can use R automate work share others.Chapter 10: Accessing Online DataExplores two R packages let automatically import data internet: googlesheets4 working Google Sheets tidycensus working United States Census Bureau data. ’ll learn packages work use automate process accessing data.Chapter 11: Creating R PackagesShows create functions packages share code others. One major benefits R can create functions automate common tasks, bundle package users can import. chapter covers example functions. ’ll learn create package learning R developers built packages improve work researchers Moffitt Cancer Center.end book, able use R wide range non-statistical tasks. ’ll know effectively visualize data communicate findings using maps tables. ’ll able integrate results reports using R Markdown, well efficiently generate slideshow presentations websites. ’ll understand automate many tedious tasks using packages others built ones can develop. Let’s dive .","code":""},{"path":"howto-chapter.html","id":"howto-chapter","chapter":"1 An R Programming Crash Course","heading":"1 An R Programming Crash Course","text":"R well-earned reputation hard learn, especially come without prior programming experience. chapter designed help never used R . ’ll set R programming environment RStudio learn work data using functions, objects, packages, projects. ’ll also introduced tidyverse package, contains core data analysis manipulation functions ’ll use book.prior experience R, feel free skip chapter, ’re just starting , help make sense rest book.","code":""},{"path":"howto-chapter.html","id":"setting-up","chapter":"1 An R Programming Crash Course","heading":"Setting Up","text":"’ll need two pieces software use R effectively. first R , provides underlying computational tools make language work. second integrated development environment (IDE) like RStudio. coding platform simplifies working R. best way understand relationship R RStudio analogy book Modern Dive Chester Ismay Albert Kim: R engine powers data; RStudio like dashboard provides user-friendly interface.","code":""},{"path":"howto-chapter.html","id":"installing-r-and-rstudio","chapter":"1 An R Programming Crash Course","heading":"1.0.1 Installing R and RStudio","text":"download R, go https://cloud.r-project.org/ choose link operating system. ’ve installed , open file. open interface like one Figure 1.1 lets work R operating system’s command line. example, enter 2 + 2, see 4.\nFigure 1.1: R console\nbrave souls work R using command line, opt use RStudio, provides way see files, output code, . can download RStudio https://posit.co/download/rstudio-desktop/. Install RStudio app open .","code":""},{"path":"howto-chapter.html","id":"exploring-the-rstudio-interface","chapter":"1 An R Programming Crash Course","heading":"Exploring the RStudio Interface","text":"first time open RStudio, see three panels shown Figure 1.2.\nFigure 1.2: RStudio editor\nleft panel look familiar. ’s similar screen saw working R command line. known console. ’ll use enter code see results. panel, like others ’ll discuss, several tabs, Terminal Background Jobs, advanced usages. now, ’ll stick default tab.bottom right, files panel shows files computer. can click file open within RStudio. Finally, top-right panel shows environment, objects available working RStudio. discuss objects .one panel ’ll typically use working RStudio, make appear, need create R script file.","code":""},{"path":"howto-chapter.html","id":"r-script-files","chapter":"1 An R Programming Crash Course","heading":"R Script Files","text":"write code console, won’t record . Say sit today import data, analyze , make graphs. run operations console, ’ll recreate code scratch tomorrow. Writing code files lets run multiple times. two types files ’ll discuss book:R script files, contain code.R Markdown files, contain code text.’ll talk R Markdown files starting Chapter 6. now, let’s work R script files, use .R extension. create R script file, go File > New File > R Script. create new R script file, fourth panel appear top left R Studio, can see Figure 1-3. Save file Documents folder sample-code.R.\nFigure 1.3: RStudio four panels\nNow can enter R code script file. example, try entering 2 + 2 script file panel. run script file, press Run button use keyboard shortcut CMD + ENTER macOS CTRL + ENTER Windows. result (4, case) show console pane.now working programming environment. ’re trying learn R, probably want perform complex operations 2 + 2. Let’s discuss import data R programs work .","code":""},{"path":"howto-chapter.html","id":"working-with-data","chapter":"1 An R Programming Crash Course","heading":"Working with Data","text":"R lets data manipulation tasks might perform tool like Excel, calculating averages, totals, . Conceptually, however, working data R different working Excel, data analysis code live place: spreadsheet. R, data typically comes external file. work data R, run code import .","code":""},{"path":"howto-chapter.html","id":"importing-data","chapter":"1 An R Programming Crash Course","heading":"Importing Data","text":"Let’s import data comma-separated values (CSV) file. CSV files, common way store data, text files values separated commas. can open using spreadsheet applications. Figure 1.4 shows population--state.csv file opened Excel. can download file https://data.rwithoutstatistics.com/population--state.csv. Let’s import R.\nFigure 1.4: population--state.csv file Excel\nimport population--state.csv file R, add line like one sample-code.R file, replacing filepath path file’s location system:line uses read.csv() function. Functions pieces code specific things. name arguments, values affect function’s behavior. example, read.csv() function’s name read.csv. Within parentheses argument file, specifies file import data. text equal sign (=) gives location file.Arguments following structure: argument name, followed equal sign value. Functions can multiple arguments separated commas. example, code uses file skip arguments import file skip first row:point, can run code import data (without skip argument). Select line want run press Run. following output show console pane:R’s way confirming imported CSV file understands data within . can see four variables, show rank (terms population size), state name, population, population growth Pop Pop2018 variables (expressed percentage), 2018 population. also several variables hidden output, though ’ll see import CSV file . discuss variables detail next section.might think ’re now ready work data. ’ve done point display result running code imports data. use data , need save data object.","code":"\nread.csv(file = \"/Users/davidkeyes/Documents/population-by-state.csv\")\nread.csv(file = \"/Users/davidkeyes/Documents/population-by-state.csv\",\n                 skip = 1)#>    rank                State      Pop  Growth  Pop2018\n#> 1     1           California 39613493  0.0038 39461588\n#> 2     2                Texas 29730311  0.0385 28628666\n#> 3     3              Florida 21944577  0.0330 21244317\n#> 4     4             New York 19299981 -0.0118 19530351\n#> 5     5         Pennsylvania 12804123  0.0003 12800922\n#> 6     6             Illinois 12569321 -0.0121 12723071\n#> 7     7                 Ohio 11714618  0.0033 11676341\n#> 8     8              Georgia 10830007  0.0303 10511131\n#> 9     9       North Carolina 10701022  0.0308 10381615\n#> 10   10             Michigan  9992427  0.0008  9984072\n#> 11   11           New Jersey  8874520 -0.0013  8886025\n#> 12   12             Virginia  8603985  0.0121  8501286\n#> 13   13           Washington  7796941  0.0363  7523869\n#> 14   14              Arizona  7520103  0.0506  7158024\n#> 15   15            Tennessee  6944260  0.0255  6771631\n#> 16   16        Massachusetts  6912239  0.0043  6882635\n#> 17   17              Indiana  6805663  0.0165  6695497\n#> 18   18             Missouri  6169038  0.0077  6121623\n#> 19   19             Maryland  6065436  0.0049  6035802\n#> 20   20             Colorado  5893634  0.0356  5691287\n#> 21   21            Wisconsin  5852490  0.0078  5807406\n#> 22   22            Minnesota  5706398  0.0179  5606249\n#> 23   23       South Carolina  5277830  0.0381  5084156\n#> 24   24              Alabama  4934193  0.0095  4887681\n#> 25   25            Louisiana  4627002 -0.0070  4659690\n#> 26   26             Kentucky  4480713  0.0044  4461153\n#> 27   27               Oregon  4289439  0.0257  4181886\n#> 28   28             Oklahoma  3990443  0.0127  3940235\n#> 29   29          Connecticut  3552821 -0.0052  3571520\n#> 30   30                 Utah  3310774  0.0499  3153550\n#> 31   31          Puerto Rico  3194374  0.0003  3193354\n#> 32   32               Nevada  3185786  0.0523  3027341\n#> 33   33                 Iowa  3167974  0.0061  3148618\n#> 34   34             Arkansas  3033946  0.0080  3009733\n#> 35   35          Mississippi  2966407 -0.0049  2981020\n#> 36   36               Kansas  2917224  0.0020  2911359\n#> 37   37           New Mexico  2105005  0.0059  2092741\n#> 38   38             Nebraska  1951996  0.0137  1925614\n#> 39   39                Idaho  1860123  0.0626  1750536\n#> 40   40        West Virginia  1767859 -0.0202  1804291\n#> 41   41               Hawaii  1406430 -0.0100  1420593\n#> 42   42        New Hampshire  1372203  0.0138  1353465\n#> 43   43                Maine  1354522  0.0115  1339057\n#> 44   44              Montana  1085004  0.0229  1060665\n#> 45   45         Rhode Island  1061509  0.0030  1058287\n#> 46   46             Delaware   990334  0.0257   965479\n#> 47   47         South Dakota   896581  0.0204   878698\n#> 48   48         North Dakota   770026  0.0158   758080\n#> 49   49               Alaska   724357 -0.0147   735139\n#> 50   50 District of Columbia   714153  0.0180   701547\n#> 51   51              Vermont   623251 -0.0018   624358\n#> 52   52              Wyoming   581075  0.0060   577601\n#>     Pop2010 growthSince2010 Percent    density\n#> 1  37319502          0.0615  0.1184   254.2929\n#> 2  25241971          0.1778  0.0889   113.8081\n#> 3  18845537          0.1644  0.0656   409.2229\n#> 4  19399878         -0.0051  0.0577   409.5400\n#> 5  12711160          0.0073  0.0383   286.1704\n#> 6  12840503         -0.0211  0.0376   226.3967\n#> 7  11539336          0.0152  0.0350   286.6944\n#> 8   9711881          0.1151  0.0324   188.3054\n#> 9   9574323          0.1177  0.0320   220.1041\n#> 10  9877510          0.0116  0.0299   176.7351\n#> 11  8799446          0.0085  0.0265  1206.7609\n#> 12  8023699          0.0723  0.0257   217.8776\n#> 13  6742830          0.1563  0.0233   117.3249\n#> 14  6407172          0.1737  0.0225    66.2016\n#> 15  6355311          0.0927  0.0208   168.4069\n#> 16  6566307          0.0527  0.0207   886.1845\n#> 17  6490432          0.0486  0.0203   189.9644\n#> 18  5995974          0.0289  0.0184    89.7419\n#> 19  5788645          0.0478  0.0181   624.8518\n#> 20  5047349          0.1677  0.0176    56.8653\n#> 21  5690475          0.0285  0.0175   108.0633\n#> 22  5310828          0.0745  0.0171    71.6641\n#> 23  4635649          0.1385  0.0158   175.5707\n#> 24  4785437          0.0311  0.0147    97.4271\n#> 25  4544532          0.0181  0.0138   107.0966\n#> 26  4348181          0.0305  0.0134   113.4760\n#> 27  3837491          0.1178  0.0128    44.6872\n#> 28  3759944          0.0613  0.0119    58.1740\n#> 29  3579114         -0.0073  0.0106   733.7507\n#> 30  2775332          0.1929  0.0099    40.2918\n#> 31  3721525         -0.1416  0.0095   923.4964\n#> 32  2702405          0.1789  0.0095    29.0195\n#> 33  3050745          0.0384  0.0095    56.7158\n#> 34  2921964          0.0383  0.0091    58.3059\n#> 35  2970548         -0.0014  0.0089    63.2186\n#> 36  2858190          0.0207  0.0087    35.6808\n#> 37  2064552          0.0196  0.0063    17.3540\n#> 38  1829542          0.0669  0.0058    25.4087\n#> 39  1570746          0.1842  0.0056    22.5079\n#> 40  1854239         -0.0466  0.0053    73.5443\n#> 41  1363963          0.0311  0.0042   218.9678\n#> 42  1316762          0.0421  0.0041   153.2674\n#> 43  1327629          0.0203  0.0040    43.9167\n#> 44   990697          0.0952  0.0032     7.4547\n#> 45  1053959          0.0072  0.0032  1026.6044\n#> 46   899593          0.1009  0.0030   508.1242\n#> 47   816166          0.0985  0.0027    11.8265\n#> 48   674715          0.1413  0.0023    11.1596\n#> 49   713910          0.0146  0.0022     1.2694\n#> 50   605226          0.1800  0.0021 11707.4262\n#> 51   625879         -0.0042  0.0019    67.6197\n#> 52   564487          0.0294  0.0017     5.9847"},{"path":"howto-chapter.html","id":"saving-data-as-objects","chapter":"1 An R Programming Crash Course","heading":"Saving Data as Objects","text":"save data reuse, need create object. book Extending R, John Chambers writes “everything exists R object.” purposes, object data structure store use later. create object, add data-importing syntax looks like :second half code line shown previous section, except contains : <-. Known assignment operator, takes follows assigns item left. left assignment operator population_data object. Put together, whole line imports CSV assigns object called population_data.run code, see population_data environment pane, Figure 1.5.\nFigure 1.5: object environment pane\nmessage confirms data import worked population_data object ready future use. Now, instead rerun code import data, can simply enter population_data output data.Data imported object way known data frame. can see population_data data frame 52 observations nine variables. Variables columns data frame, represents value (example, population state). ’ll see throughout book, can add new variables modify existing ones using R code. 52 observations come 50 states, well District Columbia Puerto Rico.","code":"\npopulation_data <- read.csv(file = \"/Users/davidkeyes/Documents/population-by-state.csv\")"},{"path":"howto-chapter.html","id":"installing-packages","chapter":"1 An R Programming Crash Course","heading":"Installing Packages","text":"read.csv() function ’ve using comes known base R. set functions built R, use , can simply enter function names. However, one benefits R open source language anyone create code share others. R users around world make called packages, provide functions specific things.best analogy understanding packages also comes Modern Dive. functionality base R like features built phone. phone can lot . usually want install additional apps specific things. Packages like apps, giving specific functionality doesn’t come built base R. Chapters 3 12, ’ll create R package.can install packages using install.packages() function. example, install tidyverse package, provides range functions data import, cleaning, analysis, visualization, , enter install.packages(\"tidyverse\"). Typically, ’ll enter package installation code console rather script file need install package computer access code future.confirm tidyverse package installed correctly, click Packages tab bottom right panel R Studio. Search tidyverse, see pop , Figure 1.6.\nFigure 1.6: Confirmation tidyverse package installed computer\nNow ’ve installed tidyverse, let’s use . need install packages per computer, need load packages time restart RStudio running library(tidyverse). Return sample-code.R file re-import data using function tidyverse package:top script, load tidyverse. , use package’s read_csv() function import data. Note underscore (_) place period (.) function’s name; different function one used earlier. Using alternate function import CSV files achieves goal creating object, case one called population_data_2. enter population_data_2 console, see output:data looks slightly different data generated using read.csv() function. example, R shows us first 10 rows. variation occurs read_csv() imports data data frame data type called tibble. used describe rectangular data like see spreadsheet. small differences data frames tibbles, important tibbles print first 10 rows default, data frames print rows. purposes book, can use terms interchangeably.","code":"\nlibrary(tidyverse)\n\npopulation_data_2 <- read_csv(file = \"/Users/davidkeyes/Documents/population-by-state.csv\")#> # A tibble: 52 × 9\n#>     rank State               Pop  Growth  Pop2018  Pop2010\n#>    <dbl> <chr>             <dbl>   <dbl>    <dbl>    <dbl>\n#>  1     1 California     39613493  0.0038 39461588 37319502\n#>  2     2 Texas          29730311  0.0385 28628666 25241971\n#>  3     3 Florida        21944577  0.033  21244317 18845537\n#>  4     4 New York       19299981 -0.0118 19530351 19399878\n#>  5     5 Pennsylvania   12804123  0.0003 12800922 12711160\n#>  6     6 Illinois       12569321 -0.0121 12723071 12840503\n#>  7     7 Ohio           11714618  0.0033 11676341 11539336\n#>  8     8 Georgia        10830007  0.0303 10511131  9711881\n#>  9     9 North Carolina 10701022  0.0308 10381615  9574323\n#> 10    10 Michigan        9992427  0.0008  9984072  9877510\n#> # ℹ 42 more rows\n#> # ℹ 3 more variables: growthSince2010 <dbl>, Percent <dbl>,\n#> #   density <dbl>"},{"path":"howto-chapter.html","id":"rstudio-projects","chapter":"1 An R Programming Crash Course","heading":"RStudio Projects","text":"far, ’ve imported CSV file Documents folder. path file computer /Users/davidkeyes/Documents/population--state.csv. others won’t exact location computer, code won’t work try run . solution problem called RStudio projects.working project, can use known relative paths files instead write entire filepath calling function import data. place CSV file project, anyone can open using file’s name, read_csv(file = \"population--state.csv\"). makes path easier write enables others use code.create new RStudio project, go File > New Project. Select either New Directory Existing Directory choose put project. choose New Directory, ’ll need specify want create new project. , choose name new directory live. Leave checkboxes ask creating git repository using renv unchecked. advanced purposes.created project, now see two major differences RStudio’s appearance. First, Files pane longer shows every file computer. Instead, shows files example-project directory. Right now, ’s just example-project.Rproj file, indicates folder contains project. Second, top right RStudio, can see name example-project project. label previously read Project: (None). want make sure ’re working project, check name . Figure 1.7 shows changes.\nFigure 1.7: RStudio active project\nNow ’ve created project, use operating system’s filesystem manually copy population--state.csv file example-project directory. ’ve done , see RStudio files pane.CSV file project, can now import easily. , start loading tidyverse package. , remove reference Documents folder import data simply using name file:’re able import population--state.csv file way RStudio project sets working directory root project. working directory set way, references files relative .Rproj file root project. Now anyone can run code imports data location guaranteed exist computer.","code":"\nlibrary(tidyverse)\n\npopulation_data_2 <- read_csv(file = \"population-by-state.csv\")"},{"path":"howto-chapter.html","id":"data-analysis-with-the-tidyverse","chapter":"1 An R Programming Crash Course","heading":"Data Analysis with the Tidyverse","text":"Now ’ve imported data, let’s bit analysis . ’ve referring tidyverse single package, actually collection packages performing data importing, analysis, visualization, . ’ll explore several functions throughout book, section introduces basic workflow.","code":""},{"path":"howto-chapter.html","id":"tidyverse-functions","chapter":"1 An R Programming Crash Course","heading":"Tidyverse Functions","text":"’ve loaded tidyverse package, can access functions. following code calculates mean population states using summarize() function tidyverse:understand happening , need understand two functions: mean() summarize(). mean() function calculates mean set values. write mean(c(1, 3, 5)), R return 3 mean values 1, 3, 5. c() function surrounds values tells R combine values calculating mean.summarize() function takes data frame tibble calculates summary one variables. previous code, use summarize() function calculate mean population states. , pass population_data_2 .data argument summarize() function tell use data frame. Next, create new variable called mean_population assign output mean() function run Pop variable (one variables population_data_2 data frame).Running code return tibble single variable (mean_population) type double (meaning numeric data) value 6433422, mean population states:basic example data analysis, can lot tidyverse.","code":"\nsummarize(.data = population_data_2,\n          mean_population = mean(Pop))#> # A tibble: 1 × 1\n#>   mean_population\n#>             <dbl>\n#> 1        6433422."},{"path":"howto-chapter.html","id":"the-tidyverse-pipe","chapter":"1 An R Programming Crash Course","heading":"1.0.2 The Tidyverse Pipe","text":"One advantage working tidyverse uses ’s known pipe multi-step operations. tidyverse pipe, written %>%, allows us break steps multiple lines. example, rewrite code using pipe:code says, “Start population_data_2 data frame, run summarize() function , creating variable called mean_population calculating mean Pop variable.”pipe becomes even useful use multiple steps data analysis. Let’s say, example, want calculate mean population five largest states. following code adds line uses filter() function (also tidyverse) include states rank variable (rank total population size states) less equal five. , uses summarize() function, :Running code shows us mean population five largest states:Combining functions using pipe lets us multiple things data way keeps code readable easy understand.’ve introduced two functions analysis point, tidyverse many functions enable nearly anything hope data. R Data Science Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund bible tidyverse programming worth reading details many packages work. useful , tidyverse appear every single piece R code write book.","code":"\npopulation_data_2 %>% \n  summarize(mean_population = mean(Pop))\npopulation_data_2 %>% \n  filter(rank <= 5) %>% \n  summarize(mean_population = mean(Pop))#> # A tibble: 1 × 1\n#>   mean_population\n#>             <dbl>\n#> 1        24678497"},{"path":"howto-chapter.html","id":"comments","chapter":"1 An R Programming Crash Course","heading":"Comments","text":"addition code, R script files often contain comments. R script files, lines hashes (#) start treated code, text comments. example, add comment code like :comment help others understand happening code.","code":"\n# Calculate the mean population of the five largest states\n\npopulation_data_2 %>% \n  filter(rank <= 5) %>% \n  summarize(mean_population = mean(Pop))"},{"path":"howto-chapter.html","id":"how-to-get-help","chapter":"1 An R Programming Crash Course","heading":"How to Get Help","text":"Now ’ve learned basics R works, ’re probably ready dive write code. , though, ’re going encounter errors. Learning get help run issues key part learning use R successfully. two main strategies can use get unstuck.first read documentation functions use. access documentation function, simply enter ? name function console. example, run ?read.csv see documentation function pop bottom right panel, Figure 1.8.\nFigure 1.8: documentation read.csv() function\nHelp files can bit hard decipher, core, tell package function comes , , arguments accepts, examples use . additional guidance reading documentation, recommend appendix Kieran Healy’s book Data Visualization: Practical Introduction. free online version available https://socviz.co/appendix.html.addition providing help files RStudio, many R packages documentation websites. can easier read R Studio’s help files. addition, often contain longer articles known vignettes provide overview given package works. Reading can help understand combine individual functions context larger project. Every package discussed book good documentation website.","code":""},{"path":"howto-chapter.html","id":"conclusion","chapter":"1 An R Programming Crash Course","heading":"Conclusion","text":"chapter helped get started R programming. ’ve learned number things, beginning download set R RStudio, various RStudio panels , R script files work. also learned import CSV files explore R, save data objects, install packages access additional functions. , make files used code accessible, created RStudio project.Lastly, covered basics data exploration tidyverse functions tidyverse pipe, learned get help functions don’t work expected. Now understand basics, can use R work data. Let’s get started!","code":""},{"path":"howto-chapter.html","id":"learn-more","chapter":"1 An R Programming Crash Course","heading":"Learn More","text":"Consult following resources learn R programming:Statistical Inference via Data Science: ModernDive R Tidyverse Chester Ismay Albert Y. Kim (CRC Press, 2020), https://moderndive.com/Getting Started R course: https://rfortherestofus.com/courses/getting-started/","code":""},{"path":"data-viz-chapter.html","id":"data-viz-chapter","chapter":"2 Principles of Data Visualization","heading":"2 Principles of Data Visualization","text":"spring 2021, nearly American West drought. April year, officials Southern California declared water emergency, citing unprecedented conditions.wouldn’t come news living California Western states. Drought conditions like West 2021 becoming increasingly common. Yet communicating extent problem remains difficult. can show data way accurately represents making compelling enough get people take notice?Data-visualization designers Cédric Scherer Georgios Karamanis took challenge fall 2021. working magazine Scientific American create data visualization drought conditions last two decades United States, turned ggplot2 package transform dry data (pardon pun) visually arresting impactful graph.chapter explores data visualization Scherer Karamanis created effective introduces grammar graphics, theory make sense graphs underlies ggplot2 package. ’ll learn use ggplot2 recreating drought graph step step. process, ’ll highlight key principles high-quality data visualization can use improve work.","code":""},{"path":"data-viz-chapter.html","id":"the-drought-visualization","chapter":"2 Principles of Data Visualization","heading":"The Drought Visualization","text":"news organizations relied data Scherer Karamanis, National Drought Center, stories. Scherer Karamanis visualized way grabs attention communicates scale phenomenon. Figure 2.1 shows section final visualization. Covering four regions last two decades, graph makes apparent increase drought conditions, especially California Southwest.\nFigure 2.1: section final drought visualization, tweaks made plots fit book\nunderstand visualization effective, let’s break pieces. broadest level, data visualization notable minimalist aesthetic. , example, grid lines text labels, well little text along axes. Scherer Karamanis removed statistician Edward Tufte, 1983 book Visual Display Quantitative Information, calls chartjunk. Tufte wrote extraneous elements often hinder, rather help, understanding charts (researchers, well data visualization designers since, generally agreed).Need proof Scherer Karamanis’s decluttered graph better alternative? Figure 2.2 shows version small tweaks code include grid lines text labels axes. Prepare clutter!\nFigure 2.2: cluttered version drought visualization\n, ’s just cluttered version looks worse. clutter actively inhibits understanding. Rather focus overall drought patterns (point graph), brain gets stuck reading repetitive unnecessary axis text.One best ways reduce clutter break single chart known small multiples. look closely data visualization, see one chart actually set charts. rectangle represents one region one year. filter show Southwest region 2003 add axis titles, can see Figure 2.3 x axis shows week y axis shows percentage region different drought levels.\nFigure 2.3: drought visualization Southwest 2003\nZooming single region single year also makes color choices obvious. lightest bars show percentage region abnormally dry darkest bars show percentage exceptional drought conditions. colors, ’ll see shortly, intentionally chosen make differences drought levels visible readers.\nEven , R code Scherer Karamanis wrote produce complex graph relatively simple, due largely theory called grammar graphics.","code":""},{"path":"data-viz-chapter.html","id":"the-grammar-of-graphics","chapter":"2 Principles of Data Visualization","heading":"The Grammar of Graphics","text":"’ve used Excel make graphs, ’re probably familiar menu shown Figure 2.4. working Excel, graph-making journey begins selecting type graph want make. Want bar chart? Click bar chart icon. Want line chart? Click line chart icon.\nFigure 2.4: Excel chart chooser menu\n’ve ever made data visualization Excel, first step may seem obvious ’ve never even considered process creating data visualization way. different models thinking graphs. Rather conceptualizing graphs types distinct, can recognize things common use commonalities starting point making .approach thinking graphs comes late statistician Leland Wilkinson. years, Wilkinson thought deeply data visualization can describe . 1999, published book called Grammar Graphics sought develop consistent way describing graphs. , Wilkinson argued think plots distinct types à la Excel, following grammar can use describe plot. Just English grammar tells us noun typically followed verb (“goes” works, opposite, “goes ,” ), knowledge grammar graphics allows us understand certain graph types “work.”Thinking data visualization lens grammar graphics allow us see, example, graphs typically data plotted x axis data plotted y axis. case matter whether graph bar chart line chart, example. Consider Figure 2.5, shows two charts use identical data life expectancy Afghanistan.\nFigure 2.5: bar chart line chart showing identical data Afghanistan life expectancy\nlook different (, Excel user, different types graphs), Wilkinson’s grammar graphics allows us see similarities. (Incidentally, Wilkinson’s feelings graph-making tools like Excel became clear wrote “charting packages channel user requests rigid array chart types.”)Wilkinson wrote book, data visualization tool implement grammar graphics. change 2010, Hadley Wickham announced ggplot2 package R article titled “Layered Grammar Graphics.” providing tools implement Wilkinson’s ideas, ggplot2 come revolutionize world data visualization.","code":""},{"path":"data-viz-chapter.html","id":"working-with-ggplot2","chapter":"2 Principles of Data Visualization","heading":"Working With ggplot2","text":"ggplot2 R package (, like nearly everyone data visualization world, refer simply ggplot) relies idea plots multiple layers. Let’s walk important ones. ’ll begin selecting variables map aesthetic properties. ’ll choose geometric object use represent data. Next, ’ll change aesthetic properties chart (color scheme, example) using scale_ function. Finally, ’ll use theme_ function set overall look--feel plot.","code":""},{"path":"data-viz-chapter.html","id":"the-first-layer-mapping-data-to-aesthetic-properties","chapter":"2 Principles of Data Visualization","heading":"The First Layer: Mapping Data to Aesthetic Properties","text":"creating graph ggplot, begin mapping data aesthetic properties. really means use things like x y axis, color, size (-called aesthetic properties) represent variables. make concrete, ’ll use data life expectancy Afghanistan, introduced previous section, generate plot. Access data following code:’s gapminder_10_rows data frame looks like:shortened version full gapminder data frame, includes 1,700 rows data.want make chart ggplot, need first decide variable put x axis put y axis. data showing change time, common put date x axis value showing y axis. means use variable year x axis variable lifeExp y axis. , begin using ggplot() function:Within function, tell R ’re using data frame gapminder_10_rows. also map year x axis lifeExp y axis.run code, get Figure 2.6 doesn’t look like much.\nFigure 2.6: blank chart\nlook closely, however, see x axis corresponds year y axis corresponds lifeExp. Also, values x y axes match scope data. gapminder_10_rows data frame, first year 1952 last year 1997. range x axis seems created data mind (). Likewise, lifeExp, goes 28 42, fit nicely y axis.","code":"\nlibrary(tidyverse)\n\ngapminder_10_rows <- read_csv(\"https://data.rwithoutstatistics.com/gapminder_10_rows.csv\")#> # A tibble: 10 × 6\n#>    country     continent  year lifeExp      pop gdpPercap\n#>    <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n#>  1 Afghanistan Asia       1952  28.801  8425333    779.45\n#>  2 Afghanistan Asia       1957  30.332  9240934    820.85\n#>  3 Afghanistan Asia       1962  31.997 10267083    853.10\n#>  4 Afghanistan Asia       1967  34.02  11537966    836.20\n#>  5 Afghanistan Asia       1972  36.088 13079460    739.98\n#>  6 Afghanistan Asia       1977  38.438 14880372    786.11\n#>  7 Afghanistan Asia       1982  39.854 12881816    978.01\n#>  8 Afghanistan Asia       1987  40.822 13867957    852.40\n#>  9 Afghanistan Asia       1992  41.674 16317921    649.34\n#> 10 Afghanistan Asia       1997  41.763 22227415    635.34\nggplot(\n  data = gapminder_10_rows,\n  mapping = aes(\n    x = year,\n    y = lifeExp\n  )\n)"},{"path":"data-viz-chapter.html","id":"the-second-layer-choosing-the-geoms","chapter":"2 Principles of Data Visualization","heading":"The Second Layer: Choosing the geoms","text":"Axes nice, ’re missing type visual representation data. get , need add next ggplot layer: geoms. Short geometric objects, geoms functions provide different ways representing data. example, want add points graph, use geom_point():Now, Figure 2.7, see people 1952 life expectancy 28 value rose every year included data.\nFigure 2.7: chart points added\nLet’s say change mind want make line chart instead. replace geom_point() geom_line():Figure 2.8 shows result.\nFigure 2.8: data line chart\nreally get fancy, add geom_point() geom_line()?code generates line chart points, shown Figure 2.9.\nFigure 2.9: data points line\ncan swap geom_col() create bar chart:Note Figure 2.10 y axis range automatically updated, going 0 40 account different geom.\nFigure 2.10: data bar chart\ncan see, difference line chart bar chart isn’t great Excel chart-type picker might us think. can underlying properties (namely, putting years x axis life expectancies y axis). simply use different geometric objects visually represent data.","code":"\nggplot(\n  data = gapminder_10_rows,\n  mapping = aes(\n    x = year,\n    y = lifeExp\n  )\n) +\n  geom_point()\nggplot(\n  data = gapminder_10_rows,\n  mapping = aes(\n    x = year,\n    y = lifeExp\n  )\n) +\n  geom_line()\nggplot(\n  data = gapminder_10_rows,\n  mapping = aes(\n    x = year,\n    y = lifeExp\n  )\n) +\n  geom_point() +\n  geom_line()\nggplot(\n  data = gapminder_10_rows,\n  mapping = aes(\n    x = year,\n    y = lifeExp\n  )\n) +\n  geom_col()"},{"path":"data-viz-chapter.html","id":"the-third-layer-altering-aesthetic-properties","chapter":"2 Principles of Data Visualization","heading":"The Third Layer: Altering Aesthetic Properties","text":"return drought data visualization, let’s look additional layers can help us can alter bar chart. Say want change color bars. grammar graphics approach chart-making, means mapping variable aesthetic property fill. (Slightly confusingly, aesthetic property color , bar chart, change outline bar). way mapped year x axis lifeExp y axis, can map fill variable, year:Figure 2.11 shows result. see now , earlier years, fill darker, later years, lighter (legend, added right plot, also indicates ).\nFigure 2.11: chart, now added colors\nwanted change fill colors? , use new scale layer. , ’ll use scale_fill_viridis_c() function. c end function name refers fact data continuous, meaning can take numeric value:function changes default palette one colorblind-friendly prints well grayscale. scale_fill_viridis_c() function just one many start scale_ can alter fill scale.","code":"\nggplot(\n  data = gapminder_10_rows,\n  mapping = aes(\n    x = year,\n    y = lifeExp,\n    fill = year\n  )\n) +\n  geom_col()\nggplot(\n  data = gapminder_10_rows,\n  mapping = aes(\n    x = year,\n    y = lifeExp,\n    fill = year\n  )\n) +\n  geom_col() +\n  scale_fill_viridis_c()"},{"path":"data-viz-chapter.html","id":"the-fourth-layer-setting-a-theme","chapter":"2 Principles of Data Visualization","heading":"The Fourth Layer: Setting a Theme","text":"final layer ’ll look theme layer. layer allows us change overall look--feel plots (including plot background, grid lines, ). Just number scale_ functions, also number functions start theme_. , ’ve added theme_minimal():Notice Figure 2.12 theme starts declutter plot.\nFigure 2.12: chart theme_minimal() added\nnow, see Hadley Wickham described ggplot2 package using layered grammar graphics. implements Wilkinson’s theory creation multiple layers. First, select variables map aesthetic properties, x y axes, color, fill. Second, choose geometric object (geom) want use represent data. Third, want change aesthetic properties (example, use different color palette), scale_ function. Fourth, use theme_ function set overall look--feel plot.improve plot ’ve working many ways, rather add ugly plot, let’s instead return drought data visualization Cédric Scherer Georgios Karamanis. walking code, ’ll learn lessons making high-quality data visualization ggplot R.","code":"\nggplot(\n  data = gapminder_10_rows,\n  mapping = aes(\n    x = year,\n    y = lifeExp,\n    fill = year\n  )\n) +\n  geom_col() +\n  scale_fill_viridis_c() +\n  theme_minimal()"},{"path":"data-viz-chapter.html","id":"recreating-the-drought-visualization-with-ggplot","chapter":"2 Principles of Data Visualization","heading":"Recreating the Drought Visualization with ggplot","text":"fundamentals less-well-known tweaks make really shine. understand Scherer Karamanis made data visualization, ’ll start simplified version code, build layer layer, adding elements go.First, let’s import data. Scherer Karamanis import() function rio package:function helpful data working JSON format, can complicated work . rio package simplifies just one line.","code":"\nlibrary(rio)\n\ndm_perc_cat_hubs_raw <- import(\"https://data.rwithoutstatistics.com/dm_export_20000101_20210909_perc_cat_hubs.json\")"},{"path":"data-viz-chapter.html","id":"plotting-one-region-and-year","chapter":"2 Principles of Data Visualization","heading":"Plotting One Region and Year","text":"Let’s start looking just one region (Southwest) one year (2003). First, filter data save new object called southwest_2003:can take look object see variables work typing southwest_2003 console, return :date variable represents start date week observation took place. hub variable region, category level drought: value D0 indicates lowest level drought, D5 indicates highest level. percentage variable percentage region drought category, ranging 0 1. year week variables observation year week number (beginning week 1). max_week variable maximum number weeks given year.Now can use southwest_2003 object plotting:ggplot() function, tell R put week x axis percentage y axis. also use category variable fill color. use geom_col() create bar chart fill color bar represents percentage region single week drought level. can see result Figure 2.13.\nFigure 2.13: One year region drought visualization\ncolors don’t match final version plot, can start see outlines Scherer Karamanis’s data visualization.","code":"\nsouthwest_2003 <- dm_perc_cat_hubs %>%\n  filter(hub == \"Southwest\") %>%\n  filter(year == 2003)#> # A tibble: 255 × 7\n#>    date       hub   category percentage  year  week max_week\n#>    <date>     <fct> <fct>         <dbl> <dbl> <dbl>    <dbl>\n#>  1 2003-12-30 Sout… D0           0.0718  2003    52       52\n#>  2 2003-12-30 Sout… D1           0.0828  2003    52       52\n#>  3 2003-12-30 Sout… D2           0.2693  2003    52       52\n#>  4 2003-12-30 Sout… D3           0.3108  2003    52       52\n#>  5 2003-12-30 Sout… D4           0.0796  2003    52       52\n#>  6 2003-12-23 Sout… D0           0.0823  2003    51       52\n#>  7 2003-12-23 Sout… D1           0.1312  2003    51       52\n#>  8 2003-12-23 Sout… D2           0.1886  2003    51       52\n#>  9 2003-12-23 Sout… D3           0.3822  2003    51       52\n#> 10 2003-12-23 Sout… D4           0.0828  2003    51       52\n#> # ℹ 245 more rows\nggplot(\n  data = southwest_2003,\n  aes(\n    x = week,\n    y = percentage,\n    fill = category\n  )\n) +\n  geom_col()"},{"path":"data-viz-chapter.html","id":"changing-aesthetic-properties","chapter":"2 Principles of Data Visualization","heading":"Changing Aesthetic Properties","text":"Scherer Karamanis next selected different fill colors bars. , used scale_fill_viridis_d() function. d means data fill scale applied discrete categories, called D0, D1, D2, D3, D4, D5:used argument option = \"rocket\" select rocket palette (function several palettes). used direction = -1 argument reverse order fill colors darker colors mean higher drought conditions.Scherer Karamanis also tweaked appearance x y axes:x axis, removed axis title (“week”) using name = NULL 0–50 text guide = \"none\". y axis, removed title text showing percentages using labels = NULL, functionally thing guide = \"none\". also moved axis lines right side using position = \"right\". axis lines apparent tick marks point become visible later. Figure 2.14 shows result tweaks.\nFigure 2.14: One year region drought visualization adjustments x y axes\npoint, ’ve focused one single plots make larger data visualization. final product Scherer Karamanis made actually 176 plots visualizing 22 years eight regions. Let’s discuss ggplot feature used create plots.","code":"\nggplot(\n  data = southwest_2003,\n  aes(\n    x = week,\n    y = percentage,\n    fill = category\n  )\n) +\n  geom_col() +\n  scale_fill_viridis_d(\n    option = \"rocket\",\n    direction = -1\n  )\nggplot(\n  data = southwest_2003,\n  aes(\n    x = week,\n    y = percentage,\n    fill = category\n  )\n) +\n  geom_col() +\n  scale_fill_viridis_d(\n    option = \"rocket\",\n    direction = -1\n  ) +\n  scale_x_continuous(\n    name = NULL,\n    guide = \"none\"\n  ) +\n  scale_y_continuous(\n    name = NULL,\n    labels = NULL,\n    position = \"right\"\n  )"},{"path":"data-viz-chapter.html","id":"faceting-the-plot","chapter":"2 Principles of Data Visualization","heading":"Faceting the Plot","text":"One useful features ggplot ’s known faceting (, commonly data visualization world, small multiples). Faceting takes single plot makes multiple plots using variable. example, think line chart showing life expectancy country time; instead multiple lines one plot, might create multiple plots one line per plot). facet_grid() function, can select variable put rows put columns faceted plot:Scherer Karamanis put year rows hub (region) columns. switch = \"y\" argument moves year label right side (appears default) left. code place, can see final plot coming together Figure 2.15. Space considerations require include four regions, get idea.\nFigure 2.15: faceted version drought visualization. Space considerations require include four regions, get idea.\nIncredibly, broad outlines plot took us just 10 lines create. rest code falls category small polishes. ’s minimize important small polishes () time takes create (lots). show, however, little bit ggplot goes long way.","code":"\ndm_perc_cat_hubs %>%\n  filter(hub %in% c(\n    \"Northwest\",\n    \"California\",\n    \"Southwest\",\n    \"Northern Plains\"\n  )) %>%\n  ggplot(aes(\n    x = week,\n    y = percentage,\n    fill = category\n  )) +\n  geom_col() +\n  scale_fill_viridis_d(\n    option = \"rocket\",\n    direction = -1\n  ) +\n  scale_x_continuous(\n    name = NULL,\n    guide = \"none\"\n  ) +\n  scale_y_continuous(\n    name = NULL,\n    labels = NULL,\n    position = \"right\"\n  ) +\n  facet_grid(\n    rows = vars(year),\n    cols = vars(hub),\n    switch = \"y\"\n  )"},{"path":"data-viz-chapter.html","id":"applying-small-polishes","chapter":"2 Principles of Data Visualization","heading":"Applying Small Polishes","text":"Let’s look small polishes Scherer Karamanis made. first apply theme, shown Figure 2.16. used theme_light(), removes default gray background changes font Roboto.theme_light() function ’s known complete theme. -called complete themes change overall look--feel plot. Scherer Karamanis didn’t stop . used theme() function make additional tweaks theme_light() gave :code theme() function many different things, let’s take look important. First, moves legend right side (default) top plot. , angle = 0 argument rotates year text columns longer angled. Without argument, years much less readable.Next, theme() function makes distinctive axis lines ticks show right side final plot. Calling element_blank() removes grid lines. Finally, three lines remove borders make individual plots transparent background.Keen readers may now thinking, “Wait. Didn’t individual plots gray background behind ?” Yes, dear reader, . Scherer Karamanis made separate geom, geom_rect():set additional aesthetic properties specific geom: xmin, xmax, ymin, ymax, determine boundaries rectangle produces. result gray background drawn behind small multiple, shown Figure 2.16.\nFigure 2.16: Faceted version drought visualization gray backgrounds behind small multiple\nFinally, consider tweaks made legend. previously saw simplified version scale_fill_viridis_d() function. complete version:name argument sets legend title, labels argument determines labels show legend. Figure 2.17 shows result changes.\nFigure 2.17: Drought visualization changes made legend text\nRather D0, D1, D2, D3, D4, now legend text Abnormally Dry, Moderate Drought, Severe Drought, Extreme Drought, Exceptional Drought.","code":"\ndm_perc_cat_hubs %>%\n  filter(hub %in% c(\n    \"Northwest\",\n    \"California\",\n    \"Southwest\",\n    \"Northern Plains\"\n  )) %>%\n  ggplot(aes(\n    x = week,\n    y = percentage,\n    fill = category\n  )) +\n  geom_rect(\n    aes(\n      xmin = .5,\n      xmax = max_week + .5,\n      ymin = -0.005,\n      ymax = 1\n    ),\n    fill = \"#f4f4f9\",\n    color = NA,\n    size = 0.4\n  ) +\n  geom_col() +\n  scale_fill_viridis_d(\n    option = \"rocket\",\n    direction = -1\n  ) +\n  scale_x_continuous(\n    name = NULL,\n    guide = \"none\"\n  ) +\n  scale_y_continuous(\n    name = NULL,\n    labels = NULL,\n    position = \"right\"\n  ) +\n  facet_grid(\n    rows = vars(year),\n    cols = vars(hub),\n    switch = \"y\"\n  ) +\n  theme_light(base_family = \"Roboto\") +\n  theme(\n    axis.title = element_text(\n      size = 14,\n      color = \"black\"\n    ),\n    axis.text = element_text(\n      family = \"Roboto Mono\",\n      size = 11\n    ),\n    axis.line.x = element_blank(),\n    axis.line.y = element_line(\n      color = \"black\",\n      size = .2\n    ),\n    axis.ticks.y = element_line(\n      color = \"black\",\n      size = .2\n    ),\n    axis.ticks.length.y = unit(2, \"mm\"),\n    legend.position = \"top\",\n    legend.title = element_text(\n      color = \"#2DAADA\",\n      face = \"bold\"\n    ),\n    legend.text = element_text(color = \"#2DAADA\"),\n    strip.text.x = element_text(\n      hjust = .5,\n      face = \"plain\",\n      color = \"black\",\n      margin = margin(t = 20, b = 5)\n    ),\n    strip.text.y.left = element_text(\n      angle = 0,\n      vjust = .5,\n      face = \"plain\",\n      color = \"black\"\n    ),\n    strip.background = element_rect(\n      fill = \"transparent\",\n      color = \"transparent\"\n    ),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.spacing.x = unit(0.3, \"lines\"),\n    panel.spacing.y = unit(0.25, \"lines\"),\n    panel.background = element_rect(\n      fill = \"transparent\",\n      color = \"transparent\"\n    ),\n    panel.border = element_rect(\n      color = \"transparent\",\n      size = 0\n    ),\n    plot.background = element_rect(\n      fill = \"transparent\",\n      color = \"transparent\",\n      size = .4\n    ),\n    plot.margin = margin(rep(18, 4))\n  )\ngeom_rect(\n  aes(\n    xmin = .5,\n    xmax = max_week + .5,\n    ymin = -0.005,\n    ymax = 1\n  ),\n  fill = \"#f4f4f9\",\n  color = NA,\n  size = 0.4\n)\nscale_fill_viridis_d(\n  option = \"rocket\",\n  direction = -1,\n  name = \"Category:\",\n  labels = c(\n    \"Abnormally Dry\",\n    \"Moderate Drought\",\n    \"Severe Drought\",\n    \"Extreme Drought\",\n    \"Exceptional Drought\"\n  )\n)"},{"path":"data-viz-chapter.html","id":"the-complete-visualization-code","chapter":"2 Principles of Data Visualization","heading":"The Complete Visualization Code","text":"’ve showed nearly complete version code Scherer Karamanis wrote, made small changes make easier understand. ’re curious, full code :additional tweaks colors spacing, code reflects ’ve seen far.","code":"\nggplot(dm_perc_cat_hubs, aes(week, percentage)) +\n  geom_rect(\n    aes(\n      xmin = .5,\n      xmax = max_week + .5,\n      ymin = -0.005,\n      ymax = 1\n    ),\n    fill = \"#f4f4f9\",\n    color = NA,\n    size = 0.4,\n    show.legend = FALSE\n  ) +\n  geom_col(\n    aes(\n      fill = category,\n      fill = after_scale(addmix(\n        darken(\n          fill,\n          .05,\n          space = \"HLS\"\n        ),\n        \"#d8005a\",\n        .15\n      )),\n      color = after_scale(darken(\n        fill,\n        .2,\n        space = \"HLS\"\n      ))\n    ),\n    width = .9,\n    size = 0.12\n  ) +\n  facet_grid(\n    rows = vars(year),\n    cols = vars(hub),\n    switch = \"y\"\n  ) +\n  coord_cartesian(clip = \"off\") +\n  scale_x_continuous(\n    expand = c(.02, .02),\n    guide = \"none\",\n    name = NULL\n  ) +\n  scale_y_continuous(\n    expand = c(0, 0),\n    position = \"right\",\n    labels = NULL,\n    name = NULL\n  ) +\n  scale_fill_viridis_d(\n    option = \"rocket\",\n    name = \"Category:\",\n    direction = -1,\n    begin = .17,\n    end = .97,\n    labels = c(\n      \"Abnormally Dry\",\n      \"Moderate Drought\",\n      \"Severe Drought\",\n      \"Extreme Drought\",\n      \"Exceptional Drought\"\n    )\n  ) +\n  guides(fill = guide_legend(\n    nrow = 2,\n    override.aes = list(size = 1)\n  )) +\n  theme_light(\n    base_size = 18,\n    base_family = \"Roboto\"\n  ) +\n  theme(\n    axis.title = element_text(\n      size = 14,\n      color = \"black\"\n    ),\n    axis.text = element_text(\n      family = \"Roboto Mono\",\n      size = 11\n    ),\n    axis.line.x = element_blank(),\n    axis.line.y = element_line(\n      color = \"black\",\n      size = .2\n    ),\n    axis.ticks.y = element_line(\n      color = \"black\",\n      size = .2\n    ),\n    axis.ticks.length.y = unit(2, \"mm\"),\n    legend.position = \"top\",\n    legend.title = element_text(\n      color = \"#2DAADA\",\n      size = 18,\n      face = \"bold\"\n    ),\n    legend.text = element_text(\n      color = \"#2DAADA\",\n      size = 16\n    ),\n    strip.text.x = element_text(\n      size = 16,\n      hjust = .5,\n      face = \"plain\",\n      color = \"black\",\n      margin = margin(t = 20, b = 5)\n    ),\n    strip.text.y.left = element_text(\n      size = 18,\n      angle = 0,\n      vjust = .5,\n      face = \"plain\",\n      color = \"black\"\n    ),\n    strip.background = element_rect(\n      fill = \"transparent\",\n      color = \"transparent\"\n    ),\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.spacing.x = unit(0.3, \"lines\"),\n    panel.spacing.y = unit(0.25, \"lines\"),\n    panel.background = element_rect(\n      fill = \"transparent\",\n      color = \"transparent\"\n    ),\n    panel.border = element_rect(\n      color = \"transparent\",\n      size = 0\n    ),\n    plot.background = element_rect(\n      fill = \"transparent\",\n      color = \"transparent\",\n      size = .4\n    ),\n    plot.margin = margin(rep(18, 4))\n  )"},{"path":"data-viz-chapter.html","id":"in-conclusion-ggplot-is-your-data-visualization-secret-weapon","chapter":"2 Principles of Data Visualization","heading":"In Conclusion: ggplot is Your Data Visualization Secret Weapon","text":"may start think ggplot solution data visualization problems. yes, new hammer, , everything nail. look version data visualization appeared Scientific American November 2021, ’ll see annotations aren’t visible recreation. ’s added post-production. found ways create ggplot, ’s often best use time. Get 90 percent way ggplot use Illustrator, Figma, similar tool finish work.Even , ggplot powerful hammer, used make plots ’ve seen New York Times, FiveThirtyEight, BBC, well-known news outlets. Although tool can generate high-quality data visualization, makes process straightforward. graph Scherer Karamanis shows several ways:strips away extraneous elements, grid lines, keep focus data . Complete themes theme_light() theme() function allowed Scherer Karamanis create decluttered visualization communicates effectively.strips away extraneous elements, grid lines, keep focus data . Complete themes theme_light() theme() function allowed Scherer Karamanis create decluttered visualization communicates effectively.uses well-chosen colors. scale_fill_viridis_d() function allowed create color scheme demonstrates differences groups, colorblind friendly, shows well printed grayscale.uses well-chosen colors. scale_fill_viridis_d() function allowed create color scheme demonstrates differences groups, colorblind friendly, shows well printed grayscale.uses small multiples break data two decades eight regions set graphs come together create single plot. single call facet_grid() function, Scherer Karamanis created 100 small multiples tool automatically combined single plot.uses small multiples break data two decades eight regions set graphs come together create single plot. single call facet_grid() function, Scherer Karamanis created 100 small multiples tool automatically combined single plot.Learning create data visualization ggplot involves significant time investment. long-term payoff even greater. learn ggplot works, can look others’ code learn improve . contrast, make data visualization Excel, series point--click steps disappears ether. recreate visualization made last week, ’ll need remember exact steps used, make someone else’s data visualization, ’ll need write process .code-based data visualization tools allow keep record steps made, don’t talented designer make high-quality data visualization ggplot. can study others’ code, adapt needs, create data visualization beautiful communicates effectively.","code":""},{"path":"data-viz-chapter.html","id":"learn-more-1","chapter":"2 Principles of Data Visualization","heading":"Learn More","text":"Consult following resources learn data visualization principles ggplot2 package:Data Visualization: Practical Introduction Kieran Healy (Princeton University Press, 2018), https://socviz.coFundamentals Data Visualization Claus Wilke (O’Reilly Media, 2019). https://clauswilke.com/dataviz/ggplot2: Elegant Graphics Data Analysis Hadley Wickham, Danielle Navarro, Thomas Lin Pedersen (Springer, Forthcoming), https://ggplot2-book.orgGraphic Design ggplot2 Cédric Scherer (CRC Press, Forthcoming)“Glamour Graphics,” course Chase, https://rfortherestofus.com/courses/glamour/","code":""},{"path":"custom-theme-chapter.html","id":"custom-theme-chapter","chapter":"3 Making Your Own Theme","heading":"3 Making Your Own Theme","text":"custom theme nothing chunk code applies set small tweaks plots. much work involved making professional chart consists adjustments. font use? legend go? axes titles? charts grid lines? questions may seem minor, big impact final product.2018, BBC data journalists Nassos Stylianou Clara Guibourg, along team, developed custom ggplot theme matches BBC’s style. introducing bbplot package others use, changed organization’s culture, removed bottlenecks, allowed BBC visualize data creatively.Rather forcing everyone copy long code tweak plot make, custom themes enable everyone uses follow style guidelines ensures data visualization meets brand’s standards. example, understand significance custom theme introduced BBC, ’s helpful know things worked bbplot. mid-2010s, journalists wanted make data visualization two choices:use internal tool. tool create data visualizations limited predefined charts designed generate.use internal tool. tool create data visualizations limited predefined charts designed generate.use Excel create mockups work graphic designer finalize charts. approach led better results, way flexible, required extensive, time-consuming back--forth designer.use Excel create mockups work graphic designer finalize charts. approach led better results, way flexible, required extensive, time-consuming back--forth designer.Neither choices ideal, limited BBC’s data visualization output. R freed journalists work designer. wasn’t designers bad (weren’t), ggplot allowed journalists explore different visualizations . team improved ggplot skills, realized might possible produce just exploratory data visualizations create production-ready charts R go straight onto BBC website.chapter, discuss power custom ggplot themes, walk code bbplot package demonstrate custom themes work. ’ll learn consolidate styling code reusable function consistently modify plots’ text, axes, grid lines, background, elements.","code":""},{"path":"custom-theme-chapter.html","id":"using-a-custom-theme-to-style-a-plot","chapter":"3 Making Your Own Theme","heading":"Using a Custom Theme to Style a Plot","text":"bbplot package two functions: bbc_style() finalise_plot(). latter deals things like adding BBC logo saving plots correct dimensions. now, let’s look bbc_style() function, applies custom ggplot theme plot, making plots look consistent follow BBC style guidelines.","code":""},{"path":"custom-theme-chapter.html","id":"creating-an-example-plot","chapter":"3 Making Your Own Theme","heading":"Creating an Example Plot","text":"show function works, let’s create plot. ’ll using palmerpenguins package, contains data penguins living three islands Antarctica. give sense data looks like, load palmerpenguins tidyverse packages:now data can work object called penguins. ’s first ten rows look like.get data usable format, let’s count many penguins live island. count() function dplyr package (one several packages loaded load tidyverse):gives us simple data can use plotting .’ll use data multiple times chapter, let’s save object called penguins_summary:Now ’ve got data work , ’re ready create plot. showing bbplot , let’s make plot ggplot defaults. code ’ll use:use penguins_summary data frame, putting island x axis count number penguins (n) y axis, making bar different color fill aesthetic property. ’ll modify plot multiple times, simplify process, save object called penguins_plot. Figure 3.1 shows resulting plot.\nFigure 3.1: chart default theme\nisn’t aesthetically pleasing chart. gray background ugly, y axis title hard read ’s angled, text size overall quite small. don’t worry: ’ll improving soon!","code":"\nlibrary(palmerpenguins)\nlibrary(tidyverse)#> # A tibble: 344 × 8\n#>    species island    bill_length_mm bill_depth_mm\n#>    <fct>   <fct>              <dbl>         <dbl>\n#>  1 Adelie  Torgersen           39.1          18.7\n#>  2 Adelie  Torgersen           39.5          17.4\n#>  3 Adelie  Torgersen           40.3          18  \n#>  4 Adelie  Torgersen           NA            NA  \n#>  5 Adelie  Torgersen           36.7          19.3\n#>  6 Adelie  Torgersen           39.3          20.6\n#>  7 Adelie  Torgersen           38.9          17.8\n#>  8 Adelie  Torgersen           39.2          19.6\n#>  9 Adelie  Torgersen           34.1          18.1\n#> 10 Adelie  Torgersen           42            20.2\n#> # ℹ 334 more rows\n#> # ℹ 4 more variables: flipper_length_mm <int>,\n#> #   body_mass_g <int>, sex <fct>, year <int>#> # A tibble: 3 × 2\n#>   island        n\n#>   <fct>     <int>\n#> 1 Biscoe      168\n#> 2 Dream       124\n#> 3 Torgersen    52\npenguins_summary <- penguins %>%\n  count(island)"},{"path":"custom-theme-chapter.html","id":"applying-the-bbc_style-function","chapter":"3 Making Your Own Theme","heading":"Applying the bbc_style() Function","text":"Now basic plot work , let’s make look like BBC chart. , must install bbplot package. First, install remotes package using install.packages(\"remotes\"). , can run following code install bbplot.bbplot package installed, can apply bbc_style() function penguins_plot:Take look happens Figure 3.2 application bbc_style() plot.\nFigure 3.2: chart BBC style\nWay different, right? font size larger, legend top, axis titles, grid lines stripped , white background. major changes bbc_style() function makes. Let’s look one one.","code":"\nlibrary(remotes)\ninstall_github(\"bbc/bbplot\")\nlibrary(bbplot)\n\npenguins_plot +\n  bbc_style()"},{"path":"custom-theme-chapter.html","id":"breaking-down-the-custom-theme","chapter":"3 Making Your Own Theme","heading":"Breaking Down the Custom Theme","text":"section walks code bbc_style() function (taken bbplot GitHub repository https://github.com/bbc/bbplot, minor tweaks readability). ’ll discuss functions Chapter 12.","code":""},{"path":"custom-theme-chapter.html","id":"setting-up-1","chapter":"3 Making Your Own Theme","heading":"Setting Up","text":"first line gives function name indicates follows , fact, function definition:define variable called font assign value Helvetica. allows later sections simply write font rather repeating Helvetica . Also, BBC team ever wanted use different font, change Helvetica , say, Comic Sans update font BBC plots (though suspect higher-ups BBC might board).recently, working custom fonts R notoriously tricky. However, recent changes made process much simpler. ensure custom fonts Helvetica work ggplot, follow steps. First, install two packages. systemfonts ragg, running code console:systemfonts package allows R directly access fonts ’ve installed computer, ragg allows ggplot use fonts generating plots.Second, select Tools > Global Options. Click Graphics menu top interface, Backend option, select AGG. change ensure RStudio renders previews plots ragg package. changes place, able use fonts ’d like (assuming installed) way bbc_style() function uses Helvetica.specifying font use, call ggplot2 package’s theme() function. Rather first loading package code library(ggplot2) using function, use syntax ggplot2::theme(), indicating theme() function comes ggplot2 package. write code way making R package, something ’ll discuss Chapter 12.Nearly code bbc_style() function exists within theme() function. Remember Chapter 2 theme() makes additional tweaks existing theme; isn’t complete theme like theme_light(), change whole look--feel plot. words, jumping straight theme() function, bbc_style() makes tweaks ggplot defaults.’ll see, bbc_style() function lot tweaking. Let’s go changes makes, section section.","code":"bbc_style <- function() {\n  font <- \"Helvetica\"\n  \n  ggplot2::theme(\ninstall.packages(c(\"systemfonts\", \"ragg\"))"},{"path":"custom-theme-chapter.html","id":"text-formatting","chapter":"3 Making Your Own Theme","heading":"Text Formatting","text":"first code section within theme() function formats text:make changes title, subtitle, caption, uses using following pattern:area, say type element : element_text(), element_line(), element_rect(), element_blank(). Within element type, give values properties. can , say, setting font family (property) Helvetica (value).One main things bbc_style() function bump text size. Increasing font size helps legibility, especially plots made using bbplot package viewed smaller mobile devices. code first formats title (plot.title) using Helvetica 28-point bold font nearly black color (’s hex code #222222). subtitle (using plot.subtitle) 22-point Helvetica.add spacing title subtitle using margin() function, gives spacing, points, top (9), right (0), bottom (9), left (0) sides. Finally, caption (plot.caption argument) removed using element_blank() function. done finalise_plot() function bbplot package adds elements, including caption BBC logo, bottom plots. Figure 3.3 shows changes.\nFigure 3.3: penguin chart text formatting changed\nchanges place, ’re way toward BBC look. Let’s now tweak legend.","code":"\nAREA_OF_CHART = ELEMENT_TYPE(\n  PROPERTY = VALUE\n)"},{"path":"custom-theme-chapter.html","id":"legend-formatting","chapter":"3 Making Your Own Theme","heading":"Legend Formatting","text":"Next, format legend, putting top plot left-aligning text within :remove legend background (show background color entire plot different), title, legend key (borders red, green, blue boxes show island names). Finally, make legend’s text 18-point Helvetica nearly black color. can see result Figure 3.4.\nFigure 3.4: chart changes legend\nlegend looking better, now need format rest chart matches.","code":"legend.position = \"top\",\nlegend.text.align = 0,\nlegend.background = element_blank(),\nlegend.title = element_blank(),\nlegend.key = element_blank(),\nlegend.text = element_text(\n  family = font,\n  size = 18,\n  color = \"#222222\"\n),"},{"path":"custom-theme-chapter.html","id":"axis-formatting","chapter":"3 Making Your Own Theme","heading":"Axis Formatting","text":"Next axes. code first removes axis titles tend take lot chart real estate, can use title subtitle make clear axes show.text axes becomes 18-point Helevetica nearly black. text x axis (case, Biscoe, Dream, Torgersen) gets bit spacing around . Finally, remove axis ticks axis lines. can see changes axes Figure 3.5.\nFigure 3.5: chart changes axis formatting\naxis text now matching legend text, axis ticks lines removed, ’re ready deal grid lines.","code":"axis.title = ggplot2::element_blank(),\naxis.text = ggplot2::element_text(\n  family = font,\n  size = 18,\n  color = \"#222222\"\n),\naxis.text.x = ggplot2::element_text(margin = ggplot2::margin(5, b = 10)),\naxis.ticks = ggplot2::element_blank(),\naxis.line = ggplot2::element_blank(),"},{"path":"custom-theme-chapter.html","id":"grid-lines-formatting","chapter":"3 Making Your Own Theme","heading":"Grid Lines Formatting","text":"Now ’ve tweaked overall text formatting, legend, axes, let’s move onto grid lines. approach fairly straightforward: remove minor grid lines major grid lines x axis, keeping major grid lines y axis, making light gray (using #cbcbcb hex code).can see result tweaks grid lines Figure 3.6.\nFigure 3.6: chart tweaks grid lines\n","code":"panel.grid.minor = ggplot2::element_blank(),\npanel.grid.major.y = ggplot2::element_line(color = \"#cbcbcb\"),\npanel.grid.major.x = ggplot2::element_blank(),"},{"path":"custom-theme-chapter.html","id":"background-formatting","chapter":"3 Making Your Own Theme","heading":"Background Formatting","text":"previous iteration plot still gray background. bbc_style() function removes following code.plot without gray background seen Figure 3.7.\nFigure 3.7: chart gray background removed\n’ve nearly recreated penguin plot using bbc_style() function. just one tweak go.","code":"panel.background = ggplot2::element_blank(),"},{"path":"custom-theme-chapter.html","id":"small-multiples-formatting","chapter":"3 Making Your Own Theme","heading":"Small Multiples Formatting","text":"function contains bit code, modify strip.background strip.text. elements become relevant small multiples charts like one discussed Chapter 2. Let’s turn penguin chart small multiples chart see components BBC’s theme. ’ve used code bbc_style() function, minus sections deal small multiples, make Figure 3.8.\nFigure 3.8: Small multiples chart changes strip text formatting\nuse facet_wrap() function make small multiples chart, left one chart per island. note , default, text chart noticeably smaller rest chart. ’s , gray background behind text stands removed gray background parts chart. consistency ’ve worked toward now gone, small text proportion text chart gray background sticks like sore thumb.following code changes text shows small multiples chart (called strip ggplot):remove background (, accurately, color white). make text larger, bold, left aligned using hjust = 0. make text size slightly smaller fit book added code make bold. can see result Figure @ref(fig: penguins-plot-facetted-bbc-plot).\nFigure 3.9: Small multiples chart BBC style\ntake look chart BBC website, ’ll see similar looks . tweaks bbc_style() function (text formatting, legends, axes, grid lines, backgrounds) show charts seen millions BBC.","code":"\npenguins_plot_weight +\n  theme(\n    strip.background = element_rect(fill = \"white\"),\n    strip.text = element_text(size = 17, hjust = 0, face = \"bold\")\n  )"},{"path":"custom-theme-chapter.html","id":"what-about-colors","chapter":"3 Making Your Own Theme","heading":"What About Colors?","text":"might thinking: Wait, color bars? Doesn’t theme change ? ’s common point confusion, answer doesn’t. read documentation theme() function, becomes clearer case: “Themes powerful way customize non-data components plots: .e. titles, labels, fonts, background, gridlines, legends.” words, ggplot themes change elements chart aren’t mapped data.Plots, hand, use color communicate information data. small multiples chart, instance, fill property mapped island (Biscoe salmon, Dream green, Torgersen blue). saw Chapter 2, can change fill using various scale_fill_ functions. world ggplot, scale_ functions control color, custom themes control overall look--feel charts.","code":""},{"path":"custom-theme-chapter.html","id":"conclusion-1","chapter":"3 Making Your Own Theme","heading":"Conclusion","text":"Stylianou Guibourg started developing custom theme BBC, one question: able create graphs R go directly onto BBC website? Using ggplot, succeeded. bbplot package allowed make plots consistent look--feel followed BBC standards , importantly, need help designer.can see many principles high-quality data visualization discussed Chapter 2 custom theme. particular, removal extraneous elements (axis titles grid lines, instance) helps keep focus data . applying theme requires users add single line ggplot code, became simple get others board. Users append bbc_style() code produce BBC-style plot.time, others BBC noticed data journalism team’s production-ready graphs wanted make . team members set R trainings colleagues developed “cookbook” (found https://bbc.github.io/rcookbook/) showed make various types charts. Soon, quality quantity BBC’s data visualization exploded. Stylianou told , “don’t think ’s day someone BBC hasn’t used package produce graphic.”Now ’ve seen custom ggplot themes work, try making one . , ’ve written code, can apply one line code.","code":""},{"path":"custom-theme-chapter.html","id":"learn-more-2","chapter":"3 Making Your Own Theme","heading":"Learn More","text":"Consult following resources learn BBC created used custom theme:BBC Visual Data Journalism cookbook R graphics (2019), https://bbc.github.io/rcookbook/“BBC Visual Data Journalism team works graphics R” BBC Visual Data Journalism team (2019), https://medium.com/bbc-visual--data-journalism/--bbc-visual--data-journalism-team-works--graphics--r-ed0b35693535","code":""},{"path":"maps-chapter.html","id":"maps-chapter","chapter":"4 Creating Maps","heading":"4 Creating Maps","text":"first started learning R, considered tool working numbers, shapes, surprised saw people using make maps. Abdoul Madjid, developer, creating maps R several years. Recently, used one visualize rates COVID-19 United States 2021.might think need specialized mapmaking software like ArcGIS make maps, tool expensive, Excel added support map-making recent years, features limited (example, can’t use make maps based street addresses). Even QGIS, open source tool similar ArcGIS, still requires learning new skills.Using R map-making benefits. ’s way flexible Excel, way less expensive ArcGIS, based syntax already know. also lets perform data manipulation tasks one tool apply principles high-quality data visualization discussed Chapter 2. example, Madjid used R obtain data, analyze , make COVID-19 map, can see Figure 4.1.\nFigure 4.1: Abdoul Madjid’s map COVID United States 2021\nchapter, ’ll explore principles working simple features geospatial data, walk Madjid’s code understand created high-quality map. ’ll also discuss find geospatial data use make maps.","code":""},{"path":"maps-chapter.html","id":"the-briefest-of-primers-on-geospatial-data","chapter":"4 Creating Maps","heading":"The Briefest of Primers on Geospatial Data","text":"don’t need GIS expert make maps. need understand things geospatial data works, starting two main types: vector raster. Vector data uses points, lines, polygons represent world. Raster data, often comes digital photographs, ties pixel image specific geographic location. Vector data tends easier work , ’ll using exclusively chapter.past, working geospatial data meant mastering competing standards, required learning different approach. Today, though, people use simple features model working vector geospatial data (often abbreviated sf), way easier understand. example, can import simple features data state Wyoming using code:, can now take look data:can see two columns, one state name (NAME) another called geometry. data looks like data frames ’re used encountering, aside two major differences: bunch metadata data frame, simple features data contains geographical data variable called geometry.metadata states one feature one field. feature referenced row, field NAME variable, contains non-spatial data. geometry column must present data frame geospatial data, counted field. Let’s look part simple features data.","code":"\nwyoming\n#> Simple feature collection with 1 feature and 1 field\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: -111.0546 ymin: 40.99477 xmax: -104.0522 ymax: 45.00582\n#> Geodetic CRS:  WGS 84\n#> # A tibble: 1 × 2\n#>   NAME                                              geometry\n#>   <chr>                                        <POLYGON [°]>\n#> 1 Wyoming ((-106.32 40.999, -106.33 40.999, -106.33 40.999,…"},{"path":"maps-chapter.html","id":"geometry-type","chapter":"4 Creating Maps","heading":"Geometry Type","text":"geometry type represents shape geospatial data ’re working . types typically written caps. case, relatively simple POLYGON type represents single polygon. can use ggplot display data calling geom_sf(), special geom designed work simple features data:Figure 4.2 shows resulting map Wyoming. may look like much, , hey, wasn’t one chose make Wyoming nearly perfect rectangle!\nFigure 4.2: map Wyoming\ngeometry types used simple feature data include POINT, display elements pin map represents single location. Try importing data shows single electrical vehicle charging station Wyoming, placing data map:Figure 4.3 shows resulting map.\nFigure 4.3: map single electric vehicle charging station Wyoming\nLINESTRING geometry type set points can connected lines, often used represent roads. can import plot following data show LINESTRING:Figure 4.4 shows us resulting map, section US Highway 30 runs Wyoming.\nFigure 4.4: map section U.S. Highway 30 running Wyoming\ngeometry types MULTI variation (MULTIPOINT, MULTILINESTRING, MULTIPOLYGON) combines multiple instances type one row data. can import plot MULTIPOINT data showing electric vehicle charging stations Wyoming using code:Figure 4.5 shows map made code looks like.\nFigure 4.5: map electric vehicle charging stations Wyoming\nLikewise, can use MULTILINESTRING data show just one road, major roads Wyoming:Figure 4.6 shows resulting map.\nFigure 4.6: map major roads Wyoming\nLastly, use MULTIPOLYGON data , example, depict state made multiple polygons. see mean, take look map Wyoming’s counties. can import data make map following code:look data, can see represents 23 counties state:geometry type data MULTIPOLYGON. addition, repeated MULTIPOLYGON text geometry column indicates row contains shape type MULTIPOLYGON.Figure 4.7 map made data.\nFigure 4.7: map Wyoming counties\ncan easily see multiple polygons make map.","code":"\nlibrary(tidyverse)\n\nwyoming %>%\n  ggplot() +\n  geom_sf()\nwyoming_one_ev_station <- read_sf(\"https://data.rwithoutstatistics.com/wyoming-one-ev-station.geojson\")\n\nggplot() +\n  geom_sf(data = wyoming) +\n  geom_sf(\n    data = wyoming_one_ev_station,\n    shape = 21,\n    fill = \"#ff7400\",\n    color = \"white\",\n    size = 3\n  )\nwyoming_highway_30 <- read_sf(\"data/wyoming-highway-30.geojson\")\n\nwyoming_highway_30 %>%\n  ggplot() +\n  geom_sf(data = wyoming) +\n  geom_sf(\n    color = \"#ff7400\",\n    linewidth = 1\n  )\nwyoming_all_ev_stations <- read_sf(\"https://data.rwithoutstatistics.com/wyoming-all-ev-stations.geojson\")\n\nggplot() +\n  geom_sf(data = wyoming) +\n  geom_sf(\n    data = wyoming_all_ev_stations,\n    fill = \"#ff7400\",\n    color = \"white\",\n    shape = 21,\n    size = 3\n  )\nwyoming_roads <- read_sf(\"https://data.rwithoutstatistics.com/wyoming-roads.geojson\")\n\nwyoming_roads %>%\n  ggplot() +\n  geom_sf(data = wyoming) +\n  geom_sf(\n    color = \"#ff7400\",\n    linewidth = 1\n  )#> Simple feature collection with 23 features and 1 field\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: -111.0546 ymin: 40.99477 xmax: -104.0522 ymax: 45.00582\n#> Geodetic CRS:  WGS 84\n#> # A tibble: 23 × 2\n#>    NAME                                             geometry\n#>    <chr>                                  <MULTIPOLYGON [°]>\n#>  1 Lincoln     (((-110.54 42.287, -110.54 42.286, -110.54 4…\n#>  2 Fremont     (((-109.33 42.869, -109.33 42.869, -109.33 4…\n#>  3 Uinta       (((-110.58 41.579, -110.58 41.579, -110.58 4…\n#>  4 Big Horn    (((-107.5 44.64, -107.5 44.64, -107.5 44.641…\n#>  5 Hot Springs (((-108.16 43.471, -108.16 43.46, -108.16 43…\n#>  6 Washakie    (((-107.68 44.166, -107.68 44.166, -107.68 4…\n#>  7 Converse    (((-105.92 43.495, -105.92 43.495, -105.91 4…\n#>  8 Sweetwater  (((-109.57 40.998, -109.57 40.998, -109.57 4…\n#>  9 Crook       (((-104.46 44.181, -104.46 44.181, -104.46 4…\n#> 10 Carbon      (((-106.32 41.383, -106.32 41.382, -106.32 4…\n#> # ℹ 13 more rows\nwyoming_counties %>%\n  ggplot() +\n  geom_sf(data = wyoming) +\n  geom_sf()"},{"path":"maps-chapter.html","id":"the-dimensions","chapter":"4 Creating Maps","heading":"The Dimensions","text":"Next, geospatial data frame contains data’s dimensions, type geospatial data ’re working . Wyoming example, looks like : Dimension: XY, meaning data two-dimensional, case geospatial data used chapter. two dimensions (Z M) ’ll see much rarely. ’ll leave investigate .","code":""},{"path":"maps-chapter.html","id":"bounding-box","chapter":"4 Creating Maps","heading":"Bounding Box","text":"penultimate element metadata bounding box. bounding box represents smallest area can fit geospatial data. wyoming object, looks like :Bounding box:  xmin: -111.0569 ymin: 40.99475 xmax: -104.0522 ymax: 45.0059The ymin value 40.99475 ymax value 45.0059 represent lowest highest latitude, respectively, state’s polygon can fit . x values longitude. Bounding boxes calculated automatically, don’t typically worry altering .","code":""},{"path":"maps-chapter.html","id":"the-geodetic-crs","chapter":"4 Creating Maps","heading":"The Geodetic CRS","text":"last piece metadata specifies coordinate reference system used project data plot . problem representing geospatial data ’re displaying information three-dimensional Earth two-dimensional map. requires us choose coordinate reference system determines type correspondence, projection, use making map.data Wyoming counties map includes line Geodetic CRS: WGS 84, indicating use coordinate reference system known WGS84. see different projection, check map using ’s known Albers equal-area conic convenience projection:use projection, add line uses st_transform() function sf package, along data albersusa package, plotting using ggplot. Wyoming looked perfectly horizontal Figure 4.7, version Figure 4.8 appears tilted.\nFigure 4.8: map Wyoming counties using Albers equal-area conic convenience projection\n’re curious change projections making maps , fear . ’ll see look Abdoul Madjid’s map next section. want know choose appropriate projections maps, check “Using Appropriate Projections” section .","code":"\nwyoming_counties %>%\n  sf::st_transform(albersusa::us_laea_proj) %>%\n  ggplot() +\n  geom_sf()"},{"path":"maps-chapter.html","id":"the-geometry-column","chapter":"4 Creating Maps","heading":"The geometry Column","text":"addition metadata, simple features data differs traditional data frames another respect: geometry column. probably guessed name, holds data needed make maps.understand works, consider connect--dots drawings probably completed kid. added lines connect one point next, subject drawing became clear. geometry column similar. set numbers, corresponds point. ’re using LINESTRING/MULTILINESTRING POLYGON/MULTIPOLYGON simple features data, ggplot uses numbers geometry column draw point adds lines connect points. ’re using POINT/MULTIPOINT data, draws points doesn’t connect ., never worry details look depth geometry column.","code":""},{"path":"maps-chapter.html","id":"recreating-the-covid-map","chapter":"4 Creating Maps","heading":"Recreating the COVID Map","text":"Now understand basics geospatial data, let’s walk code Madjid used make COVID-19 map, makes use geometry types, dimensions, bounding boxes, projections, geometry column just explored. (’ve made small modifications code make final map fit page.) Let’s begin loading packages:albersusa package give us access geospatial data, can install follows:can install packages using standard install.packages() code. ’ll use tidyverse import data, manipulate , plot ggplot. sf package enable us change coordinate reference system use appropriate projection data. zoo package functions calculating rolling averages, colorspace package gives us color scale highlights data well.","code":"\nlibrary(tidyverse)\nlibrary(albersusa)\nlibrary(sf)\nlibrary(zoo)\nlibrary(colorspace)\nremotes::install_github(\"hrbrmstr/albersusa\")"},{"path":"maps-chapter.html","id":"importing-the-data","chapter":"4 Creating Maps","heading":"Importing the Data","text":"Next, let’s import data need. require three pieces data: COVID rates state time, state populations, geospatial information. Madjid imported pieces data separately merged , ’ll .First, import COVID data. data comes directly New York Times, publishes daily case rates state CSV file GitHub account. ’ve dropped fips variable; Federal Information Processing Standards (FIPS) numeric codes used represent states, can reference states names instead:take look data, can see arrival first COVID cases United States January 2020.Madjid’s map shows per capita rates (rates per 100,000 people) rather absolute rates (rates without consideration state’s population). , recreate maps, need obtain data state’s population. Madjid downloaded data CSV:import data, keep State Pop (population) variables, save object called usa_states. Let’s see usa_states looks like:Finally, ’ll import geospatial data save object called usa_states_geom:usa_sf() function albersusa package gives us simple features data US states. Conveniently, places Alaska Hawaii locations, scale, make easy see. data includes multiple variables, need state names, keep name variable .use st_transform() function sf package change coordinate reference system. one used comes us_laea_proj object albersusa package. Remember Albers equal-area conic convenience projection used change appearance Wyoming counties map? projection.","code":"\ncovid_data <- read_csv(\"https://data.rwithoutstatistics.com/covid-us-states.csv\") %>%\n  select(-fips)#> # A tibble: 61,102 × 4\n#>    date       state      cases deaths\n#>    <date>     <chr>      <dbl>  <dbl>\n#>  1 2020-01-21 Washington     1      0\n#>  2 2020-01-22 Washington     1      0\n#>  3 2020-01-23 Washington     1      0\n#>  4 2020-01-24 Illinois       1      0\n#>  5 2020-01-24 Washington     1      0\n#>  6 2020-01-25 California     1      0\n#>  7 2020-01-25 Illinois       1      0\n#>  8 2020-01-25 Washington     1      0\n#>  9 2020-01-26 Arizona        1      0\n#> 10 2020-01-26 California     2      0\n#> # ℹ 61,092 more rows\nusa_states <- read_csv(\"https://data.rwithoutstatistics.com/population-by-state.csv\") %>%\n  select(State, Pop)#> # A tibble: 52 × 2\n#>    State               Pop\n#>    <chr>             <dbl>\n#>  1 California     39613493\n#>  2 Texas          29730311\n#>  3 Florida        21944577\n#>  4 New York       19299981\n#>  5 Pennsylvania   12804123\n#>  6 Illinois       12569321\n#>  7 Ohio           11714618\n#>  8 Georgia        10830007\n#>  9 North Carolina 10701022\n#> 10 Michigan        9992427\n#> # ℹ 42 more rows\nusa_states_geom <- usa_sf() %>%\n  select(name) %>%\n  st_transform(us_laea_proj)"},{"path":"maps-chapter.html","id":"calculating-daily-covid-cases","chapter":"4 Creating Maps","heading":"Calculating Daily COVID Cases","text":"Next, need calculate number daily COVID cases. covid_data data frame gives us cumulative cases state, number cases per day:use group_by() function calculate totals state, create new variable called pd_cases, represents number cases previous day (can use lag() function assign data variable). days cases counts previous day, cases, set value 0 using replace_na() function.Finally, create new variable called daily_cases. set value variable, use case_when() function create condition: cases variable (holds cases day) greater pd_cases variable (holds cases one day prior), daily_cases equal cases minus pd_cases. Otherwise, set daily_cases equal 0.grouped data state beginning, must now remove grouping using ungroup() function arranging data state date. Now take look covid_cases data frame created:next step, ’ll make use daily_cases variable.","code":"\ncovid_cases <- covid_data %>%\n  group_by(state) %>%\n  mutate(\n    pd_cases = lag(cases)\n  ) %>%\n  replace_na(list(pd_cases = 0)) %>%\n  mutate(\n    daily_cases = case_when(\n      cases > pd_cases ~ cases - pd_cases,\n      TRUE ~ 0\n    )\n  ) %>%\n  ungroup() %>%\n  arrange(state, date)#> # A tibble: 61,102 × 6\n#>    date       state   cases deaths pd_cases daily_cases\n#>    <date>     <chr>   <dbl>  <dbl>    <dbl>       <dbl>\n#>  1 2020-03-13 Alabama     6      0        0           6\n#>  2 2020-03-14 Alabama    12      0        6           6\n#>  3 2020-03-15 Alabama    23      0       12          11\n#>  4 2020-03-16 Alabama    29      0       23           6\n#>  5 2020-03-17 Alabama    39      0       29          10\n#>  6 2020-03-18 Alabama    51      0       39          12\n#>  7 2020-03-19 Alabama    78      0       51          27\n#>  8 2020-03-20 Alabama   106      0       78          28\n#>  9 2020-03-21 Alabama   131      0      106          25\n#> 10 2020-03-22 Alabama   157      0      131          26\n#> # ℹ 61,092 more rows"},{"path":"maps-chapter.html","id":"calculating-incidence-rates","chapter":"4 Creating Maps","heading":"Calculating Incidence Rates","text":"’re quite done calculating values. data Madjid used make map didn’t include daily case counts. Instead, contained five-day rolling average cases per 100,000 people. rolling average average case rate certain time period. Quirks reporting (example, reporting weekends instead rolling Saturday Sunday cases Monday) can make value single day less reliable. Using rolling average smooths things . code generate data:create new data frame called covid_cases_rm (rm stands rolling mean). first step creation use rollmean() function zoo package create roll_cases variable, holds average number cases five-day period surrounding single date. k argument number days want calculate rolling average (five, case), fill argument determines happens cases like first day, can’t calculate five-day rolling mean days prior day (Madjid set values NA).calculating roll_cases, need calculate per capita case rates. , needed population data, join population data usa_states data frame covid_cases data:drop rows missing population data (Pop variable). practice, means getting rid several US territories (American Samoa, Guam, Northern Marianas Islands, Virgin Islands).Next, created per capita case rate variable called incidence_rate multiplying roll_cases variable 100,000 dividing population state:Rather keeping raw values (example, June 29, 2021, Florida rate 57.77737 cases per 100,000 people), use cut() function convert values categories: values >0 (greater zero), values >5 (greater five), values >50 (greater 50).last step filter data includes 2021 data (year depicted Madjid’s map) select variables (state, date, incidence_rate) ’ll need create map. final covid_cases_rm data frame.now data frame can combine geospatial data.","code":"\ncovid_cases %>%\n  mutate(roll_cases = rollmean(\n    daily_cases,\n    k = 5,\n    fill = NA\n  ))\ncovid_cases_rm <- covid_cases %>%\n  mutate(roll_cases = rollmean(\n    daily_cases,\n    k = 5,\n    fill = NA\n  )) %>%\n  left_join(\n    usa_states,\n    by = c(\"state\" = \"State\")\n  ) %>%\n  drop_na(Pop)\ncovid_cases_rm <- covid_cases_rm %>%\n  mutate(incidence_rate = 10^5 * roll_cases / Pop) %>%\n  mutate(\n    incidence_rate = cut(\n      incidence_rate,\n      breaks = c(seq(0, 50, 5), Inf),\n      include.lowest = TRUE\n    ) %>%\n      factor(labels = paste0(\">\", seq(0, 50, 5)))\n  )#> # A tibble: 18,980 × 3\n#>    state   date       incidence_rate\n#>    <chr>   <date>     <fct>         \n#>  1 Alabama 2021-01-01 >50           \n#>  2 Alabama 2021-01-02 >50           \n#>  3 Alabama 2021-01-03 >50           \n#>  4 Alabama 2021-01-04 >50           \n#>  5 Alabama 2021-01-05 >50           \n#>  6 Alabama 2021-01-06 >50           \n#>  7 Alabama 2021-01-07 >50           \n#>  8 Alabama 2021-01-08 >50           \n#>  9 Alabama 2021-01-09 >50           \n#> 10 Alabama 2021-01-10 >50           \n#> # ℹ 18,970 more rows"},{"path":"maps-chapter.html","id":"adding-geospatial-data","chapter":"4 Creating Maps","heading":"Adding Geospatial Data","text":"’ve now used two three data sources (COVID case data state population data) create covid_cases_rm data frame ’ll need make map. Let’s now use third data source: geospatial data saved usa_states_geom. Simple features data allows us merge regular data frames geospatial data, another mark favor:merge covid_cases_rm data frame geospatial data, matching name variable usa_states_geom state variable covid_cases_rm. Next, create new variable called fancy_date. name implies, ’s nicely formatted version date (example, Jan 01 instead 2021-01-01):format() function formatting fct_inorder() function makes fancy_date variable sort data date (rather , say, alphabetically, put August January). Last, use relocate() function put fancy_date column next date column. save data frame usa_states_geom_covid. Take look :can see metadata geometry columns discussed.","code":"\nusa_states_geom %>%\n  left_join(covid_cases_rm, by = c(\"name\" = \"state\"))\nusa_states_geom_covid <- usa_states_geom %>%\n  left_join(covid_cases_rm, by = c(\"name\" = \"state\")) %>%\n  mutate(fancy_date = fct_inorder(format(date, \"%b. %d\"))) %>%\n  relocate(fancy_date, .before = incidence_rate)#> Simple feature collection with 18615 features and 4 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: -2100000 ymin: -2500000 xmax: 2516374 ymax: 732103.3\n#> Projected CRS: +proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs\n#> First 10 features:\n#>       name       date fancy_date incidence_rate\n#> 1  Arizona 2021-01-01    Jan. 01            >50\n#> 2  Arizona 2021-01-02    Jan. 02            >50\n#> 3  Arizona 2021-01-03    Jan. 03            >50\n#> 4  Arizona 2021-01-04    Jan. 04            >50\n#> 5  Arizona 2021-01-05    Jan. 05            >50\n#> 6  Arizona 2021-01-06    Jan. 06            >50\n#> 7  Arizona 2021-01-07    Jan. 07            >50\n#> 8  Arizona 2021-01-08    Jan. 08            >50\n#> 9  Arizona 2021-01-09    Jan. 09            >50\n#> 10 Arizona 2021-01-10    Jan. 10            >50\n#>                          geometry\n#> 1  MULTIPOLYGON (((-1111066 -8...\n#> 2  MULTIPOLYGON (((-1111066 -8...\n#> 3  MULTIPOLYGON (((-1111066 -8...\n#> 4  MULTIPOLYGON (((-1111066 -8...\n#> 5  MULTIPOLYGON (((-1111066 -8...\n#> 6  MULTIPOLYGON (((-1111066 -8...\n#> 7  MULTIPOLYGON (((-1111066 -8...\n#> 8  MULTIPOLYGON (((-1111066 -8...\n#> 9  MULTIPOLYGON (((-1111066 -8...\n#> 10 MULTIPOLYGON (((-1111066 -8..."},{"path":"maps-chapter.html","id":"making-the-map","chapter":"4 Creating Maps","heading":"Making the Map","text":"took lot work end surprisingly simple data frame usa_states_geom_covid. data may simple, code Madjid used make map quite complex. section, walk pieces.final map actually multiple maps, one day 2021. Combining 365 days makes large final product, instead showing code every single day, ’ll filter usa_states_geom_covid show just first six days January:save result data frame called usa_states_geom_covid_six_days. ’s data looks like:Madjid’s map giant, includes 365 days. ’ll change size elements fit book.","code":"\nusa_states_geom_covid_six_days <- usa_states_geom_covid %>%\n  filter(date <= as.Date(\"2021-01-06\"))#> Simple feature collection with 306 features and 4 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: -2100000 ymin: -2500000 xmax: 2516374 ymax: 732103.3\n#> Projected CRS: +proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs\n#> First 10 features:\n#>        name       date fancy_date incidence_rate\n#> 1   Arizona 2021-01-01    Jan. 01            >50\n#> 2   Arizona 2021-01-02    Jan. 02            >50\n#> 3   Arizona 2021-01-03    Jan. 03            >50\n#> 4   Arizona 2021-01-04    Jan. 04            >50\n#> 5   Arizona 2021-01-05    Jan. 05            >50\n#> 6   Arizona 2021-01-06    Jan. 06            >50\n#> 7  Arkansas 2021-01-01    Jan. 01            >50\n#> 8  Arkansas 2021-01-02    Jan. 02            >50\n#> 9  Arkansas 2021-01-03    Jan. 03            >50\n#> 10 Arkansas 2021-01-04    Jan. 04            >50\n#>                          geometry\n#> 1  MULTIPOLYGON (((-1111066 -8...\n#> 2  MULTIPOLYGON (((-1111066 -8...\n#> 3  MULTIPOLYGON (((-1111066 -8...\n#> 4  MULTIPOLYGON (((-1111066 -8...\n#> 5  MULTIPOLYGON (((-1111066 -8...\n#> 6  MULTIPOLYGON (((-1111066 -8...\n#> 7  MULTIPOLYGON (((557903.1 -1...\n#> 8  MULTIPOLYGON (((557903.1 -1...\n#> 9  MULTIPOLYGON (((557903.1 -1...\n#> 10 MULTIPOLYGON (((557903.1 -1..."},{"path":"maps-chapter.html","id":"generating-the-basic-map","chapter":"4 Creating Maps","heading":"Generating the Basic Map","text":"Now six days data, let’s make maps. Abdoul Madjid’s map-making code two main parts: generating basic map, tweaking appearance. ’ll revisit three lines code used make Wyoming maps, adornments improve quality visualization:use geom_sf() plot geospatial data, modifying couple arguments. use size = .05 make state borders less prominent color = \"grey55\" set borders medium gray color. , make one map day, use facet_wrap() function. vars(fancy_date) code specifies fancy_date variable used faceting (words, make one map day) strip.position = \"bottom\" moves labels Jan. 01, Jan. 02, bottom maps. can see resulting map Figure 4.9.\nFigure 4.9: map showing incidence rate COVID first six days 2021\ngenerated basic map, let’s now make look good.","code":"\nusa_states_geom_covid_six_days %>%\n  ggplot() +\n  geom_sf(\n    aes(fill = incidence_rate),\n    size = .05,\n    color = \"grey55\"\n  ) +\n  facet_wrap(\n    vars(fancy_date),\n    strip.position = \"bottom\"\n  )"},{"path":"maps-chapter.html","id":"applying-data-visualization-principles-to-the-map","chapter":"4 Creating Maps","heading":"Applying Data Visualization Principles to the Map","text":"now , code Abdoul Madjid uses improve appearance maps. Many tweaks shown feel familiar ’ve read Chapter 2, highlighting benefit making maps ggplot: can apply data-visualization principles learned making charts.scale_fill_discrete_sequential() function colorspace package sets color scale. Madjid uses “rocket” palette (palette Cédric Scherer Georgios Karamanis used Chapter 2) changes legend title “COVID-19 INCIDENCE RATE.” Within guide_legend() function, Madjid puts adjusts position alignment well text properties title. also puts colored squares one row, adjusts height width, tweaks text properties labels (>0, >5, ).Next, adds title caption using labs() function. , uses theme_minimal() making tweaks using theme() function. tweaks include setting font text color, making title caption bold, adjusting size, alignment, margins around . also adjusts size strip text (Jan 01, Jan 02, ) makes bold, puts legend top maps, adds bit spacing around . removes grid lines longitude latitude lines, adds bit padding around entire visualization makes background light gray.: Figure 4.10 shows recreation Abdoul Madjid’s COVID-19 map.\nFigure 4.10: recreation Abdoul Madjid’s map\ndata import data cleaning analysis visualization, ’ve shown Abdoul Madjid made beautiful map R.","code":"\nusa_states_geom_covid_six_days %>%\n  ggplot() +\n  geom_sf(\n    aes(fill = incidence_rate),\n    size = .05,\n    color = \"transparent\"\n  ) +\n  facet_wrap(\n    vars(fancy_date),\n    strip.position = \"bottom\"\n  ) +\n  scale_fill_discrete_sequential(\n    palette = \"Rocket\",\n    name = \"COVID-19 INCIDENCE RATE\",\n    guide = guide_legend(\n      title.position = \"top\",\n      title.hjust = .5,\n      title.theme = element_text(\n        family = \"Times New Roman\",\n        size = rel(9),\n        margin = margin(\n          b = .1,\n          unit = \"cm\"\n        )\n      ),\n      nrow = 1,\n      keyheight = unit(.3, \"cm\"),\n      keywidth = unit(.3, \"cm\"),\n      label.theme = element_text(\n        family = \"Times New Roman\",\n        size = rel(6),\n        margin = margin(\n          r = 5,\n          unit = \"pt\"\n        )\n      )\n    )\n  ) +\n  labs(\n    title = \"2021 · A pandemic year\",\n    caption = \"Incidence rates are calculated for 100,000 people in each state.\n                  Inspired from a graphic in the DIE ZEIT newspaper of November 18, 2021.\n                  Data from NY Times · Tidytuesday Week-1 2022 · Abdoul ISSA BIDA.\"\n  ) +\n  theme_minimal() +\n  theme(\n    text = element_text(\n      family = \"Times New Roman\",\n      color = \"#111111\"\n    ),\n    plot.title = element_text(\n      size = rel(2.5),\n      face = \"bold\",\n      hjust = 0.5,\n      margin = margin(\n        t = .25,\n        b = .25,\n        unit = \"cm\"\n      )\n    ),\n    plot.caption = element_text(\n      hjust = .5,\n      face = \"bold\",\n      margin = margin(\n        t = .25,\n        b = .25,\n        unit = \"cm\"\n      )\n    ),\n    strip.text = element_text(\n      size = rel(0.75),\n      face = \"bold\"\n    ),\n    legend.position = \"top\",\n    legend.box.spacing = unit(.25, \"cm\"),\n    panel.grid = element_blank(),\n    axis.text = element_blank(),\n    plot.margin = margin(\n      t = .25,\n      r = .25,\n      b = .25,\n      l = .25,\n      unit = \"cm\"\n    ),\n    plot.background = element_rect(\n      fill = \"#e5e4e2\",\n      color = NA\n    )\n  )"},{"path":"maps-chapter.html","id":"making-your-own-maps","chapter":"4 Creating Maps","heading":"Making Your Own Maps","text":"may now wondering: Okay, great, actually make maps? Let’s talk can find geospatial data, choose projection, wrangle geospatial data get ready mapping.","code":""},{"path":"maps-chapter.html","id":"importing-raw-data","chapter":"4 Creating Maps","heading":"Importing Raw Data","text":"two ways access simple features geospatial data. first import raw data. Geospatial data can take number different formats. ESRI shapefiles (.shp extension) common, might also encounter GeoJSON files (.geojson), KML files (.kml), others. Chapter 8 Geocomputation R Robin Lovelace, Jakub Nowosad, Jannes Muenchow discusses range formats.good news us single function can read pretty much type geospatial data: read_sf() sf package. Let’s show example works. Say ’ve downloaded geospatial data United States state boundaries website geojson.xyz GeoJSON format, saved data folder states.geojson. can import data using read_sf() function:dsn argument (stands data source name) tells read_sf() find file. save data object us_states.","code":"\nus_states <- read_sf(dsn = \"data/states.geojson\")"},{"path":"maps-chapter.html","id":"accessing-geospatial-data-using-r-functions","chapter":"4 Creating Maps","heading":"Accessing Geospatial Data Using R Functions","text":"’ll sometimes work raw data way, always. ’s certain R packages provide functions accessing geospatial data. Madjid used usa_sf() function albersusa package acquire data. Another package accessing geospatial data related United States, tigris, number well-named functions different types data. example, can load tigris package run states() function:use cb = TRUE argument opt us using detailed shapefile set resolution manageable 20m (1:20 million). Without changes, shapefile ’d get large slow work . also set progress_bar = FALSE won’t see messages tigris shares loads data. save result states_tigris.tigris package functions get geospatial data counties, census tracts, roads, . Kyle Walker, developer package, wrote book, Analyzing US Census Data: Methods, Maps, Models R, ’d like learn use .’re looking data outside United States, fear ! rnaturalearth package provides functions importing geospatial data across world. example, ne_countries() can retrieve geospatial data various countries:code uses two arguments: returnclass = \"sf\" get data simple features format, continent = \"Africa\" get countries African continent. save result object called africa_countries, can plot data map:Figure 4.11 shows resulting map.\nFigure 4.11: map Africa made data rnaturalearth package\ncan’t find appropriate package, can always fall back using read_sf() sf package.","code":"\nlibrary(tigris)\n\nstates_tigris <- states(\n  cb = TRUE,\n  resolution = \"20m\",\n  progress_bar = FALSE\n)\nlibrary(rnaturalearth)\n\nafrica_countries <- ne_countries(\n  returnclass = \"sf\",\n  continent = \"Africa\"\n)\nafrica_countries %>%\n  ggplot() +\n  geom_sf()"},{"path":"maps-chapter.html","id":"using-appropriate-projections","chapter":"4 Creating Maps","heading":"Using Appropriate Projections","text":"access geospatial data, need decide projection use. ’re looking simple answer question, ’ll disappointed. Robin Lovelace, Jakub Nowosad, Jannes Muenchow put book Geocomputation R, “question CRS [use] tricky, rarely ‘right’ answer.”feel overwhelmed task choosing projection, crsuggest package, also Kyle Walker, can give ideas. suggest_top_crs() function returns coordinate reference system well-suited data. Let’s load crsuggest try africa_countries data:suggest_top_crs() function return projection number 28232. can now pass value st_transform() function change projection plot:run, code generates map Figure 4.12.\nFigure 4.12: map Africa made projection number 28232\ncan see, ’ve mapped Africa different projection.","code":"\nlibrary(crsuggest)\n\nafrica_countries %>%\n  suggest_top_crs()\nafrica_countries %>%\n  st_transform(28232) %>%\n  ggplot() +\n  geom_sf()"},{"path":"maps-chapter.html","id":"wrangling-your-geospatial-data","chapter":"4 Creating Maps","heading":"Wrangling Your Geospatial Data","text":"ability merge traditional data frames geospatial data huge benefit working simple features data. Remember COVID map, Madjid analyzed traditional data frames merging geospatial data. simple features data acts just like traditional data frames, can just easily apply data-wrangling analysis functions tidyverse directly simple features object. demonstrate , let’s return africa_countries simple features data, selecting two variables (name pop_est) see name population countries:output looks like following:Say want make map showing African countries populations larger 20 million. , ’d need first calculate value country. Let’s using mutate() if_else() functions, return TRUE country’s population 20 million FALSE otherwise, store result variable called population_above_20_million:can take code pipe ggplot, setting fill aesthetic property equal population_above_20_million:code generates map shown Figure 4.13.\nFigure 4.13: map Africa highlights countries populations 20 million people\nsimple example data wrangling analysis can perform simple features data. larger lesson : skill ’ve developed working data R serve well working geospatial data.","code":"\nafrica_countries %>%\n  select(name, pop_est)#> Simple feature collection with 51 features and 2 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: -17.62504 ymin: -34.81917 xmax: 51.13387 ymax: 37.34999\n#> Geodetic CRS:  WGS 84\n#> First 10 features:\n#>               name  pop_est                       geometry\n#> 2         Tanzania 58005463 MULTIPOLYGON (((33.90371 -0...\n#> 3        W. Sahara   603253 MULTIPOLYGON (((-8.66559 27...\n#> 12 Dem. Rep. Congo 86790567 MULTIPOLYGON (((29.34 -4.49...\n#> 13         Somalia 10192317 MULTIPOLYGON (((41.58513 -1...\n#> 14           Kenya 52573973 MULTIPOLYGON (((39.20222 -4...\n#> 15           Sudan 42813238 MULTIPOLYGON (((24.56737 8....\n#> 16            Chad 15946876 MULTIPOLYGON (((23.83766 19...\n#> 26    South Africa 58558270 MULTIPOLYGON (((16.34498 -2...\n#> 27         Lesotho  2125268 MULTIPOLYGON (((28.97826 -2...\n#> 49        Zimbabwe 14645468 MULTIPOLYGON (((31.19141 -2...\nafrica_countries %>%\n  select(name, pop_est) %>%\n  mutate(population_above_20_million = if_else(pop_est > 20000000, TRUE, FALSE))\nafrica_countries %>%\n  select(name, pop_est) %>%\n  mutate(population_above_20_million = if_else(pop_est > 20000000, TRUE, FALSE)) %>%\n  ggplot(aes(fill = population_above_20_million)) +\n  geom_sf()"},{"path":"maps-chapter.html","id":"in-conclusion-r-is-a-map-making-swiss-army-knife","chapter":"4 Creating Maps","heading":"In Conclusion: R is a Map-Making Swiss Army Knife","text":"short romp world map-making R, discussed basics simple features geospatial data, reviewed Abdoul Madjid applied knowledge make map, explored get geospatial data, covered project appropriately make maps.R may well best tool making maps. also lets use skills ’ve developed working traditional data frames ggplot code makes visualizations look great. , Madjid isn’t GIS expert, combined basic understanding geospatial data, fundamental R skills, knowledge data-visualization principles make beautiful map. Now ’s turn .","code":""},{"path":"maps-chapter.html","id":"learn-more-3","chapter":"4 Creating Maps","heading":"Learn More","text":"Consult following resources learn make maps conduct geospatial analysis R.Geocomputation R Robin Lovelace, Jakub Nowosad, Jannes Muenchow (CRC Press, 2019), https://r.geocompx.org/Chapter 7 (Draw Maps) Data Visualization: Practical Introduction Kieran Healy (Princeton University Press, 2018), https://socviz.coLessons Space Data Visualization: Use R, ggplot2, principles graphic design create beautiful truthful visualizations data, course Andrew Weiss (2022), https://datavizs22.classes.andrewheiss.com/content/12-content/","code":""},{"path":"tables-chapter.html","id":"tables-chapter","chapter":"5 Crafting High-Quality Tables","heading":"5 Crafting High-Quality Tables","text":"book Fundamentals Data Visualization, Claus Wilke writes tables “important tool visualizing data.” statement might seem odd. Tables often considered opposite data visualizations plots: place dump numbers nerds care read . Wilke sees things differently.Tables data dumps devoid design. bars, lines, points graphs visualizations, numbers table, care appearance. example, take look tables made reputable news sources; data dumps . Media organizations, whose job communicate effectively, pay lot attention table design. elsewhere, tables’ apparent simplicity, Wilke writes, “may always receive attention need.”Many people use Microsoft Word make tables, strategy potential pitfalls. Wilke found version Word included 105 built-table styles. , around 80 percent, including default style, violated key principle table design. good news R great tool making high-quality tables. number packages purpose, within packages, several functions designed make sure tables follow important design principles.\nMoreover, ’re writing reports R Markdown (’ll learn Chapter 6), can include code generate table export document. working single tool create tables, text, visualizations, won’t copy paste data, lowering risk human error.chapter examines table design principles shows apply tables using R’s gt package, one popular table-making packages (, ’ll soon see, one uses good design principles default). principles, code chapter, adapted Tom Mock’s blog post “10+ Guidelines Better Tables R.” Mock works Posit, company makes RStudio, become something R table connoisseur. ’ll walk examples Mock’s code show small tweaks can make big difference.","code":""},{"path":"tables-chapter.html","id":"creating-a-data-frame","chapter":"5 Crafting High-Quality Tables","heading":"Creating a Data Frame","text":"’ll begin creating data frame can use make tables throughout chapter. First, let’s load packages need. ’ll rely tidyverse package general data manipulation functions, gapminder data ’ll use, gt make tables, gtExtras formatting tables:saw Chapter 2, gapminder package provides country-level demographic statistics. make data frame table, let’s use just countries (first four, alphabetical order: Afghanistan, Albania, Algeria, Angola) three years (1952, 1972, 1992). gapminder data many years, need demonstrate table-making principles. code make data frame called gdp:Let’s see gdp looks like:Now data, let’s use make table.","code":"\nlibrary(tidyverse)\nlibrary(gapminder)\nlibrary(gt)\nlibrary(gtExtras)\ngdp <- gapminder %>%\n  filter(country %in% c(\"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\")) %>%\n  select(country, year, gdpPercap) %>%\n  mutate(country = as.character(country)) %>%\n  pivot_wider(\n    id_cols = country,\n    names_from = year,\n    values_from = gdpPercap\n  ) %>%\n  select(country, `1952`, `1972`, `1992`) %>%\n  rename(Country = country)#> # A tibble: 4 × 4\n#>   Country      `1952`  `1972`  `1992`\n#>   <chr>         <dbl>   <dbl>   <dbl>\n#> 1 Afghanistan  779.45  739.98  649.34\n#> 2 Albania     1601.1  3313.4  2497.4 \n#> 3 Algeria     2449.0  4182.7  5023.2 \n#> 4 Angola      3520.6  5473.3  2627.8"},{"path":"tables-chapter.html","id":"table-design-principles","chapter":"5 Crafting High-Quality Tables","heading":"Table Design Principles","text":"Unsurprisingly, principles good table design similar data visualization generally. section, cover six important.","code":""},{"path":"tables-chapter.html","id":"principle-one-minimize-clutter","chapter":"5 Crafting High-Quality Tables","heading":"Principle One: Minimize Clutter","text":"data visualization, one important principles table design minimize clutter. One way can removing unnecessary elements. common source clutter tables gridlines. Often, see tables look like Figure 5.1.\nFigure 5.1: table gridlines everywhere\ngridlines around every single cell table unnecessary creates visual clutter distracts goal communicating clearly. table minimal even gridlines (Figure 5.2) much effective communication tool.\nFigure 5.2: table horizontal gridlines\nmentioned gt uses good table design principles default, guideline great example . second table, minimal gridlines, requires just two lines code. pipe gdp data gt() function, creates table:add gridlines every part example, add additional code. , code follows gt() function adds gridlines:Since don’t recommend taking approach, won’t walk code. However, wanted remove additional gridlines, use following:tab_style() function uses two-step approach. First, identifies style want modify (case, borders); next, tells function apply styles. , tell tab_style() want modify borders using cell_borders() function, making borders transparent. , say want transformation apply cells_body() location. options include cells_column_labels() first row.gives us table gridlines body (Figure 5.3).\nFigure 5.3: Figure 1-3 table gridlines header row bottom\nLet’s save table object called table_no_gridlines can add onto later.","code":"\ngdp %>%\n  gt()\ngdp %>%\n  gt() %>%\n  tab_style(\n    style = cell_borders(\n      side = \"all\",\n      color = \"black\",\n      weight = px(1),\n      style = \"solid\"\n    ),\n    locations = list(\n      cells_body(\n        everything()\n      ),\n      cells_column_labels(\n        everything()\n      )\n    )\n  ) %>%\n  opt_table_lines(extent = \"none\")\ngdp %>%\n  gt() %>%\n  tab_style(\n    style = cell_borders(color = \"transparent\"),\n    locations = cells_body()\n  )"},{"path":"tables-chapter.html","id":"principle-two-differentiate-the-header-from-the-body","chapter":"5 Crafting High-Quality Tables","heading":"Principle Two: Differentiate the Header from the Body","text":"reducing clutter important goal, going far can negative consequences. table gridlines can make hard differentiate header row table body. Take Figure 5.4, example.\nFigure 5.4: table gridlines removed\n’ve already covered use appropriate gridlines. making header row bold, can make stand even :start table_no_gridlines object (saved table earlier). , apply formatting tab_style() function using two steps. First, say want alter text using cell_text() function set weight bold. Second, say want happen header row using cells_column_labels() function. Figure 5.5, can see table looks like headers bolded.\nFigure 5.5: Table header row bolded\nLet’s save table table_bold_header order add additional formatting.","code":"\ntable_no_gridlines %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  )"},{"path":"tables-chapter.html","id":"principle-three-align-appropriately","chapter":"5 Crafting High-Quality Tables","heading":"Principle Three: Align Appropriately","text":"third principle high-quality table design appropriate alignment. Specifically, numbers tables right-aligned. Tom Mock explains :Left-alignment center-alignment numbers impairs ability clearly compare numbers decimal places. Right-alignment lets align decimal places numbers easy parsing.Let’s see principle action. Figure 5.6, ’ve left-aligned 1952 column, center-aligned 1972 column, right-aligned 1992 column. can see much easier compare values 1992 column two columns. 1952 1972, much difficult compare numeric values numbers columns (tens place, example) vertical position. 1992 column, however, number tens place Afghanistan (4) aligns number tens place Albania (9) countries. vertical alignment makes easier scan table.\nFigure 5.6: Table year columns aligned left, center, right\ntables, actually override defaults get gt package misalign columns, can see following code.default, gt right-align numeric values. Don’t change anything, ’ll golden.Right alignment best practice numeric columns, text columns, use left alignment. Jon Schwabish points article “Ten Guidelines Better Tables” Journal Benefit-Cost Analysis, ’s much easier read longer text cells left aligned. illustrate benefit left-aligning text, let’s add country long name table. ’ve added Bosnia Herzegovina saved data frame called gdp_with_bosnia. ’ll see ’m using nearly code used create gdp data frame :Now take gdp_with_bosnia data frame create table country column center aligned. table Figure 5.7, ’s hard scan country names, center-aligned column just looks bit weird.\nFigure 5.7: table country column center aligned\nanother example ’ve change gt defaults mess things . addition right-aligning numeric columns default, gt left-aligns character columns. , don’t touch anything, give us alignment ’re looking (Figure 5.8).\nFigure 5.8: table country column left aligned\never want override default alignments, can use cols_align() function. example, make table country names center aligned:Within function, use columns argument tell gt columns align align argument select alignment (left, right, center).","code":"\ntable_bold_header %>%\n  cols_align(\n    align = \"left\",\n    columns = 2\n  ) %>%\n  cols_align(\n    align = \"center\",\n    columns = 3\n  ) %>%\n  cols_align(\n    align = \"right\",\n    columns = 4\n  )\ngdp_with_bosnia\n#> # A tibble: 5 × 4\n#>   Country                 `1952`  `1972`  `1992`\n#>   <chr>                    <dbl>   <dbl>   <dbl>\n#> 1 Afghanistan             779.45  739.98  649.34\n#> 2 Albania                1601.1  3313.4  2497.4 \n#> 3 Algeria                2449.0  4182.7  5023.2 \n#> 4 Angola                 3520.6  5473.3  2627.8 \n#> 5 Bosnia and Herzegovina  973.53 2860.2  2546.8\ngdp_with_bosnia %>%\n  gt() %>%\n  tab_style(\n    style = cell_borders(color = \"transparent\"),\n    locations = cells_body()\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  ) %>%\n  cols_align(\n    columns = \"Country\",\n    align = \"center\"\n  )"},{"path":"tables-chapter.html","id":"principle-four-use-the-right-level-of-precision","chapter":"5 Crafting High-Quality Tables","heading":"Principle Four: Use the Right Level of Precision","text":"tables ’ve made far, ’ve used data exactly came us. numeric columns, example, extend data four decimal places. almost certainly many. decimal places makes table harder read, always strike balance Jon Schwabish describes “necessary precision clean, spare table.”another way ’ve heard principle described: adding additional decimal places change action, keep ; otherwise, take . experience, people tend leave many decimal places , putting much importance high degree accuracy (, process, reducing legibility tables).GDP table, can use fmt_currency() function format numeric values. gt package whole series functions formatting values tables, start fmt_. following code, apply fmt_currency() 1952, 1972, 1992 columns, use decimals argument tell fmt_currency() format values zero decimal places. , difference GDP $799.4453 $779 unlikely lead different decisions, ’m comfortable sacrificing precision legibility:end values formatted dollars. fmt_currency() function automatically adds thousands-place comma make values even easier read (Figure 5.9).\nFigure 5.9: table numbers rounded whole numbers dollar sign added\nNow save table reuse table_whole_numbers.","code":"\ntable_bold_header %>%\n  fmt_currency(\n    columns = c(`1952`, `1972`, `1992`),\n    decimals = 0\n  )"},{"path":"tables-chapter.html","id":"principle-five-use-color-intentionally","chapter":"5 Crafting High-Quality Tables","heading":"Principle Five: Use Color Intentionally","text":"far, table hasn’t used color. ’ll add now highlight outlier values. Especially readers want scan table, highlighting outliers color can help significantly. Let’s make highest value year 1952 different color. , use tab_style() function:function uses cell_text() change color text orange make bold. Within cells_body() function, use locations() function specify columns rows want apply change. can see ’ve simply set columns argument year whose values ’re changing. set rows, need complicated formula. code rows =1952== max(1952) causes text transformation occur rows whose value equal maximum value year.repeat code 1972 1992 columns, generate result shown Figure 5.10.\nFigure 5.10: table color added show highest value year\ngt package makes straightforward add color highlight outlier values.","code":"\ntable_whole_numbers %>%\n  tab_style(\n    style = cell_text(\n      color = \"orange\",\n      weight = \"bold\"\n    ),\n    locations = cells_body(\n      columns = `1952`,\n      rows = `1952` == max(`1952`)\n    )\n  )"},{"path":"tables-chapter.html","id":"principle-six-add-data-visualization-where-appropriate","chapter":"5 Crafting High-Quality Tables","heading":"Principle Six: Add Data Visualization Where Appropriate","text":"Adding color highlight outliers one way help guide reader’s attention. Another way incorporate graphs tables. Tom Mock developed add-package gt called gtExtras makes possible just . example, table, might want show GDP country changes time. , ’ll add new column visualizes trend using sparkline (essentially, simple line chart):gt_plt_sparkline() function requires us provide values needed make sparkline single column. accomplish , create variable called Trend, using group_by() mutate(), hold list values country. Afghanistan, example, Trend contain 779.4453145, 739.9811058, 649.3413952. save data object called gdp_with_trend.Now create table , add gt_plt_sparkline() function end code. Within function, specify column use create sparkline (Trend):set label = FALSE remove text labels gt_plt_sparkline() adds default, add palette argument make sparkline black elements transparent. (default, function make different parts sparkline different colors.) stripped-sparkline Figure 5.11 allows reader see trend country glance.\nFigure 5.11: table sparkline added show trend time\ngtExtras package can way merely create sparklines. set theme functions allow make tables look like published FiveThirtyEight, New York Times, Guardian, news outlets. example, try removing formatting ’ve applied far instead use gt_theme_538() function style table:Take look tables FiveThirtyEight website, ’ll see similarities one Figure 5.12.\nFigure 5.12: table redone FiveThirtyEight style\nAdd-packages like gtExtras common table-making landscape. ’re working reactable package make interactive tables, example, can also use reactablefmtr add interactive sparklines, themes, . ’ll learn making interactive tables Chapter 9.","code":"\ngdp_with_trend <- gdp %>%\n  group_by(Country) %>%\n  mutate(Trend = list(c(`1952`, `1972`, `1992`))) %>%\n  ungroup()\ngdp_with_trend %>%\n  gt() %>%\n  tab_style(\n    style = cell_borders(color = \"transparent\"),\n    locations = cells_body()\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  ) %>%\n  fmt_currency(\n    columns = c(`1952`, `1972`, `1992`),\n    decimals = 0\n  ) %>%\n  tab_style(\n    style = cell_text(\n      color = \"orange\",\n      weight = \"bold\"\n    ),\n    locations = cells_body(\n      columns = `1952`,\n      rows = `1952` == max(`1952`)\n    )\n  ) %>%\n  tab_style(\n    style = cell_text(\n      color = \"orange\",\n      weight = \"bold\"\n    ),\n    locations = cells_body(\n      columns = `1972`,\n      rows = `1972` == max(`1972`)\n    )\n  ) %>%\n  tab_style(\n    style = cell_text(\n      color = \"orange\",\n      weight = \"bold\"\n    ),\n    locations = cells_body(\n      columns = `1992`,\n      rows = `1992` == max(`1992`)\n    )\n  ) %>%\n  gt_plt_sparkline(\n    column = Trend,\n    label = FALSE,\n    palette = c(\"black\", \"transparent\", \"transparent\", \"transparent\", \"transparent\")\n  )\ngdp %>%\n  group_by(Country) %>%\n  mutate(Trend = list(c(`1952`, `1972`, `1992`))) %>%\n  ungroup() %>%\n  gt() %>%\n  tab_style(\n    style = cell_text(\n      color = \"orange\",\n      weight = \"bold\"\n    ),\n    locations = cells_body(\n      columns = `1952`,\n      rows = `1952` == max(`1952`)\n    )\n  ) %>%\n  tab_style(\n    style = cell_text(\n      color = \"orange\",\n      weight = \"bold\"\n    ),\n    locations = cells_body(\n      columns = `1972`,\n      rows = `1972` == max(`1972`)\n    )\n  ) %>%\n  tab_style(\n    style = cell_text(\n      color = \"orange\",\n      weight = \"bold\"\n    ),\n    locations = cells_body(\n      columns = `1992`,\n      rows = `1992` == max(`1992`)\n    )\n  ) %>%\n  fmt_currency(\n    columns = c(`1952`, `1972`, `1992`),\n    decimals = 0\n  ) %>%\n  gt_plt_sparkline(\n    column = Trend,\n    label = FALSE,\n    palette = c(\"black\", \"transparent\", \"transparent\", \"transparent\", \"transparent\")\n  ) %>%\n  gt_theme_538()"},{"path":"tables-chapter.html","id":"conclusion-2","chapter":"5 Crafting High-Quality Tables","heading":"Conclusion","text":"Many tweaks made table quite subtle. Changes like removing excess gridlines, bolding header text, right-aligning numeric values, adjusting level precision can often go unnoticed, skip , table far less effective. final product isn’t flashy, communicate clearly.used gt package make high-quality table, ’ve repeatedly seen, package good defaults built . Often, don’t need change much code make effective tables. matter package use, ’s essential treat tables worthy just much thought kinds data visualization.Chapter 6, ’ll learn create reports using R Markdown, can integrate tables directly final document. ’s better using just lines code make publication-ready tables?","code":""},{"path":"tables-chapter.html","id":"learn-more-4","chapter":"5 Crafting High-Quality Tables","heading":"Learn More","text":"Consult following resources learn table design principles make high-quality tables gt package:“Ten Guidelines Better Tables” Jon Schwabish (Journal Benefit-Cost Analysis, 2020), https://doi.org/10.1017/bca.2020.11“10+ Guidelines Better Tables R” Tom Mock (2020), https://themockup.blog/posts/2020-09-04-10-table-rules--r/“Creating beautiful tables R {gt}” Albert Rapp (2022), https://gt.albert-rapp.de/","code":""},{"path":"rmarkdown-chapter.html","id":"rmarkdown-chapter","chapter":"6 Writing Reports in R Markdown","heading":"6 Writing Reports in R Markdown","text":"Imagine : ’ve collected surveys customer satisfaction new product. Now ’re ready analyze data write results. workflow looks something like :Download data Google Sheets import statistical analysis tool like SPSS.Use SPSS clean analyze data.Export summaries data Excel spreadsheets.Use Excel make charts.Write report Word, pasting charts Excel along way.Sound familiar? , ’re alone. Many people use workflow data analysis. happens , next month, new surveys roll , redo report? Yup, back steps one five. multi-tool process might work one-time project, let’s honest: projects really one-time. example, might realize forgot include couple surveys original analysis catch mistake.R Markdown combines data analysis, data visualization, R code narrative text create document can exported many formats, including Word, PDF, HTML, share non-R users. use single tool, workflow becomes way efficient. need recreate January customer satisfaction report February, can rerun code produce new document newest data, fix error analysis, can simply adjust code.chapter, ’ll break pieces R Markdown document, talk potential pitfalls best practices. ’ll learn work YAML metadata, R code chunks, Markdown-formatted text, create -line R code can change report’s text dynamically, run document’s code various ways.","code":""},{"path":"rmarkdown-chapter.html","id":"how-r-markdown-works","chapter":"6 Writing Reports in R Markdown","heading":"How R Markdown Works","text":"create R Markdown document RStudio, go File > New File > R Markdown. Choose title, author, date, well default output format (HTML, PDF, Word). values can changed later. Click OK, RStudio create R Markdown document placeholder content, shown Figure 6.1.\nFigure 6.1: placeholder content new R Markdown document\nDelete content replace . example, let’s create report penguins using data palmerpenguins package. ’ve separated data year, ’ll use just 2007 data. Add following content add R Markdown document:document contains several sections, discuss . First, though, let’s skip finish line ’s called knitting document (also known rendering, plain English, exporting). Knit button top RStudio converts R Markdown document whatever format selected upon creating (Figure 6.2).\nFigure 6.2: knit button RStudio\n’ve set output format Word (see output_format: word_document line), now Word document. features visible R Markdown appear Word, including histogram. R Markdown document doesn’t directly include plot. Rather, includes code needed produce plot knitted.may seem convoluted constantly knit R Markdown documents Word, workflow allows us update reports point new code data. ability known reproducibility, central value R Markdown.","code":"---\ntitle: \"Penguins Report\"\nauthor: \"David\"\ndate: \"2024-01-12\"\noutput: word_document\n---\n  \n```{r setup, include = FALSE}\nknitr::opts_chunk$set(\n  include = TRUE,\n  echo = FALSE,\n  message = FALSE,\n  warning = FALSE\n)\n```\n\n```{r}\nlibrary(tidyverse)\n```\n\n```{r}\npenguins <- read_csv(\"https://raw.githubusercontent.com/rfortherestofus/r-without-statistics/main/data/penguins-2007.csv\")\n```\n\n# Introduction\n\nWe are writing a report about the **Palmer Penguins**. These penguins are *really* amazing. There are three species:\n\n- Adelie\n- Gentoo\n- Chinstrap\n\n## Bill Length\n\nWe can make a histogram to see the distribution of bill lengths.\n\n```{r}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n\n```{r}\naverage_bill_length <- penguins %>%\n  summarize(avg_bill_length = mean(\n    bill_length_mm,\n    na.rm = TRUE\n  )) %>%\n  pull(avg_bill_length)\n```\n\nThe chart shows the distribution of bill lengths. The average bill length is `r average_bill_length` millimeters."},{"path":"rmarkdown-chapter.html","id":"document-structure","chapter":"6 Writing Reports in R Markdown","heading":"Document Structure","text":"R Markdown documents three main pieces: one YAML section, multiple R code chunks, sections Markdown text. Figure 6.3 shows parts R Markdown document.\nFigure 6.3: pieces R Markdown document\nLet’s discuss pieces one time.","code":""},{"path":"rmarkdown-chapter.html","id":"the-yaml-metadata","chapter":"6 Writing Reports in R Markdown","heading":"The YAML Metadata","text":"YAML section beginning R Markdown document. name YAML comes recursive acronym YAML ain’t markup language, whose meaning isn’t important purposes. Three dashes indicate beginning end, text inside contains metadata R Markdown document. YAML:can see, provides title, author, date, output format. elements YAML given key: value syntax, key label piece metadata (example, title) followed value quotes.","code":"---\ntitle: \"Penguins Report\"\nauthor: \"David Keyes\"\ndate: \"2024-01-12\"\noutput: word_document\n---"},{"path":"rmarkdown-chapter.html","id":"the-code-chunks","chapter":"6 Writing Reports in R Markdown","heading":"The Code Chunks","text":"R Markdown documents different structure R script files might familiar (.R extension). R script files treat content code unless comment line putting pound sign (#) front . following code, first line comment second line code.R Markdown, situation reversed. Everything YAML treated text unless specify otherwise creating known code chunks. start three back ticks (```), followed lowercase letter r surrounded curly brackets ( {} ). Another three back ticks indicate end code chunk:’re working RStudio, code chunks light gray background.R Markdown treats anything code chunk R code knit. example, code chunk produce histogram final Word document.histogram can seen Figure 6.4.\nFigure 6.4: simple histogram\nspecial code chunk top R Markdown document, known setup code chunk, gives instructions happen knitting document. contains following code chunk options:echo\nwant show code knitted document?include\nwant show output code chunk?message\nwant include messages code might generate? example, message shows run library(tidyverse):warning\nwant include messages code might generate? example, message get creating histogram using geom_histogram():cases ’re using R Markdown generate report non-R user, likely want hide code, messages, warnings show output (include visualizations generate). , create setup code chunk looks like :include = FALSE option first line applies setup code chunk . tells R Markdown include output setup code chunk knitting. options within knitr::opts_chunk$set() apply future code chunks. However, can also override global code chunk options individual chunks. wanted Word document show plot code used make , set echo = TRUE code chunk :include already set TRUE within knitr::opts_chunk$set() setup code chunk, don’t need specify .","code":"```{r}\n# Import our data\ndata <- read_csv(\"data.csv\")\n``````{r}\nlibrary(tidyverse)\n``````{r}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```── Attaching core tidyverse packages ───── tidyverse 1.3.2.9000 ──\n✔ dplyr     1.0.10     ✔ readr     2.1.3 \n✔ forcats   0.5.2      ✔ stringr   1.5.0 \n✔ ggplot2   3.4.0      ✔ tibble    3.1.8 \n✔ lubridate 1.9.0      ✔ tidyr     1.2.1 \n✔ purrr     1.0.1      \n── Conflicts───── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.```{r setup, include = FALSE}\nknitr::opts_chunk$set(\n  include = TRUE,\n  echo = FALSE,\n  message = FALSE,\n  warning = FALSE\n)\n``````{r echo = TRUE}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```"},{"path":"rmarkdown-chapter.html","id":"markdown-text","chapter":"6 Writing Reports in R Markdown","heading":"Markdown Text","text":"Markdown way style plain text. writing directly Word, just press B button make text bold, example, R doesn’t button. want knitted Word document include bold text, need use Markdown indicate style document.Markdown text sections (white background R Studio) converted formatted text Word document knitting. Figure 6.5 highlights equivalent sections R Markdown Word documents.\nFigure 6.5: Markdown text R Markdown equivalent knitted Word document\ncan see, text # Introduction R Markdown gets converted first-level heading, ## Bill Length becomes second-level heading. adding hashes, can create six levels headings. RStudio, headings easy find show blue.Text without anything becomes body text Word. create italic text, add single asterisks around (*like *). make text bold, use double asterisks (**shown **).can make bulleted lists placing dash beginning line adding text :make ordered lists, replace dashes numbers. can either number line consecutively, ’ve done , repeat 1. knitted document, proper numbers automatically generate.Formatting text Markdown might seem complicated Word. want switch multi-tool workflow reproducible R Markdown-based workflow, need remove manual actions process can easily repeat future.","code":"- Adelie\n- Gentoo\n- Chinstrap1. Adelie\n1. Gentoo\n1. Chinstrap"},{"path":"rmarkdown-chapter.html","id":"inline-r-code","chapter":"6 Writing Reports in R Markdown","heading":"Inline R Code","text":"R Markdown documents can also include little bits code within Markdown text. see inline code works, take look following sentence R Markdown document:Inline R code begins backtick lowercase letter r ends another backtick. example, code tells R print value variable average_bill_length, ’ve defined follows code chunk inline code:code calculates average bill length saves average_bill_length. created variable, can use inline code. result, Word document includes sentence “average bill length 43.9219298.”One benefit using inline R code avoid copy paste values, error-prone. Inline R code also makes possible automatically calculate values fly whenever re-knit R Markdown document new data. show works, let’s make new report using data 2008. , need change one line, one reads data:Now ’ve switched penguins-2007.csv penguins-2008.csv, can re-knit report produce new Word document, complete updated results. Figure 6.6 shows new document.\nFigure 6.6: knitted Word document 2008 data\nnew histogram based 2008 data, average bill length 43.5412281. values update automatically, every time hit knit, code rerun, regenerating plots recalculating values. long data use consistent structure, updating report requires just click knit button.","code":"The average bill length is `r average_bill_length` millimeters.```{r}\naverage_bill_length <- penguins %>%\n  summarize(avg_bill_length = mean(\n    bill_length_mm,\n    na.rm = TRUE\n  )) %>%\n  pull(avg_bill_length)\n```\npenguins <- read_csv(\"https://raw.githubusercontent.com/rfortherestofus/r-without-statistics/main/data/penguins-2008.csv\")"},{"path":"rmarkdown-chapter.html","id":"running-code-chunks-interactively","chapter":"6 Writing Reports in R Markdown","heading":"Running Code Chunks Interactively","text":"can run code R Markdown document two ways. first way knitting entire document. second way run code chunks manually (also known interactively) hitting little green play button top-right code chunk. arrow next green play button run code point. can see buttons Figure 6.7.\nFigure 6.7: buttons code chunks RStudio\ncan also use CMD-ENTER Mac CTRL-ENTER Windows run sections code, R script file. Running code interactively good way test portions code work knit entire document.one downside running code interactively can sometimes make mistakes cause R Markdown document fail knit. , order knit, R Markdown document must contain code uses. working interactively , say, load data separate file, unable knit document. working R Markdown, always keep code within single document.code must also appear right order. R Markdown document looks like , example, give error try knit :error happens attempting use tidyverse functions like read_csv(), well various ggplot functions, load tidyverse package.Alison Hill, one prolific R Markdown educators, tells students knit early often. practice makes easier isolate issues make knitting fail. Hill describes typical R Markdown workflow spending 75 percent time working new document 25 percent time knitting check R Markdown document works","code":"---\ntitle: \"Penguins Report\"\nauthor: \"David Keyes\"\ndate: \"2024-01-12\"\noutput: word_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  include = TRUE,\n  echo = FALSE,\n  message = FALSE,\n  warning = FALSE\n)\n```\n\n```{r}\npenguins <- read_csv(\"https://raw.githubusercontent.com/rfortherestofus/r-without-statistics/main/data/penguins-2008.csv\")\n```\n\n```{r}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n\n```{r}\nlibrary(tidyverse)\n```"},{"path":"rmarkdown-chapter.html","id":"quarto","chapter":"6 Writing Reports in R Markdown","heading":"Quarto","text":"2022, Posit released publishing tool similar R Markdown. Known Quarto, tool takes R Markdown done R extends languages, including Python, Julia, Observable JS. write book, Quarto gaining traction. Luckily, concepts ’ve learned chapter apply Quarto well. Quarto documents YAML section, code chunks, Markdown text. can export Quarto documents HTML, PDF, Word. However, R Markdown Quarto documents syntactic differences. ’ll explore differences Chapter 10.","code":""},{"path":"rmarkdown-chapter.html","id":"conclusion-3","chapter":"6 Writing Reports in R Markdown","heading":"Conclusion","text":"started chapter considering report needs regenerated monthly. Using R Markdown, can reproduce report every month without changing code. Even lost final Word document, quickly recreate .Best , working R Markdown makes possible seconds tasks previously taken hours. world making single report requires three tools five steps, may want work . research scientist used R Markdown regularly, Alison Hill says enabled work reports received data. write code worked partial data rerun final data time.chapter, ’ve just scratched surface R Markdown can . next chapter show use instantly generate hundreds reports. Magic indeed!","code":""},{"path":"rmarkdown-chapter.html","id":"learn-more-5","chapter":"6 Writing Reports in R Markdown","heading":"Learn More","text":"following resources great general guides using R Markdown:R Markdown: Definitive Guide Yihui Xie, J. J. Allaire, Garrett Grolemund (CRC Press, 2019), https://bookdown.org/yihui/rmarkdown/R Markdown Cookbook Yihui Xie, Christophe Dervieux, Emily Riederer (CRC Press, 2021), https://bookdown.org/yihui/rmarkdown-cookbook/","code":""},{"path":"parameterized-reports-chapter.html","id":"parameterized-reports-chapter","chapter":"7 Using Parameters to Automate Reports","heading":"7 Using Parameters to Automate Reports","text":"Parameterized reporting technique uses R Markdown make multiple reports simultaneously. Using parameterized reporting, can follow process make 3,000 reports make one report. technique also makes work accurate, avoids copy--paste errors.example, staff Urban Institute, think tank based Washington, DC, used parameterized reporting develop fiscal briefs US states, well District Columbia. report required extensive text multiple charts, creating hand wasn’t feasible. Instead, employees Safia Sayed, Livia Mucciolo, Aaron Williams automated process. 51 beautiful reports appeared Urban Institute website. snippet shown Figure 7.1.\nFigure 7.1: Figure 1-1 excerpt state fiscal briefs\nchapter explains parameterized reporting , works simplified version code Urban Institute used.","code":""},{"path":"parameterized-reports-chapter.html","id":"how-parameterized-reporting-works","chapter":"7 Using Parameters to Automate Reports","heading":"How Parameterized Reporting Works","text":"’ve ever make multiple reports time, know drag can , especially ’re using multi-tool workflow described Chapter 6. Making just one report can take long time. Take work multiply 10, 20, , case team Urban Institute, 51, can start feel overwhelming. Parameterized reporting can generate thousands reports using following workflow:Make report template R MarkdownMake report template R MarkdownAdd parameter (example, one representing US states) YAML R Markdown document represent values change reportsAdd parameter (example, one representing US states) YAML R Markdown document represent values change reportsUse parameter generate report one state, make sure can knit documentUse parameter generate report one state, make sure can knit documentCreate separate R script file sets value parameter knits reportCreate separate R script file sets value parameter knits reportRun script statesRun script statesLet’s begin creating report template one state. , ’ve taken code Urban Institute staff used make state fiscal briefs simplified significantly. Instead focusing fiscal data, ’ve used data may familiar : COVID-19 rates mid-2022. R Markdown document:text charts report come cases data frame, shown :knit document, end simple HTML document, seen Figure 7.2.\nFigure 7.2: screenshot Alabama COVID report\nR Markdown document’s YAML, R code chunks, inline code, Markdown text look familiar ’ve read Chapter 6.","code":"---\ntitle: \"Urban Institute COVID Report\"\noutput: html_document\nparams:\nstate: \"Alabama\"\n---\n  \n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  echo = FALSE,\n  warning = FALSE,\n  message = FALSE\n)\n```\n\n```{r}\nlibrary(tidyverse)\nlibrary(urbnthemes)\nlibrary(scales)\n```\n\n# `r params$state`\n\n```{r}\ncases <- tibble(state.name) %>%\n  rbind(state.name = \"District of Columbia\") %>%\n  left_join(\n    read_csv(\n      \"united_states_covid19_cases_deaths_and_testing_by_state.csv\",\n      skip = 2\n    ),\n    by = c(\"state.name\" = \"State/Territory\")\n  ) %>%\n  select(\n    total_cases = `Total Cases`,\n    state.name,\n    cases_per_100000 = `Case Rate per 100000`\n  ) %>%\n  mutate(cases_per_100000 = parse_number(cases_per_100000)) %>%\n  mutate(case_rank = rank(-cases_per_100000, ties.method = \"min\"))\n```\n\n```{r}\nstate_text <- if_else(params$state == \"District of Columbia\", str_glue(\"the District of Columbia\"), str_glue(\"state of {params$state}\"))\n\nstate_cases_per_100000 <- cases %>%\n  filter(state.name == params$state) %>%\n  pull(cases_per_100000) %>%\n  comma()\n\nstate_cases_rank <- cases %>%\n  filter(state.name == params$state) %>%\n  pull(case_rank)\n```\n\nIn `r state_text`, there were `r state_cases_per_100000` cases per 100,000 people in the last seven days. This puts `r params$state` at number `r state_cases_rank` of 50 states and the District of Columbia. \n\n```{r fig.height = 8}\nset_urbn_defaults(style = \"print\")\n\ncases %>%\n  mutate(highlight_state = if_else(state.name == params$state, \"Y\", \"N\")) %>%\n  mutate(state.name = fct_reorder(state.name, cases_per_100000)) %>%\n  ggplot(aes(\n    x = cases_per_100000,\n    y = state.name,\n    fill = highlight_state\n  )) +\n  geom_col() +\n  scale_x_continuous(labels = comma_format()) +\n  theme(legend.position = \"none\") +\n  labs(\n    y = NULL,\n    x = \"Cases per 100,000\"\n  )\n```#> # A tibble: 51 × 4\n#>    total_cases state.name  cases_per_100000 case_rank\n#>    <chr>       <chr>                  <dbl>     <int>\n#>  1 1302945     Alabama                26573        18\n#>  2 246345      Alaska                 33675         2\n#>  3 2025435     Arizona                27827        10\n#>  4 837154      Arkansas               27740        12\n#>  5 9274208     California             23472        36\n#>  6 1388702     Colorado               24115        34\n#>  7 766172      Connecticut            21490        43\n#>  8 264376      Delaware               27150        13\n#>  9 5965411     Florida                27775        11\n#> 10 2521664     Georgia                23750        35\n#> # ℹ 41 more rows"},{"path":"parameterized-reports-chapter.html","id":"using-parameters","chapter":"7 Using Parameters to Automate Reports","heading":"Using Parameters","text":"R Markdown, parameters variables set YAML allow us create multiple reports. Take look two lines YAML:code defines variable, case state. can use variable throughout rest R Markdown document using syntax: params$variable_name, replacing variable_name state name set YAML. example, take look inline R code:instance params$state converted “Alabama” knit . line shown becomes first-level heading visible Figure 7.2. parameter shows following code:knit document, see following text:state Alabama, 26,573 cases per 100,000 people last seven days. puts Alabama number 18 50 states District Columbia.text automatically generated. inline R code `r state_text` prints value variable state_text. state_text determined if_else() statement:value params$states District Columbia, code makes state_text equal “District Columbia”. params$state equal District Columbia, state_text gets value “state ”, followed state name. allows us put state_text sentence work matter whether state parameter state District Columbia.","code":"params:\n  state: \"Alabama\"# `r params$state`In `r state_text`, there were `r state_cases_per_100000` cases per 100,000 people in the last seven days. This puts `r params$state` at number `r state_cases_rank` of 50 states and the District of Columbia. \nstate_text <- if_else(params$state == \"District of Columbia\", str_glue(\"the District of Columbia\"), str_glue(\"state of {params$state}\"))"},{"path":"parameterized-reports-chapter.html","id":"generating-numbers-with-parameters","chapter":"7 Using Parameters to Automate Reports","heading":"Generating Numbers with Parameters","text":"can also use parameters generate numeric values include text. example, calculate values state_cases_per_100000 state_cases_rank variables dynamically using state parameter, shown :filter cases data frame (contains data states) keep just data state params$state. use pull() function get single value data, format comma() function scales package make state_cases_per_100000 show 26,573 (rather 26573) putting variables inline R code.","code":"\nstate_cases_per_100000 <- cases %>%\n  filter(state.name == params$state) %>%\n  pull(cases_per_100000) %>%\n  comma()\n\nstate_cases_rank <- cases %>%\n  filter(state.name == params$state) %>%\n  pull(case_rank)"},{"path":"parameterized-reports-chapter.html","id":"creating-visualizations-based-on-parameters","chapter":"7 Using Parameters to Automate Reports","heading":"Creating Visualizations Based on Parameters","text":"can see parameter used places well, highlight state report’s bar chart. see accomplish , take look following section last code chunk:code creates variable called highlight_state. Within cases data frame, check whether state.name equal params$state. , highlight_state gets value Y. , gets N. relevant columns data look like run two lines:Later, ggplot code uses highlight_state variable bar chart’s fill aesthetic, highlighting state params$state yellow coloring states blue. Figure 7.3 shows chart Alabama highlighted.\nFigure 7.3: bar chart showing Alabama highlighted\n’ve seen setting parameter YAML gives us ability dynamically generate text charts knitted report. ’ve generated one report far. can create 51 reports? first thought might manually update YAML changing parameter’s value Alabama , say, Alaska, knitting document . follow process states, tedious, ’re trying avoid tedium. Let’s automate report generation instead.","code":"\ncases %>%\n  mutate(highlight_state = if_else(state.name == params$state, \"Y\", \"N\"))#> # A tibble: 51 × 2\n#>    state.name  highlight_state\n#>    <chr>       <chr>          \n#>  1 Alabama     Y              \n#>  2 Alaska      N              \n#>  3 Arizona     N              \n#>  4 Arkansas    N              \n#>  5 California  N              \n#>  6 Colorado    N              \n#>  7 Connecticut N              \n#>  8 Delaware    N              \n#>  9 Florida     N              \n#> 10 Georgia     N              \n#> # ℹ 41 more rows"},{"path":"parameterized-reports-chapter.html","id":"creating-an-r-script","chapter":"7 Using Parameters to Automate Reports","heading":"Creating an R Script","text":"automatically generate multiple reports based template created, ’ll use R script changes value parameters R Markdown document knits . Begin creating R script file named render.R.","code":""},{"path":"parameterized-reports-chapter.html","id":"knitting-the-document-using-code","chapter":"7 Using Parameters to Automate Reports","heading":"Knitting the Document Using Code","text":"script needs ability knit R Markdown document. ’ve seen using Knit button, can thing code. Load rmarkdown package use render() function, shown :function generates HTML document called urban-covid-budget-report.html. default, generated file name R Markdown document, different extension. change name using output_file argument. also tell render() use parameters give . parameters override R Markdown document . example, code ’ve written tell R use Alaska state parameter save resulting HTML file Alaska.html.approach generating reports works, get 51 reports, ’d manually change state name YAML update render() function run report. next section, ’ll update code efficiently.","code":"\nlibrary(rmarkdown)\n\nrender(\n  input = \"urban-covid-budget-report.Rmd\",\n  output_file = \"Alaska.html\",\n  params = list(state = \"Alaska\")\n)"},{"path":"parameterized-reports-chapter.html","id":"creating-a-tibble-with-parameter-data","chapter":"7 Using Parameters to Automate Reports","heading":"Creating a Tibble with Parameter Data","text":"Let’s write code generates reports us automatically. First, must create vector (colloquial terms, list items) state names District Columbia. , ’ll use built-dataset state.name, 50 state names vector:turn tibble use rbind() function add District Columbia list. Finally, use pull() function get one single column save state. state vector looks like:Rather use render() input output_file arguments, earlier, can pass params argument give parameters use knitting. Let’s create tibble information needed render 51 reports save object called reports, ’ll pass render() function:code generates tibble 51 rows three variables. rows, set input variable name R Markdown document. set value output_file str_glue() equal name state, followed .html (example, Alabama.html).params variable complicated three. ’s known named list. data structure puts data state: state_name format needed R Markdown document’s YAML. use map() function purrr package create named list, telling R set value row state = \"Alabama\", state =  \"Alaska\", , states. look reports tibble, can see variables:params variable shows , open tibble RStudio viewer clicking reports Environment tab, can see output clearly (Figure 7.4).\nFigure 7.4: named list column shown RStudio viewer\nview allows us see named list params variable, state variable equal name state.’ve created reports tibble, ’re ready render reports. code one line long:use pwalk() function purrr package. function two arguments: data frame tibble (reports, case), function runs row tibble, (render()). Note include open closing parentheses passing function name pwalk().Running code runs render() function row reports, passing values input, output_file, params. equivalent entering code like following run render() function 51 states:full R script file looks like:run pwalk(reports, render) code, see 51 HTML documents appear files panel RStudio. one consist report state, complete customized graph accompanying text.","code":"\nstate <- tibble(state.name) %>%\n  rbind(\"District of Columbia\") %>%\n  pull(state.name)#>  [1] \"Alabama\"              \"Alaska\"              \n#>  [3] \"Arizona\"              \"Arkansas\"            \n#>  [5] \"California\"           \"Colorado\"            \n#>  [7] \"Connecticut\"          \"Delaware\"            \n#>  [9] \"Florida\"              \"Georgia\"             \n#> [11] \"Hawaii\"               \"Idaho\"               \n#> [13] \"Illinois\"             \"Indiana\"             \n#> [15] \"Iowa\"                 \"Kansas\"              \n#> [17] \"Kentucky\"             \"Louisiana\"           \n#> [19] \"Maine\"                \"Maryland\"            \n#> [21] \"Massachusetts\"        \"Michigan\"            \n#> [23] \"Minnesota\"            \"Mississippi\"         \n#> [25] \"Missouri\"             \"Montana\"             \n#> [27] \"Nebraska\"             \"Nevada\"              \n#> [29] \"New Hampshire\"        \"New Jersey\"          \n#> [31] \"New Mexico\"           \"New York\"            \n#> [33] \"North Carolina\"       \"North Dakota\"        \n#> [35] \"Ohio\"                 \"Oklahoma\"            \n#> [37] \"Oregon\"               \"Pennsylvania\"        \n#> [39] \"Rhode Island\"         \"South Carolina\"      \n#> [41] \"South Dakota\"         \"Tennessee\"           \n#> [43] \"Texas\"                \"Utah\"                \n#> [45] \"Vermont\"              \"Virginia\"            \n#> [47] \"Washington\"           \"West Virginia\"       \n#> [49] \"Wisconsin\"            \"Wyoming\"             \n#> [51] \"District of Columbia\"\nreports <- tibble(\n  input = \"urban-covid-budget-report.Rmd\",\n  output_file = str_glue(\"{state}.html\"),\n  params = map(state, ~ list(state = .))\n)#> # A tibble: 51 × 3\n#>    input                         output_file    params      \n#>    <chr>                         <glue>         <list>      \n#>  1 urban-covid-budget-report.Rmd Alabama.html   <named list>\n#>  2 urban-covid-budget-report.Rmd Alaska.html    <named list>\n#>  3 urban-covid-budget-report.Rmd Arizona.html   <named list>\n#>  4 urban-covid-budget-report.Rmd Arkansas.html  <named list>\n#>  5 urban-covid-budget-report.Rmd California.ht… <named list>\n#>  6 urban-covid-budget-report.Rmd Colorado.html  <named list>\n#>  7 urban-covid-budget-report.Rmd Connecticut.h… <named list>\n#>  8 urban-covid-budget-report.Rmd Delaware.html  <named list>\n#>  9 urban-covid-budget-report.Rmd Florida.html   <named list>\n#> 10 urban-covid-budget-report.Rmd Georgia.html   <named list>\n#> # ℹ 41 more rows\npwalk(reports, render)\nrender(\n  input = \"urban-covid-budget-report.Rmd\",\n  output_file = \"Alabama.html\",\n  params = list(state = \"Alabama\")\n)\n\nrender(\n  input = \"urban-covid-budget-report.Rmd\",\n  output_file = \"Alaska.html\",\n  params = list(state = \"Alaska\")\n)\n\nrender(\n  input = \"urban-covid-budget-report.Rmd\",\n  output_file = \"Arizona.html\",\n  params = list(state = \"Arizona\")\n)\n# Load packages\nlibrary(tidyverse)\nlibrary(rmarkdown)\n\n# Create a vector of all states and the District of Columbia\nstate <- tibble(state.name) %>%\n  rbind(\"District of Columbia\") %>%\n  pull(state.name)\n\n# Create a tibble with information on the:\n# input R Markdown document\n# output HTML file\n# parameters needed to knit the document\nreports <- tibble(\n  input = \"urban-covid-budget-report.Rmd\",\n  output_file = str_glue(\"{state}.html\"),\n  params = map(state, ~ list(state = .))\n)\n\n# Generate all of our reports\npwalk(reports, render)"},{"path":"parameterized-reports-chapter.html","id":"best-practices","chapter":"7 Using Parameters to Automate Reports","heading":"Best Practices","text":"powerful, parameterized reporting can also present challenges. example, make sure consider outliers data. case state reports, Washington DC outlier technically state. Urban Institute team altered language report text didn’t refer Washington DC state using if_else() statement, saw chapter.Another best practice manually generate review reports whose parameter values shortest longest text lengths. state fiscal briefs, include Iowa, Ohio, Utah District Columbia. Reviewing reports manually allows identify places length text may cause unexpected results, titles charts cut , page breaks disrupted text runs onto multiple lines, . minutes manual review can make automated process generating multiple reports much smoother.","code":""},{"path":"parameterized-reports-chapter.html","id":"conclusion-4","chapter":"7 Using Parameters to Automate Reports","heading":"Conclusion","text":"chapter, recreated Urban Institute’s state fiscal briefs using parameterized reporting. learned add parameter R Markdown document, use R script set value parameter knit report.Automating production reports can huge time-saver, especially number reports generate grows. Consider another project Urban Institute: making county-level reports. 3,000 counties United States, making reports hand realistic. Additionally, Urban Institute make reports using SPSS, Excel, Word, copy paste values programs. Humans fallible, mistakes occur, matter hard try avoid . Computers, hand, make copy--paste errors. Letting computers handle tedious work making multiple reports significantly reduces chance error.’re starting , parameterized reporting might feel like heavy lift, make sure code works versions report. R Markdown document accompanying R script file, ’ll find easy produce multiple reports , saving work end.","code":""},{"path":"parameterized-reports-chapter.html","id":"learn-more-6","chapter":"7 Using Parameters to Automate Reports","heading":"Learn More","text":"Consult following resources learn Urban Institute created parameterized reports can make :“Using R Markdown Track Publish State Data” Data@Urban team (2021), https://urban-institute.medium.com/using-r-markdown--track--publish-state-data-d1291bfa1ec0“Iterated fact sheets R Markdown” Data@Urban team (2018), https://urban-institute.medium.com/iterated-fact-sheets--r-markdown-d685eb4eafce","code":""},{"path":"presentations-chapter.html","id":"presentations-chapter","chapter":"8 Making Slides Presentations with xaringan","heading":"8 Making Slides Presentations with xaringan","text":"’re now able generate reports using single tool, R Markdown. need make slideshow presentation, like might create PowerPoint? Luckily, R robust presentation-making capabilities. chapter, ’ll learn produce presentations using xaringan. package, uses R Markdown, widely used tool creating slideshows R.’ll use xaringan turn penguin report Chapter 6 slideshow. ’ll learn create new slides, selectively reveal content, adjust alignment text images, style presentation CSS.","code":""},{"path":"presentations-chapter.html","id":"why-use-xaringan","chapter":"8 Making Slides Presentations with xaringan","heading":"Why Use xaringan?","text":"R Studio, might noticed Presentation option see creating new R Markdown document provides several options making slides, knitting R Markdown document PowerPoint. However, using xaringan package provides advantages options.Silvia Canelón, data analyst Urban Health Lab University Pennsylvania, taught xaringan package extensively. argues package’s benefits go well beyond making good-looking slides. instance, xaringan creates slides HTML documents, can post online without needing email print viewers. Instead, can send someone presentation just sharing link. ’ll discuss ways publish presentations online Chapter 9.second benefit using xaringan accessibility. HTML documents easy manipulate, giving viewers control appearance. example, people limited vision can access HTML documents ways allow view content, increasing text size using screen readers. Making presentations xaringan lets people engage slides.","code":""},{"path":"presentations-chapter.html","id":"how-xaringan-works","chapter":"8 Making Slides Presentations with xaringan","heading":"How xaringan Works","text":"get started xaringan, install package running install.packages(\"xaringan\") R Studio. Next, navigate File > New File > R Markdown create new project. Choose Template tab select template called Ninja Presentation, click OK.get R Markdown document containing default content. Delete add . following document uses penguin R report created Chapter 6 changes output format YAML xaringan::moon_reader:moon_reader output format takes R Markdown documents knits slides. Try clicking Knit button see looks like. receive HTML file name R Markdown document (xaringan-example.html), shown Figure 8.1.\nFigure 8.1: first slide presentation\nscroll next slide right arrow key, see familiar content. Figure 8.2 shows second slide, text report Chapter 6 cut-version histogram.\nFigure 8.2: second slide presentation\nAlthough syntax making slides xaringan nearly identical used make reports R Markdown, need make tweaks content can fit slides. ’re working document knitted Word, length doesn’t matter, reports can one page 100 pages. Working xaringan, however, requires considering much content can fit single slide. cut-histogram shows us happens don’t . Let’s fix .","code":"---\ntitle: \"Penguins Report\"\nauthor: \"David Keyes\"\ndate: \"2024-01-12\"\noutput: xaringan::moon_reader\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(include = TRUE, \n                      echo = FALSE,\n                      message = FALSE,\n                      warning = FALSE)\n```\n\n```{r}\nlibrary(tidyverse)\n```\n\n```{r}\npenguins <- read_csv(\"https://raw.githubusercontent.com/rfortherestofus/r-without-statistics/main/data/penguins-2008.csv\")\n```\n\n# Introduction\n\nWe are writing a report about the **Palmer Penguins**. These penguins are *really* amazing. There are three species:\n\n- Adelie\n- Gentoo\n- Chinstrap\n\n## Bill Length\n\nWe can make a histogram to see the distribution of bill lengths.\n\n```{r}\npenguins %>% \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n\n```{r}\naverage_bill_length <- penguins %>% \n  summarize(avg_bill_length = mean(bill_length_mm,\n                                   na.rm = TRUE)) %>% \n  pull(avg_bill_length)\n```\n\nThe chart shows the distribution of bill lengths. The average bill length is `r average_bill_length` millimeters."},{"path":"presentations-chapter.html","id":"creating-a-new-slide","chapter":"8 Making Slides Presentations with xaringan","heading":"Creating a New Slide","text":"Let’s make histogram fully visible putting slide. make new slide, add three dashes (---) ’d like slide begin. ’ve added dashes histogram code:knit document , one slide now broken two: Introduction slide Bill Length slide. However, look closely, ’ll notice bottom histogram still slightly cut . correct , ’ll change size.","code":"---\n\n## Bill Length\n\nWe can make a histogram to see the distribution of bill lengths.\n\n```{r}\npenguins %>% \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```"},{"path":"presentations-chapter.html","id":"adjusting-the-size-of-figures","chapter":"8 Making Slides Presentations with xaringan","heading":"Adjusting the Size of Figures","text":"Adjust size histogram using code chunk option fig.height:makes histogram fit slide also reveals text hidden . working R Markdown, ’ll often want adjust output size figures, fig.height fig.width help .","code":"---\n\n## Bill Length\n\nWe can make a histogram to see the distribution of bill lengths.\n\n```{r fig.height = 4}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```"},{"path":"presentations-chapter.html","id":"incrementally-revealing-content","chapter":"8 Making Slides Presentations with xaringan","heading":"Incrementally Revealing Content","text":"presenting, ’s often useful show portion content slide time. Let’s say, example, ’re presenting first slide, want talk bit penguin species. Rather show three species open slide, nice names come one time.can using xaringan calls incremental reveal. use feature, place two dashes (--) content want display incrementally. code, example, let us show Adelie screen, Adelie Gentoo, Adelie, Gentoo, Chinstrap:presenting slides, ’ll use right arrow incrementally reveal species.","code":"# Introduction\n\nWe are writing a report about the **Palmer Penguins**. These penguins are *really* amazing. There are three species:\n\n- Adelie\n\n--\n\n- Gentoo\n\n--\n\n- Chinstrap"},{"path":"presentations-chapter.html","id":"aligning-content-with-content-classes","chapter":"8 Making Slides Presentations with xaringan","heading":"Aligning Content with Content Classes","text":"designing presentation, ’ll also likely want control alignment content. can adding known content classes. Surround content classes .left[], right[], center[] align . example, let’s use .center[] align code chunk makes histogram:built-options can make two-column layouts. Adding pull-left[] pull-right[] make two equally spaced columns. Let’s use display histogram left side slide accompanying text right:also built-options make two-column layouts. Adding pull-left[] pull-right[] way make two equally spaced columns.can see looks like Figure 8.3.\nFigure 8.3: slide two columns\nmake narrow left column wide right column, use content classes .left-column[] .right-column[]. Figure 8.4. shows slide look like text left histogram right.\nFigure 8.4: slide smaller left column larger right column\naddition aligning particular pieces content slides, can also horizontally align entire content using left, right, center classes. , specify class right three dashes indicate new slide, content:give us horizontally centered slide. adjust vertical position, can use classes top, middle, bottom.","code":".center[\n```{r fig.height = 4}\npenguins %>% \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n].pull-left[\n```{r fig.height = 4}\npenguins %>% \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n]\n\n.pull-right[\n```{r}\naverage_bill_length <- penguins %>% \n  summarize(avg_bill_length = mean(bill_length_mm,\n                                   na.rm = TRUE)) %>% \n  pull(avg_bill_length)\n```\n\nThe chart shows the distribution of bill lengths. The average bill length is `r average_bill_length` millimeters.\n]---\n\nclass: center\n\n## Bill Length\n\nWe can make a histogram to see the distribution of bill lengths.\n\n```{r fig.height = 4}\npenguins %>% \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n\n```{r}\naverage_bill_length <- penguins %>% \n  summarize(avg_bill_length = mean(bill_length_mm,\n                                   na.rm = TRUE)) %>% \n  pull(avg_bill_length)\n```\n\nThe chart shows the distribution of bill lengths. The average bill length is `r average_bill_length` millimeters."},{"path":"presentations-chapter.html","id":"adding-background-images-to-slides","chapter":"8 Making Slides Presentations with xaringan","heading":"Adding Background Images to Slides","text":"syntax just used center entire slide can also enable us add background image. Let’s create new slide, use classes center middle horizontally vertically align content, add background image surrounding path image url(). code work file called penguins.jpg project.produces slide picture penguins background text Penguins front , shown Figure 8.5.\nFigure 8.5: slide uses background image\nNow let’s add custom CSS improve new slide.","code":"class: center, middle\nbackground-image: url(\"penguins.jpg\")\n\n## Penguins"},{"path":"presentations-chapter.html","id":"applying-css-to-slides","chapter":"8 Making Slides Presentations with xaringan","heading":"Applying CSS to Slides","text":"One issue slide just made word Penguins hard read. probably best make text bigger different color. , need use CSS, language used style HTML documents. ’re thinking, “’m reading book learn R, CSS,” don’t worry. ’ll need bit CSS make tweaks slides. apply tweaks slides, can write custom code, use CSS theme, combine two approaches using xaringanthemer package.","code":""},{"path":"presentations-chapter.html","id":"custom-css","chapter":"8 Making Slides Presentations with xaringan","heading":"Custom CSS","text":"add custom CSS, create new code chunk, place css curly brackets:code chunk, tell R Markdown make second-level header (h2) 150 pixels large white. must also add .remark-slide-content header make sure target specific elements presentation. term remark comes remark.js, JavaScript library making presentations xaringan uses hood. can see new slide Figure 8.6.\nFigure 8.6: Figure 8-6 title slide changes text make visible\nwanted change font addition text’s size color, additional CSS:first line CSS makes font called Inter available slides. people might font installed computers. next two lines apply Inter header make bold. can see slide bold Inter font Figure 8.7.\nFigure 8.7: title slide changes font make text visible\nxaringan slides built HTML documents, can customize CSS however ’d like. sky limit.","code":"```{css}\n.remark-slide-content h2 {\n  font-size: 150px;\n  color: white;\n}\n``````{css}\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');\n\n.remark-slide-content h2 {\n  font-size: 150px;\n  color: white;\n    font-family: Inter;\n  font-weight: bold;\n}\n```"},{"path":"presentations-chapter.html","id":"themes","chapter":"8 Making Slides Presentations with xaringan","heading":"Themes","text":"may care know ins outs CSS. Fortunately, can customize slides two ways without writing CSS . first way apply xaringan themes created R users. Run code get list available themes:output look something like :CSS files change fonts , others change general elements, text size, colors, whether slide numbers displayed, . Using pre-built themes usually require use general theme fonts theme, follows:code tells xaringan use default CSS, well customizations made metropolis metropolis-fonts CSS themes. come bundled xaringan, don’t need install additional packages access . Figure 8.8 shows theme changes look--feel slides.\nFigure 8.8: slide using metropolis theme\nwriting custom CSS totally flexible challenging option tweaking xaringan slides, using custom theme way simpler lot less flexible. Custom themes allow easily use others’ pre-built CSS, don’t give ability tweak .","code":"\nnames(xaringan:::list_css())#>  [1] \"chocolate-fonts\"  \"chocolate\"       \n#>  [3] \"default-fonts\"    \"default\"         \n#>  [5] \"duke-blue\"        \"fc-fonts\"        \n#>  [7] \"fc\"               \"glasgow_template\"\n#>  [9] \"hygge-duke\"       \"hygge\"           \n#> [11] \"ki-fonts\"         \"ki\"              \n#> [13] \"kunoichi\"         \"lucy-fonts\"      \n#> [15] \"lucy\"             \"metropolis-fonts\"\n#> [17] \"metropolis\"       \"middlebury-fonts\"\n#> [19] \"middlebury\"       \"nhsr-fonts\"      \n#> [21] \"nhsr\"             \"ninjutsu\"        \n#> [23] \"rladies-fonts\"    \"rladies\"         \n#> [25] \"robot-fonts\"      \"robot\"           \n#> [27] \"rutgers-fonts\"    \"rutgers\"         \n#> [29] \"shinobi\"          \"tamu-fonts\"      \n#> [31] \"tamu\"             \"uio-fonts\"       \n#> [33] \"uio\"              \"uo-fonts\"        \n#> [35] \"uo\"               \"uol-fonts\"       \n#> [37] \"uol\"              \"useR-fonts\"      \n#> [39] \"useR\"             \"uwm-fonts\"       \n#> [41] \"uwm\"              \"wic-fonts\"       \n#> [43] \"wic\"---\ntitle: \"Penguins Report\"\nauthor: \"David Keyes\"\ndate: \"2024-01-12\"\noutput:\n  xaringan::moon_reader:\n    css: [default, metropolis, metropolis-fonts]\n---"},{"path":"presentations-chapter.html","id":"the-xaringanthemer-package","chapter":"8 Making Slides Presentations with xaringan","heading":"The xaringanthemer Package","text":"nice middle ground writing custom CSS applying someone else’s theme use xaringanthemer package Garrick Aden-Buie. package includes several built-themes also allows easily create custom theme. installing package, adjust css line YAML use xaringan-themer.css file:Now can customize slides using style_xaringan() function. function 60 arguments, allowing tweak nearly part xaringan slides. replicate custom CSS wrote earlier chapter using xaringanthemer, let’s use just arguments:code sets header size 150 pixels makes headers use bold, white Inter font.One particularly nice thing xaringanthemer package can use font available Google Fonts simply adding name header_font_family argument sets font families (text_font_family code_font_family two). won’t include line made Inter font available us.","code":"---\ntitle: \"Penguins Report\"\nauthor: \"David Keyes\"\ndate: \"2024-01-12\"\noutput:\n  xaringan::moon_reader:\n    css: xaringan-themer.css\n---```{r}\nlibrary(xaringanthemer)\n\nstyle_xaringan(\n  header_h2_font_size = \"150px\",\n  header_color = \"white\",\n  header_font_weight = \"bold\",\n  header_font_family = \"Inter\"\n)\n```"},{"path":"presentations-chapter.html","id":"in-conclusion-the-advantages-of-xaringan","chapter":"8 Making Slides Presentations with xaringan","heading":"In Conclusion: The Advantages of xaringan","text":"chapter, learned create presentations using xaringan package. ’ve seen incrementally reveal content slides, create multi-column layouts, add background images slides, change appearance slides applying custom themes, writing custom CSS, using xaringanthemer package.working xaringan, can create type presentation want , customize match desired look--feel. Creating presentations xaringan also allows share HTML slides easily enables greater accessibility.","code":""},{"path":"presentations-chapter.html","id":"learn-more-7","chapter":"8 Making Slides Presentations with xaringan","heading":"Learn More","text":"Consult following resources improve quality presentations make xaringan package:Sharing Work xaringan: Introduction xaringan Presentations: Basics Beyond Silvia Canelón (2020), https://spcanelon.github.io/xaringan-basics--beyond/index.htmlProfessional, Polished, Presentable: Making Great Slides xaringan, workshop materials Garrick Aden-Buie, Silvia Canelón, Shannon Pileggi (2021), https://presentable-user2021.netlify.app/Meet xaringan: Making slides R Markdown Alison Hill (2019), https://arm.rbind.io/slides/xaringan.htmlChapter 7 (“xaringan Presentations”) R Markdown: Definitive Guide Yihui Xie, J. J. Allaire, Garrett Grolemund (CRC Press, 2019), https://bookdown.org/yihui/rmarkdown/","code":""},{"path":"websites-chapter.html","id":"websites-chapter","chapter":"9 Make Websites to Share Results Online","heading":"9 Make Websites to Share Results Online","text":"summer 2020, Matt Herman’s family moved Brooklyn Westchester County, New York. early COVID pandemic, Herman shocked county published little data infection rates. Vaccines weren’t yet available, daily choices like whether take children park depended access good data.Matt Herman wasn’t just person interest COVID data. also, time, Deputy Director ChildStat Data Unit Office Research Analytics New York City Administration Children’s Services. handful title meant skilled working data, enabling create COVID resource needed: Westchester COVID-19 Tracking website.Built entirely R, website uses charts, maps, tables, text summarize latest COVID data Westchester County. website, available https://westchester-covid.mattherman.info/, longer consistently updated, Figure 9.1 shows screenshot .\nFigure 9.1: screenshot Westchester COVID-19 website\nmake website, Herman wrote set R Markdown files strung together distill package. chapter explains basics package walking creation simple website. ’ll learn produce different page layouts, navigation menus, interactive graphics, explore strategies hosting website.","code":""},{"path":"websites-chapter.html","id":"creating-a-new-distill-project","chapter":"9 Make Websites to Share Results Online","heading":"Creating a New distill Project","text":"Chapter 8, created slideshow presentation knitting R Markdown document single HTML file. website merely collection HTML files. distill package enables us use multiple R Markdown documents create several HTML files, connect navigation menu .create distill website, install package using install.packages(\"distill\"). start project R Studio navigating File > New Project > New Directory selecting Distill Website project type. take menu Figure 9.2.\nFigure 9.2: Giving distill website name\nSpecify directory subdirectory project live computer, give website title. Configure GitHub Pages option provides easy way get website online, ’ll discuss works . Select ’d like use deployment option.","code":""},{"path":"websites-chapter.html","id":"the-project-files","chapter":"9 Make Websites to Share Results Online","heading":"The Project Files","text":"now project several files. addition covid-website.Rproj file indicates ’re working RStudio project, two R Markdown documents, *_site.yml* file, docs folder, rendered HTML files go. Let’s take look website’s files.","code":""},{"path":"websites-chapter.html","id":"the-r-markdown-documents","chapter":"9 Make Websites to Share Results Online","heading":"The R Markdown Documents","text":"R Markdown file represents page website. default, distill creates Home page (index.Rmd) page (.Rmd) containing placeholder content. wanted generate additional pages, simply add new R Markdown files, add *_site.yml* file (discussed next section).open index.Rmd file, ’ll notice YAML contains two arguments present R Markdown documents previous chapters: description site:description argument specifies text go title page, shown Figure 9.3.\nFigure 9.3: default website description\nsite: distill::distill_website line identifies root page distill website. means knit document, R Markdown knows create website, rather individual HTML file, website display page first. pages website don’t require line. long listed *_site.yml* file, added site.’ll notice ’re also missing argument ’ve seen R Markdown documents: output, specifies output format use knitting. reason don’t argument specify output entire website *_site.yml* file.","code":"---\ntitle: \"COVID Website\"\ndescription: |\n  Welcome to the website. I hope you enjoy it!\nsite: distill::distill_website\n---"},{"path":"websites-chapter.html","id":"the-_site.yml-file--","chapter":"9 Make Websites to Share Results Online","heading":"9.0.1 The _site.yml File {-}","text":"*_site.yml* file tells R R Markdown documents make website, knitted files look like, website called, . open , see following code.name argument determines URL website. default, name directory distill project lives. title argument creates title entire website shows top left navigation bar default. description argument provides ’s known meta description, show Google search results couple lines give user overview website content.output_dir argument determines rendered HTML files live generate website. see .docs directory listed selected Configure GitHub Pages option. However, can change output directory folder choose.Next, navbar section defines website’s navigation. appears right side header, swapping right parameter left switch position. includes links site’s two pages: Home , shown Figure 9.4.\nFigure 9.4: website navigation bar\nWithin navbar code, text argument determines text shows menu. (Try, example, changing “” “Website.”) href argument determines HTML file text navigation bar links . want include additional pages menu, ’ll need add text href parameters.Lastly, output argument specifies R Markdown documents rendered using distill_article format. format allows layouts different widths, asides (parenthetical items live sidebar next main content), easily customizable CSS, .","code":"name: \"covid-website\"\ntitle: \"COVID Website\"\ndescription: |\n  COVID Website\noutput_dir: \"docs\"\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\noutput: distill::distill_article"},{"path":"websites-chapter.html","id":"building-the-site","chapter":"9 Make Websites to Share Results Online","heading":"Building the Site","text":"explored project’s files haven’t yet used create website. three ways . First, can click Build Website button Build tab RStudio’s top-right pane. Second, can run rmarkdown::render_site() console R script file. Third, can use keyboard shortcut Command + Shift + B macOS Ctrl + Shift + B Windows.options render R Markdown documents add top navigation bar options specified *_site.yml* file. find rendered files, look output directory specified (us, docs). Open index.html file ’ll find website, look like Figure 9.5.\nFigure 9.5: COVID website default content\ncan open HTML file well see rendered version.","code":""},{"path":"websites-chapter.html","id":"applying-custom-css-with-create_theme","chapter":"9 Make Websites to Share Results Online","heading":"Applying Custom CSS with create_theme()","text":"Websites made distill tend look similar, can change design using custom CSS. distill package even provides function simplify process. Running distill::create_theme() function console create file called theme.css, shown :Within file set known CSS variables. names clearly show purpose, can alter default values whatever ’d like. example, following changes site’s header make title text size larger background color light blue:can see changes, need tell distill use custom CSS rendering adding line *_site.yml* file:Now can generate site . can see theme.css file, lot CSS variables can change tweak appearance website. Playing around rebuilding site great way figure .","code":"/* base variables */\n\n/* Edit the CSS properties in this file to create a custom\n   Distill theme. Only edit values in the right column\n   for each row; values shown are the CSS defaults.\n   To return any property to the default,\n   you may set its value to: unset\n   All rows must end with a semi-colon.                      */\n\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    sans-serif;\n  --mono-font:       monospace;\n  --body-font:       sans-serif;\n  --navbar-font:     sans-serif;  /* websites + blogs only */\n}\n\n/*-- ARTICLE METADATA --*/\nd-byline {\n  --heading-size:    0.6rem;\n  --heading-color:   rgba(0, 0, 0, 0.5);\n  --body-size:       0.8rem;\n  --body-color:      rgba(0, 0, 0, 0.8);\n}\n\n/*-- ARTICLE TABLE OF CONTENTS --*/\n.d-contents {\n  --heading-size:    18px;\n  --contents-size:   13px;\n}\n\n/*-- ARTICLE APPENDIX --*/\nd-appendix {\n  --heading-size:    15px;\n  --heading-color:   rgba(0, 0, 0, 0.65);\n  --text-size:       0.8em;\n  --text-color:      rgba(0, 0, 0, 0.5);\n}\n\n/*-- WEBSITE HEADER + FOOTER --*/\n/* These properties only apply to Distill sites and blogs  */\n\n.distill-site-header {\n  --title-size:       18px;\n  --text-color:       rgba(255, 255, 255, 0.8);\n  --text-size:        15px;\n  --hover-color:      white;\n  --bkgd-color:       #0F2E3D;\n}\n\n.distill-site-footer {\n  --text-color:       rgba(255, 255, 255, 0.8);\n  --text-size:        15px;\n  --hover-color:      white;\n  --bkgd-color:       #0F2E3D;\n}\n\n/*-- Additional custom styles --*/\n/* Add any additional CSS rules below                      */.distill-site-header {\n  --title-size:       28px;\n  --text-color:       rgba(255, 255, 255, 0.8);\n  --text-size:        20px;\n  --hover-color:      white;\n  --bkgd-color:       #6cabdd;\n}name: \"covid-website\"\ntitle: \"COVID Website\"\ndescription: |\n  COVID Website\ntheme: theme.css\noutput_dir: \"docs\"\nnavbar:\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\noutput: distill::distill_article"},{"path":"websites-chapter.html","id":"working-with-website-content","chapter":"9 Make Websites to Share Results Online","heading":"Working with Website Content","text":"Using distill, can alter size website’s content even make interactive. first add content page website, create Markdown text code chunks page’s R Markdown document. example, let’s replace contents index.Rmd following code make table, map, chart appear website’s Home page. start file:YAML setup code chunk, load several packages, ’ve seen previous chapters: tidyverse data import, manipulation, plotting (ggplot); janitor clean_names() function, makes variable names easier work ; tigris import geospatial data states; gt making nice tables; lubridate work dates.Next, create new code chunk import clean data:also create variable called last_day, later reference text section. Using inline R code, header now displays current date. make table shows death rates per 100,000 people four states (using states create large table):table resembles code discussed Chapter 5. Next, make map data states using techniques covered Chapter 4:Finally, make chart shows COVID death rates time four states table:Figure 9.6 shows website’s home page now looks like.\nFigure 9.6: COVID website table, map, chart\nNow content, can tweak . example, many states quite small, especially northeast, ’s bit challenging see . Let’s make entire map bigger.","code":"---\ntitle: \"COVID Website\"\ndescription: \"Information about COVID rates in the United States over time\"\nsite: distill::distill_website\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  echo = FALSE,\n  warning = FALSE,\n  message = FALSE\n)\n```\n\n```{r}\n# Load packages\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(tigris)\nlibrary(gt)\nlibrary(lubridate)\n``````{r}\n# Import data\n\nus_states <- states(\n  cb = TRUE,\n  resolution = \"20m\",\n  progress_bar = FALSE\n) %>%\n  shift_geometry() %>%\n  clean_names() %>%\n  select(geoid, name) %>%\n  rename(state = name) %>%\n  filter(state %in% state.name)\n\ncovid_data <- read_csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-states.csv\") %>%\n  filter(state %in% state.name) %>%\n  mutate(geoid = str_remove(geoid, \"USA-\"))\n\nlast_day <- covid_data %>%\n  slice_max(\n    order_by = date,\n    n = 1\n  ) %>%\n  distinct(date) %>%\n  mutate(date_nice_format = str_glue(\"{month(date, label = TRUE, abbr = FALSE)} {day(date)}, {year(date)}\")) %>%\n  pull(date_nice_format)\n```\n\n# COVID Death Rates as of `r last_day`\n\nThis table shows COVID death rates per 100,000 people in four states states.```{r}\ncovid_data %>%\n  filter(state %in% c(\n    \"Alabama\",\n    \"Alaska\",\n    \"Arizona\",\n    \"Arkansas\"\n  )) %>%\n  slice_max(\n    order_by = date,\n    n = 1\n  ) %>%\n  select(state, deaths_avg_per_100k) %>%\n  arrange(state) %>%\n  set_names(\"State\", \"Death rate\") %>%\n  gt() %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  )\n```We can see this same death rate data for all states on a map.\n\n```{r}\nmost_recent <- us_states %>%\n  left_join(covid_data, by = \"state\") %>%\n  slice_max(\n    order_by = date,\n    n = 1\n  )\n\nmost_recent %>%\n  ggplot(aes(fill = deaths_avg_per_100k)) +\n  geom_sf() +\n  scale_fill_viridis_c(option = \"rocket\") +\n  labs(fill = \"Deaths per\\n100,000 people\") +\n  theme_void()\n```# COVID Death Rates Over Time\n\nThe following chart shows COVID death rates from the start of COVID in early 2020 until `r last_day`.\n\n```{r}\ncovid_data %>%\n  filter(state %in% c(\n    \"Alabama\",\n    \"Alaska\",\n    \"Arizona\",\n    \"Arkansas\"\n  )) %>%\n  ggplot(aes(\n    x = date,\n    y = deaths_avg_per_100k,\n    group = state,\n    fill = deaths_avg_per_100k\n  )) +\n  geom_col() +\n  scale_fill_viridis_c(option = \"rocket\") +\n  theme_minimal() +\n  labs(title = \"Deaths per 100,000 people over time\") +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_blank(),\n    axis.title = element_blank()\n  ) +\n  facet_wrap(\n    ~state,\n    nrow = 2\n  )\n```"},{"path":"websites-chapter.html","id":"applying-distill-layouts","chapter":"9 Make Websites to Share Results Online","heading":"Applying distill Layouts","text":"One nice feature distill ability make output certain code chunks larger. four layouts can apply code chunk widen output: l-body-outset (creates output bit wider default), l-page (creates output wider still), l-screen (creates full-screen output), l-screen-inset (creates full-screen output bit buffer).Apply l-screen-inset map modifying first line code chunk follows:makes map wider taller, result, much easier read.","code":"```{r layout = \"l-screen-inset\"}"},{"path":"websites-chapter.html","id":"making-the-content-interactive","chapter":"9 Make Websites to Share Results Online","heading":"Making the Content Interactive","text":"static content ’ve added website far none interactivity common websites, can use JavaScript respond user behavior. limited familiarity HTML JavaScript, can use R packages like distill, plotly, DT, wrap JavaScript libraries, add interactivity website. Matt Herman uses interactive graphics maps Westchester County COVID website. Figure 9.7, example, shows tooltip allows user see results single day.\nFigure 9.7: Interactive tooltips showing new cases day\nHerman also makes interactive tables DT package, allowing user scroll data sort values clicking variables heading. Figure 9.8 shows table.\nFigure 9.8: interactive table made DT package\nLet’s add interactivity national COVID website. ’ll begin making table interactive.","code":""},{"path":"websites-chapter.html","id":"adding-pagination-to-a-table-with-reactable","chapter":"9 Make Websites to Share Results Online","heading":"Adding Pagination to a Table with reactable","text":"Remember included four states table keep getting super long? creating interactive table, can avoid . reactable package great option interactive tables. can install install.packages(\"reactable\"). swap gt package code used make static table reactable() function, can show states:reactable package shows 10 rows default adds pagination, shown Figure 9.9.\nFigure 9.9: interactive table built reactable\nreactable() function also enables sorting default. Although used arrange() function code sort data state name, users can click “Death rate” column sort values using variable.","code":"\nlibrary(reactable)\n\ncovid_data %>%\n  slice_max(\n    order_by = date,\n    n = 1\n  ) %>%\n  select(state, deaths_avg_per_100k) %>%\n  arrange(state) %>%\n  set_names(\"State\", \"Death rate\") %>%\n  reactable()"},{"path":"websites-chapter.html","id":"creating-a-hovering-tooltip-with-plotly","chapter":"9 Make Websites to Share Results Online","heading":"Creating a Hovering Tooltip with Plotly","text":"Let’s also give website’s chart interactivity using plotly, following basic workflow. First, create plot ggplot save object. , pass ggplotly() function, turns interactive plot. following code, assumes installed plotly package using install.packages(\"plotly\"), apply chart showing COVID death rates time:code make chart identical chart code shown earlier chapter. difference save chart object called covid_chart run ggplotly(covid_chart). code produces interactive chart shows data particular day user hovers . tooltip users see hovering, shown Figure 9.10, cluttered overwhelming ggplotly() function shows data default.\nFigure 9.10: Messy tooltips COVID death rates graph\nmake tooltip informative, can create single variable containing data want display tell ggplotly() use :begin creating date_nice_format variable produces dates readable January 1, 2023 format instead 2023-01-01. combine value state death rate variables, saving result tooltip_text. Next, add new aesthetic property ggplot() function. , doesn’t anything pass new property ggplotly() function.Figure 9.11 shows new tooltip looks like: name state, nicely formatted date, death rate day.\nFigure 9.11: Easy read interactive tooltips COVID death rate chart\nAdding interactivity great way take advantage medium website. Users might feel overwhelmed looking static chart can explore interactive version, hovering see summary results single day.","code":"\nlibrary(plotly)\n\ncovid_chart <- covid_data %>%\n  filter(state %in% c(\n    \"Alabama\",\n    \"Alaska\",\n    \"Arizona\",\n    \"Arkansas\"\n  )) %>%\n  ggplot(aes(\n    x = date,\n    y = deaths_avg_per_100k,\n    group = state,\n    fill = deaths_avg_per_100k\n  )) +\n  geom_col() +\n  scale_fill_viridis_c(option = \"rocket\") +\n  theme_minimal() +\n  labs(title = \"Deaths per 100,000 people over time\") +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_blank(),\n    axis.title = element_blank()\n  ) +\n  facet_wrap(\n    ~state,\n    nrow = 2\n  )\n\nggplotly(covid_chart)\ncovid_chart <- covid_data %>%\n  filter(state %in% c(\n    \"Alabama\",\n    \"Alaska\",\n    \"Arizona\",\n    \"Arkansas\"\n  )) %>%\n  mutate(date_nice_format = str_glue(\"{month(date, label = TRUE, abbr = FALSE)} {day(date)}, {year(date)}\")) %>%\n  mutate(tooltip_text = str_glue(\"{state}<br>{date_nice_format}<br>{deaths_avg_per_100k} per 100,000 people\")) %>%\n  ggplot(aes(\n    x = date,\n    y = deaths_avg_per_100k,\n    group = state,\n    text = tooltip_text,\n    fill = deaths_avg_per_100k\n  )) +\n  geom_col() +\n  scale_fill_viridis_c(option = \"rocket\") +\n  theme_minimal() +\n  labs(title = \"Deaths per 100,000 people over time\") +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_blank(),\n    axis.title = element_blank()\n  ) +\n  facet_wrap(\n    ~state,\n    nrow = 2\n  )\n\n\nggplotly(\n  covid_chart,\n  tooltip = \"tooltip_text\"\n)"},{"path":"websites-chapter.html","id":"hosting-the-website","chapter":"9 Make Websites to Share Results Online","heading":"Hosting the Website","text":"Now ’ve made website, need way share . various ways , ranging simple quite complex. easiest solution compress files docs folder (whatever folder put rendered website ) email ZIP file others. can unzip open HTML files browser. works fine know won’t want make changes data styles website. , discussed Chapter 5, projects aren’t really one-time.","code":""},{"path":"websites-chapter.html","id":"in-the-cloud","chapter":"9 Make Websites to Share Results Online","heading":"In the Cloud","text":"better approach put entire docs folder place others can see . internal network, Dropbox, Google Drive, Box, something similar. Hosting files way simple implement allows give access want see website.can even automate process copying docs folder various online file-sharing sites using R packages: rdrop2 package works Dropbox, googledrive works Google Drive, boxr works Box. example, code like following automatically upload project Dropbox:code, typically add separate file called render.R, renders site, uses dir_ls() function fs package identify files docs directory, uploads files Dropbox. Now can run entire file generate upload website one go.","code":"\nlibrary(tidyverse)\nlibrary(rmarkdown)\nlibrary(fs)\nlibrary(rdrop2)\n\n# Render the website\nrender_site()\n\n# Upload to Dropbox\nwebsite_files <- dir_ls(\n  path = \"docs\",\n  type = \"file\",\n  recurse = TRUE\n)\n\nwalk(website_files, drop_upload, path = \"COVID Website\")"},{"path":"websites-chapter.html","id":"using-github-pages","chapter":"9 Make Websites to Share Results Online","heading":"Using GitHub Pages","text":"complicated yet powerful solution use static hosting service like GitHub Pages. service deploys website URL ’ve set time commit code GitHub. Learning use GitHub investment (book Happy Git GitHub useR Jenny Bryan great resource), able host website free makes worth time effort.’s GitHub Pages works. time, look file GitHub, see underlying source code, looked HTML file, ’d see HTML code. GitHub Pages, hand, shows rendered HTML files. host website GitHub Pages, ’ll need first push code GitHub. repository set , go , go Settings tab, look like Figure 9.12.\nFigure 9.12: Setting GitHub Pages\nNow choose want GitHub deploy raw HTML. easiest approach keep default source selecting Deploy branch, selecting default branch (usually main master). Next, select directory containing HTML files want rendered. configured website GitHub pages beginning chapter, docs. Click save wait minutes. GitHub show URL website now lives.best part hosting website GitHub Pages time update code data, website update well. RMarkdown, distill, GitHub Pages make building maintaining websites snap.","code":""},{"path":"websites-chapter.html","id":"conclusion-5","chapter":"9 Make Websites to Share Results Online","heading":"Conclusion","text":"chapter, learned use distill package make websites R. package provides simple way get website running tool ’re already using working data. ’ve seen :Create new pages add top navigation bar.Customize look--feel website tweaks CSS.Use wider layouts make content fit better individual pages.Convert static data visualization tables interactive versions.Use GitHub Pages host always---date version website.Herman continued building websites R. colleagues Council State Governments Justice Center made great website using Quarto, language-agnostic version R Markdown. website, found https://projects.csgjusticecenter.org/tools--states--address-crime/, highlights crime trends throughout United States using many techniques ’ve discussed chapter.matter whether use distill Quarto, using R gives quick way develop complex websites without sophisticated front-end web developer. websites look good communicate well. one way R can help share results world.","code":""},{"path":"websites-chapter.html","id":"learn-more-8","chapter":"9 Make Websites to Share Results Online","heading":"Learn More","text":"Consult following resources learn make websites distill package see examples websites made distill:“Building blog distill” Tom Mock (2020), https://themockup.blog/posts/2020-08-01-building--blog--distill/Distillery website, showcasing websites made distill: https://distillery.rbind.io/","code":""},{"path":"quarto-chapter.html","id":"quarto-chapter","chapter":"10 Reproducible Reporting with Quarto","heading":"10 Reproducible Reporting with Quarto","text":"Quarto, next-generation version R Markdown, offers advantages R Markdown. First, syntax uses across output types consistent. ’ve seen book, R Markdown documents might use variety conventions; example, distill package layout options don’t work xaringan, xaringan uses three dashes indicate new slides, three dashes output formats create horizontal line.Quarto also supports languages R Markdown, well multiple code editors. R Markdown designed work RStudio IDE, Quarto works RStudio well code editors VS Code JupyterLab, making easy use multiple languages.chapter focuses benefits using Quarto R user. explains set Quarto, covers important differences Quarto R Markdown. Lastly, ’ll learn make parameterized reports, presentations, websites covered previous chapters using Quarto.","code":""},{"path":"quarto-chapter.html","id":"creating-a-quarto-document","chapter":"10 Reproducible Reporting with Quarto","heading":"Creating a Quarto Document","text":"Versions RStudio starting 2022.07.1 come Quarto installed. check RStudio version, click RStudio top menu bar, click RStudio. older version RStudio, update now reinstalling , outlined Chapter 1. Quarto installed .’ve installed Quarto, create document clicking File > New File > Quarto Document. see menu, shown Figure 10.1, looks like one used create R Markdown document.\nFigure 10.1: RStudio menu creating new Quarto document\nGive document title choose output format. Engine option allows select different way render documents. default, uses Knitr, rendering tool used R Markdown. Use visual markdown editor option provides interface looks like Microsoft Word, can finicky, won’t cover .resulting Quarto document contain default content, R Markdown documents:Although R Markdown Quarto many things common, also differences. Let’s explore .","code":"---\ntitle: \"My Report\"\nformat: html\n---\n\n## Quarto\n\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n\n## Running Code\n\nWhen you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n```{r}\n1 + 1\n```\n\nYou can add options to executable code like this \n\n```{r}\n#| echo: false\n2 * 2\n```\n\nThe `echo: false` option disables the printing of code (only output is displayed)."},{"path":"quarto-chapter.html","id":"comparing-r-markdown-and-quarto","chapter":"10 Reproducible Reporting with Quarto","heading":"Comparing R Markdown and Quarto","text":"Quarto R Markdown documents basic structure: YAML metadata, followed combination Markdown text code chunks. Despite similarities formats, variations syntax.","code":""},{"path":"quarto-chapter.html","id":"the-format-and-execute-yaml-fields","chapter":"10 Reproducible Reporting with Quarto","heading":"The format and execute YAML Fields","text":"Quarto uses slightly different options YAML. replaces output field format field uses value html instead html_document:Quarto formats also use slightly different names R Markdown counterparts: docx instead word_document pdf instead pdf_document, example.second difference R Markdown Quarto Quarto doesn’t use setup code chunk set default options things like whether show code, charts, elements rendered versions document. Quarto, options set execute field YAML. example, following hide code, well warnings messages, rendered document:Quarto also allows write true false lower case.","code":"---\ntitle: \"My Report\"\noutput: html_document\n------\ntitle: \"My Report\"\nformat: html\nexecute:\n  echo: false\n  warning: false\n  message: false\n---"},{"path":"quarto-chapter.html","id":"individual-code-chunk-options","chapter":"10 Reproducible Reporting with Quarto","heading":"Individual Code Chunk Options","text":"R Markdown, override options individual code chunk level adding new option within curly brackets start code chunk. example, following show code 2 * 2 well output:Quarto instead uses following syntax set individual code chunk-level options:can see option set within code chunk . characters #| (known hash pipe) start line indicate setting options.","code":"```{r echo = TRUE}\n2 * 2\n``````{r}\n#| echo: false\n2 * 2\n```"},{"path":"quarto-chapter.html","id":"dashes-in-option-names","chapter":"10 Reproducible Reporting with Quarto","heading":"Dashes in Option Names","text":"Another difference ’re likely see switch R Markdown Quarto option names consisting two words separated dash rather period. R Markdown, example, uses code chunk option fig.height determine height plots. contrast, Quarto uses fig-height, follows:Helpfully us coming R Markdown, fig.height similar options periods continue work forget make switch. list code chunk options can found Quarto website https://quarto.org/docs/reference/cells/cells-knitr.html.","code":"```{r}\n#| fig-height: 10\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\nggplot(\n  penguins,\n  aes(\n    x = bill_length_mm,\n    y = bill_depth_mm\n  )\n) +\n  geom_point()\n```"},{"path":"quarto-chapter.html","id":"the-render-button","chapter":"10 Reproducible Reporting with Quarto","heading":"The Render Button","text":"can follow process render Quarto document R Markdown, Quarto button called Render rather Knit. Figure 10.2 shows Render button.\nFigure 10.2: Render button\nClicking Render button turn Quarto document HTML file, Word document, output format select, just working R Markdown.","code":""},{"path":"quarto-chapter.html","id":"parameterized-reporting","chapter":"10 Reproducible Reporting with Quarto","heading":"Parameterized Reporting","text":"Now ’ve learned Quarto works, let’s make different documents , starting parameterized report. process making parameterized reports Quarto nearly identical R Markdown. fact, can take R Markdown document used make Urban Institute COVID Report Chapter 7 adapt Quarto copying .Rmd file changing extension .qmd, making changes:code, ’ve switched output: html_document format: html YAML, ’ve also removed setup code chunk put options YAML. Lastly, ’ve switched fig.height option last code chunk fig-height used hash pipe label option.Next, create one report state, must tweak render.R script file used make parameterized reports Chapter 7:updated render.R file loads quarto package instead rmarkdown package changes input file urban-covid-budget-report.qmd. reports tibble, use execute_params instead params argument quarto_render() function expects. render reports, use quarto_render() function instead render() function markdown package. Chapter 7, running code produce one report state.","code":"---\ntitle: \"Urban Institute COVID Report\"\nformat: html\nparams:\n  state: \"Alabama\"\nexecute:\n  echo: false\n  warning: false\n  message: false\n---\n\n```{r}\nlibrary(tidyverse)\nlibrary(urbnthemes)\nlibrary(here)\nlibrary(scales)\n```\n\n# `r params$state`\n\n```{r}\ncases <- tibble(state.name) %>%\n  rbind(state.name = \"District of Columbia\") %>%\n  left_join(\n    read_csv(\"https://data.rwithoutstatistics.com/united_states_covid19_cases_deaths_and_testing_by_state.csv\", skip = 2),\n    by = c(\"state.name\" = \"State/Territory\")\n  ) %>%\n  select(\n    total_cases = `Total Cases`,\n    state.name,\n    cases_per_100000 = `Case Rate per 100000`\n  ) %>%\n  mutate(cases_per_100000 = parse_number(cases_per_100000)) %>%\n  mutate(case_rank = rank(-cases_per_100000, ties.method = \"min\"))\n```\n\n```{r}\nstate_text <- if_else(params$state == \"District of Columbia\", str_glue(\"the District of Columbia\"), str_glue(\"state of {params$state}\"))\n\nstate_cases_per_100000 <- cases %>%\n  filter(state.name == params$state) %>%\n  pull(cases_per_100000) %>%\n  comma()\n\nstate_cases_rank <- cases %>%\n  filter(state.name == params$state) %>%\n  pull(case_rank)\n```\n\nIn `r state_text`, there were `r state_cases_per_100000` cases per 100,000 people in the last seven days. This puts `r params$state` at number `r state_cases_rank` of 50 states and the District of Columbia. \n\n```{r}\n#| fig-height: 8\n\nset_urbn_defaults(style = \"print\")\n\ncases %>%\n  mutate(highlight_state = if_else(state.name == params$state, \"Y\", \"N\")) %>%\n  mutate(state.name = fct_reorder(state.name, cases_per_100000)) %>%\n  ggplot(aes(\n    x = cases_per_100000,\n    y = state.name,\n    fill = highlight_state\n  )) +\n  geom_col() +\n  scale_x_continuous(labels = comma_format()) +\n  theme(legend.position = \"none\") +\n  labs(\n    y = NULL,\n    x = \"Cases per 100,000\"\n  )\n```\n# Load packages\nlibrary(tidyverse)\nlibrary(quarto)\n\n# Create a vector of all states and the District of Columbia\nstate <- tibble(state.name) %>%\n  rbind(\"District of Columbia\") %>% \n  pull(state.name)\n\n# Create a tibble with information on the:\n# input R Markdown document\n# output HTML file\n# parameters needed to knit the document\nreports <- tibble(\n  input = \"urban-covid-budget-report.qmd\",\n  output_file = str_glue(\"{state}.html\"),\n  execute_params = map(state, ~list(state = .))\n)\n\n# Generate all of our reports\nreports %>%\n  pwalk(quarto_render)"},{"path":"quarto-chapter.html","id":"making-presentations","chapter":"10 Reproducible Reporting with Quarto","heading":"Making Presentations","text":"Quarto can produce presentations like made Chapter 8 xaringan package. make presentation Quarto, click File > New File > Quarto Presentation. Choose Reveal JS make slides leave Engine Editor options untouched, shown Figure 10.3.\nFigure 10.3: RStudio menu make new Quarto presentation\nslides ’ll make use reveal.js JavaScript library hood, technique similar making slides xaringan. following code updates presentation made Chapter 8 works Quarto:YAML, set format: revealjs make presentation add several global code chunk options execute section. remove three dashes used make slide breaks, Quarto, first- second-level headings make new slides (though can use three dashes manually add slide breaks). render code, get HTML file slides. output look similar default xaringan slides made.","code":"---\ntitle: \"Penguins Report\"\nauthor: \"David Keyes\"\nformat: revealjs\nexecute: \n  echo: false\n  warning: false\n  message: false\n---\n\n# Introduction\n\n```{r}\nlibrary(tidyverse)\n```\n\n```{r}\npenguins <- read_csv(\"https://raw.githubusercontent.com/rfortherestofus/r-without-statistics/main/data/penguins-2008.csv\")\n```\n\nWe are writing a report about the **Palmer Penguins**. These penguins are *really* amazing. There are three species:\n\n- Adelie\n- Gentoo\n- Chinstrap\n\n## Bill Length\n\nWe can make a histogram to see the distribution of bill lengths.\n\n```{r}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n\n```{r}\naverage_bill_length <- penguins %>%\n  summarize(avg_bill_length = mean(\n    bill_length_mm,\n    na.rm = TRUE\n  )) %>%\n  pull(avg_bill_length)\n```\n\nThe chart shows the distribution of bill lengths. The average bill length is `r average_bill_length` millimeters."},{"path":"quarto-chapter.html","id":"incrementally-revealing-content-1","chapter":"10 Reproducible Reporting with Quarto","heading":"Incrementally Revealing Content","text":"Quarto slides can incrementally reveal content. reveal bulleted numbered lists one item time default, add incremental: true document’s YAML:result, content lists presentation appear slide one item time. can also set just lists incrementally reveal using format:Using ::: start end segment document creates section resulting HTML file known <div>. HTML <div> tag allows define properties within section. code, adding {.incremental} sets custom CSS class makes list reveal incrementally.","code":"---\ntitle: \"Penguins Report\"\nauthor: \"David Keyes\"\nformat: \n  revealjs:\n      incremental: true\nexecute: \n  echo: false\n  warning: false\n  message: false\n---::: {.incremental}\n- Adelie\n- Gentoo\n- Chinstrap\n:::"},{"path":"quarto-chapter.html","id":"aligning-content-and-adding-background-images","chapter":"10 Reproducible Reporting with Quarto","heading":"Aligning Content and Adding Background Images","text":"create columns Quarto slides, . Let’s say want create slide content two columns, Figure 10.4.\nFigure 10.4: slide two columns\nfollowing code created two-column slide:Notice :::, well ::::, creates nested <div> sections. first use columns class, tells HTML content within :::: laid columns. , use ::: {.column width=\"50%\"} start <div> takes half width slide. use closing :::: ::: indicate end section.using xaringan, easily centered content slide surrounding .center[]. thing Quarto slightly complicated. Quarto built-CSS class center content, need create one . Begin CSS code chunk custom class called center-slide:Using CSS, center-align content. (text-align property aligns images, , just text.) apply new center-slide class putting next title slide, follows:custom CSS applied, slide now center content.Lastly, working xaringan, added background image slide. can thing Quarto applying background-image attribute slide, follows:add slide text Penguins front selected image.","code":":::: {.columns}\n\n::: {.column width=\"50%\"}\n```{r}\npenguins %>%\n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n\n:::\n\n::: {.column width=\"50%\"}\n```{r}\npenguins %>%\n  ggplot(aes(x = bill_depth_mm)) +\n  geom_histogram() +\n  theme_minimal()\n```\n\n:::\n\n::::```{css}\n.center-slide {\n    text-align: center;\n}\n```## Bill Length {.center-slide}## Penguins {background-image=\"penguins.jpg\"}"},{"path":"quarto-chapter.html","id":"customizing-your-slides-with-themes-and-css","chapter":"10 Reproducible Reporting with Quarto","heading":"Customizing Your Slides with Themes and CSS","text":"’ve started making changes look--feel Quarto slides. xaringan, two main ways customize slides: using existing themes changing CSS.Themes easiest way change slides look like. Quarto many themes can apply adding name YAML, follows:Using option change theme default light dark theme. can see title slide dark theme applied Figure 10.5. see full list available themes, go https://quarto.org/docs/presentations/revealjs/themes.html.\nFigure 10.5: slide dark theme applied\ncan also write custom CSS change slides . Quarto uses type CSS called Sass lets us include variables CSS. variables resemble xaringanthemer package, allowed us set values header formatting using header_h2_font_size header_color.Go File > New File > New Text File, create Sass file called theme.scss, add following two mandatory sections follows:scss:defaults section, can use Quarto Sass variables. example, change color size first-level headers, add code:Quarto Sass variables start dollar sign, followed name. apply tweaks slides, adjust YAML tell Quarto use custom theme.scss file:Figure 10.6 shows changes applied rendered slides.\nFigure 10.6: slide custom CSS applied \npre-defined variables go scss:defaults section, can find full list variables https://quarto.org/docs/presentations/revealjs/themes.html#sass-variables. sass:rules section, can add additional CSS tweaks existing variables. example, place code wrote center slide’s content section:rendered Quarto slides HTML documents, can tweak however like custom CSS. ’s , slides use reveal.js hood, features built JavaScript library work Quarto. library includes easy ways add transitions, animations, interactive content, much . demo Quarto presentation available https://quarto.org/docs/presentations/revealjs/demo/ shows many features action.","code":"---\ntitle: \"Penguins Report\"\nformat:\n  revealjs: \n    theme: dark\n---/*-- scss:defaults --*/\n\n/*-- scss:rules --*//*-- scss:defaults --*/\n$presentation-heading-color: red;\n$presentation-h1-font-size: 150px;\n\n/*-- scss:rules --*/---\ntitle: \"Penguins Reports\"\nformat:\n  revealjs: \n    theme: theme.scss\n---/*-- scss:defaults --*/\n$presentation-heading-color: red;\n$presentation-h1-font-size: 150px;\n\n/*-- scss:rules --*/\n.center-slide {\n  text-align: center;\n}"},{"path":"quarto-chapter.html","id":"making-websites","chapter":"10 Reproducible Reporting with Quarto","heading":"Making Websites","text":"Quarto can make websites without requiring use external package like distill. create Quarto website, go File > New Project. Select New Directory, Quarto website. ’ll prompted choose directory place project. Keep default engine (Knitr), check Create git repository (show ’ve already installed git). leave everything else unchecked. screen look like Figure 10.7.\nFigure 10.7: RStudio menu create Quarto website\nClick Create Project, create series files: index.qmd, .qmd, *_quarto.yml, styles.css. files resemble created distill package. .qmd files ’ll add content, _quarto.yml* file ’ll set options entire website, styles.css file ’ll add CSS customize website’s appearance.","code":""},{"path":"quarto-chapter.html","id":"building-the-website","chapter":"10 Reproducible Reporting with Quarto","heading":"Building the Website","text":"Let’s start modifying .qmd files. Open home page file, index.qmd, delete default content YAML replace content website made Chapter 9. Remove layout = \"l-page\" element, used widen layout. ’ll discuss change page’s layout Quarto later section:render Quarto website, look Build tab top right RStudio click Render Website. rendered website now appear Viewer pane bottom-right panel RStudio. navigate Files pane panel, also see _site folder created hold content rendered site. Try opening index.html file web browser. see website Figure 10.8.\nFigure 10.8: Quarto website warnings messages\ncan see, web page includes many warnings messages don’t want show. R Markdown, removed setup code chunk; Quarto, can YAML. Add following code index.qmd YAML remove code, warnings, messages output:Note, however, options make changes one file. Next, discuss set options entire website.","code":"```{r}\n# Load packages\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(tigris)\nlibrary(gt)\nlibrary(lubridate)\nlibrary(reactable)\n```\n\n```{r}\n# Import data\n\nus_states <- states(\n  cb = TRUE,\n  resolution = \"20m\",\n  progress_bar = FALSE\n) %>%\n  shift_geometry() %>%\n  clean_names() %>%\n  select(geoid, name) %>%\n  rename(state = name) %>%\n  filter(state %in% state.name)\n\ncovid_data <- read_csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-states.csv\") %>%\n  filter(state %in% state.name) %>%\n  mutate(geoid = str_remove(geoid, \"USA-\"))\n\nmost_recent_day <- covid_data %>%\n  slice_max(\n    order_by = date,\n    n = 1\n  ) %>%\n  distinct(date) %>%\n  mutate(date_nice_format = str_glue(\"{month(date, label = TRUE, abbr = FALSE)} {day(date)}, {year(date)}\")) %>%\n  pull(date_nice_format)\n```\n\n# COVID Death Rates as of `r most_recent_day`\n\nThis table shows COVID death rates per 100,000 people in four states states.\n\n```{r}\n# Make table\n\ncovid_data %>%\n  slice_max(\n    order_by = date,\n    n = 1\n  ) %>%\n  select(state, deaths_avg_per_100k) %>%\n  arrange(state) %>%\n  set_names(\"State\", \"Death rate\") %>%\n  reactable()\n```\n\nWe can see this same death rate data for all states on a map.\n\n```{r}\n# Make map\n\nmost_recent <- us_states %>%\n  left_join(covid_data, by = \"state\") %>%\n  slice_max(\n    order_by = date,\n    n = 1\n  )\n\nmost_recent %>%\n  ggplot(aes(fill = deaths_avg_per_100k)) +\n  geom_sf() +\n  scale_fill_viridis_c(option = \"rocket\") +\n  labs(fill = \"Deaths per\\n100,000 people\") +\n  theme_void()\n```\n\n# COVID Death Rates Over Time\n\nThe following chart shows COVID death rates from the start of COVID in early 2020 until `r most_recent_day`.\n\n```{r}\n# Make chart\n\nlibrary(plotly)\n\ncovid_chart <- covid_data %>%\n  filter(state %in% c(\n    \"Alabama\",\n    \"Alaska\",\n    \"Arizona\",\n    \"Arkansas\"\n  )) %>%\n  ggplot(aes(\n    x = date,\n    y = deaths_avg_per_100k,\n    group = state,\n    fill = deaths_avg_per_100k\n  )) +\n  geom_col() +\n  scale_fill_viridis_c(option = \"rocket\") +\n  theme_minimal() +\n  labs(title = \"Deaths per 100,000 people over time\") +\n  theme(\n    legend.position = \"none\",\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_blank(),\n    axis.title = element_blank()\n  ) +\n  facet_wrap(\n    ~state,\n    nrow = 2\n  )\n\n\nggplotly(covid_chart)\n```execute: \n  echo: false\n  warning: false\n  message: false"},{"path":"quarto-chapter.html","id":"setting-options-for-the-website","chapter":"10 Reproducible Reporting with Quarto","heading":"Setting Options for the Website","text":"using distill, modified *_site.yml* file make changes files website. Quarto, use *_quarto.yml* file purpose. open , see three sections:top section sets project type (case, website). middle section defines website’s title determines options navigation bar. bottom section modifies site’s appearance.Let’s start bottom. remove code, warnings, messages pages website, add portion YAML created _quarto.yml file. bottom section now look like :build website , now see just content, Figure 10.9.\nFigure 10.9: website warnings messages removed\nsection *_quarto.yml* file, can add options otherwise place single .qmd file apply across pages website.","code":"project:\n  type: website\n\nwebsite:\n  title: \"covid-website-quarto\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: trueformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\nexecute: \n  echo: false\n  warning: false\n  message: false"},{"path":"quarto-chapter.html","id":"changing-the-appearance-of-the-website-with-themes-and-css","chapter":"10 Reproducible Reporting with Quarto","heading":"Changing the Appearance of the Website with Themes and CSS","text":"format section *_quarto.yml* file determines appearance rendered files. default, Quarto applies theme called cosmo, many themes available. (can see full list https://quarto.org/docs/output-formats/html-themes.html.) Let’s apply different theme see affects output:Using minty theme changes colors fonts website, shown Figure 10.10.\nFigure 10.10: website minty theme\naddition using pre-built themes, can customize website CSS. css: styles.css section *_quarto.yml* file indicates Quarto use CSS styles.css file rendering. Try adding following CSS styles.css make first-level headers red 50 pixels large:re-rendered index.html, shown Figure 10.11, now large red headings.\nFigure 10.11: website custom CSS applied\nalternative approach customizing website use Sass variables .scss file, presentation. example, create file called styles.scss add line like one make body background bright yellow:get Quarto use styles.scss file, adjust theme line follows:syntax tells Quarto use minty theme, make additional tweaks based styles.scss file. render website , see bright yellow background throughout (Figure 10.12).\nFigure 10.12: website custom CSS applied styles.scss\nNote add .scss file, tweaks made styles.css longer apply. wanted use , ’d need add styles.scss file.line toc: true creates table contents right side web pages can see previous screenshots. can remove changing true false. Add additional options, figure height, bottom section *_quarto.yml* file.","code":"format:\n  html:\n    theme: minty\n    css: styles.css\n    toc: trueh1 {\n    color: red;\n  font-size: 50px;\n}/*-- scss:defaults --*/\n$body-bg: yellow;format:\n  html:\n        theme: [minty, styles.scss]\n    css: styles.css\n    toc: true"},{"path":"quarto-chapter.html","id":"adjusting-the-website-title-and-navigation-bar","chapter":"10 Reproducible Reporting with Quarto","heading":"Adjusting the Website Title and Navigation Bar","text":"middle section *_quarto.yml* file sets website’s title navigation. , change title text page link:Changing title requires adjusting title line. navbar section functions nearly identically working distill. href line lists files navigation bar link . optional text line specifies text show link. Figure 10.13 shows changes applied website.\nFigure 10.13: website changes navigation bar\ntitle home page still covid-website-quarto, change index.qmd file.","code":"website:\n  title: \"Quarto COVID Website\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - href: about.qmd\n        text: About this Website"},{"path":"quarto-chapter.html","id":"creating-wider-layouts","chapter":"10 Reproducible Reporting with Quarto","heading":"Creating Wider Layouts","text":"made website distill, used line layout = \"l-page\" widen map web page. can accomplish thing Quarto using ::: syntax add HTML <div> tags:add :::{.column-screen-inset} beginning code chunk makes map ::: end code chunk. also add line #| -width: 100% code chunk. need specify map take available width. Without line, map take portion window. number different output widths can use. full list available https://quarto.org/docs/authoring/article-layout.html.","code":":::{.column-screen-inset}\n```{r}\n#| out-width: 100%\n# Make map\n\nmost_recent <- us_states %>%\n  left_join(covid_data, by = \"state\") %>%\n  slice_max(\n    order_by = date,\n    n = 1\n  )\n\nmost_recent %>%\n  ggplot(aes(fill = deaths_avg_per_100k)) +\n  geom_sf() +\n  scale_fill_viridis_c(option = \"rocket\") +\n  labs(fill = \"Deaths per\\n100,000 people\") +\n  theme_void()\n```\n:::"},{"path":"quarto-chapter.html","id":"hosting-your-website-on-github-pages-and-quarto-pub","chapter":"10 Reproducible Reporting with Quarto","heading":"Hosting Your Website on GitHub Pages and Quarto Pub","text":"can host Quarto website using GitHub Pages, just distill website. Recall GitHub Pages requires save website’s files docs folder. Change *_quarto.yml* file site outputs folder:Now, render site, HTML files show docs directory. point, can push repository GitHub, adjust GitHub Pages settings Chapter 9, receive URL Quarto website live.addition using GitHub Pages, Quarto free service called Quarto Pub makes easy get materials online. ’re GitHub user, great way publish work. see works, let’s publish website just made . Click Terminal tab bottom-left panel RStudio. prompt, enter text quarto publish hit Enter. bring list ways can publish website, Figure 10.14.\nFigure 10.14: list providers publish Quarto website\nPress Enter select Quarto Pub. ’ll asked authorize RStudio publish Quarto Pub. Enter Y , take https://quartopub.com/. Sign account (sign already one). see screen indicating successfully signed authorized RStudio connect Quarto Pub. , can return RStudio, prompt select name website. easiest thing use project’s name. enter name, Quarto Pub publish site take , shown Figure 10.15.\nFigure 10.15: website published Quarto Pub\nmake updates site, can republish Quarto Pub using steps. Quarto Pub probably easiest way publish HTML files made Quarto.","code":"project:\n  type: website\n  output-dir: docs"},{"path":"quarto-chapter.html","id":"conclusion-6","chapter":"10 Reproducible Reporting with Quarto","heading":"Conclusion","text":"’ve seen chapter, can everything R Markdown using Quarto without loading external packages. addition, Quarto’s different output formats use consistent syntax. example, can make new slides Quarto adding first- second-level headers, Quarto documents use create reports translate easily presentations.’re probably wondering point whether use R Markdown Quarto. ’s big question, one many R community thinking . first thing know R Markdown isn’t going away, already use R Markdown, don’t need switch. ’re new R, however, may good candidate Quarto, R Markdown team promised continue development, future features may backported R Markdown.Ultimately, differences R Markdown Quarto relatively small, impact switching tools minor. R Markdown Quarto can help become efficient, avoid manual errors, share results wide variety formats.","code":""},{"path":"quarto-chapter.html","id":"learn-more-9","chapter":"10 Reproducible Reporting with Quarto","heading":"Learn More","text":"Consult following resources learn fundamentals Quarto:Get Started Quarto, workshop materials Tom Mock (2022), https://jthomasmock.github.io/quarto--two-hours/R Markdown Quarto, workshop materials Andrew Bray, Rebecca Barter, Silvia Canelón, Christophe Dervieu, Devin Pastor, Tatsu Shigeta (2022), https://rstudio-conf-2022.github.io/rmd--quarto/","code":""},{"path":"accessing-data-chapter.html","id":"accessing-data-chapter","chapter":"11 Accessing Data","heading":"11 Accessing Data","text":"far, ’ve imported data projects CSV files. Many online datasets allow export data CSV, , look packages automate data access. can eliminate manual steps involved fetching data, analysis reporting accurate. ’ll also able efficiently update report data changes.R offers many ways automate process accessing online data. chapter, ’ll discuss two approaches: using googlesheets4 package fetch data directly Google Sheets using tidycensus package access data United States Census Bureau. ’ll learn connect R Markdown project Google can automatically download data Google Sheet updates. ’ll explore working two large census datasets, Decennial Census American Community Survey, practice visualizing .","code":""},{"path":"accessing-data-chapter.html","id":"importing-data-from-google-sheets-with-googlesheets4","chapter":"11 Accessing Data","heading":"Importing Data from Google Sheets with googlesheets4","text":"using googlesheets4 package access data directly Google Sheets, can avoid manually download data, copy project, adjust code imports new data time want update report. package lets write code automatically fetches new data directly Google Sheets. Whenever need update report, can simply run code refresh data. addition, work Google Forms, can pipe data Google Sheets, completely automating workflow data collection data import.Using package can help manage complex datasets update frequently. example, role Primary Care Research Institute University Buffalo, Megan Harris used research project people affected opioid use disorder. data came variety surveys, fed jumble Google Sheets. Using googlesheets4, able bring data one place use R put use. Data largely unused accessing complicated came inform research opioid use disorder.section demonstrates googlesheets4 package works using fake dataset video game preferences Harris created replace opioid survey data (, obvious reasons, confidential).","code":""},{"path":"accessing-data-chapter.html","id":"connecting-to-google","chapter":"11 Accessing Data","heading":"Connecting to Google","text":"Begin installing googlesheets4 package running install.packages(\"googlesheets4\"). Next, ’ll need connect Google account. , run gs4_auth() function console. one Google account, select account access Google Sheet want work . , see screen looks like Figure 11.1.\nFigure 11.1: screen asking authorization access Google Sheets data\nCheck box next See, edit, create, delete Google Sheets spreadsheets. ensure R able access data Google Sheets account. Hit Continue, ’ll given message Authentication complete. Please close page return R. googlesheets4 package now save credentials can use future without reauthenticate.","code":""},{"path":"accessing-data-chapter.html","id":"reading-data-from-a-sheet","chapter":"11 Accessing Data","heading":"Reading Data from a Sheet","text":"Now ’ve connected R Google account, can import data. ’ll import fake data Meghan Harris created video game preferences (can access https://data.rwithoutstatistics.com/google-sheet). Figure 11.2 shows looks like Google Sheets.\nFigure 11.2: video game data Google Sheets\ngooglesheets4 package function called read_sheet() allows pull data directly Google Sheet. Import data passing spreadsheet’s URL function:Take look survey_data_raw object confirm data imported. Using glimpse() function dplyr package can make easier read:glimpse() function, creates one output row per variable, shows ’ve indeed imported data directly Google Sheets:data R, can use workflow always creating reports R Markdown.","code":"\nlibrary(googlesheets4)\n\nsurvey_data_raw <- read_sheet(\"https://docs.google.com/spreadsheets/d/1AR0_RcFBg8wdiY4Cj-k8vRypp_txh27MyZuiRdqScog/edit?usp=sharing\")\nlibrary(tidyverse)\n\nsurvey_data_raw %>%\n  glimpse()#> Rows: 5\n#> Columns: 5\n#> $ Timestamp                         <dttm> 2022-05-16 15:2…\n#> $ `How old are you?`                <chr> \"25-34\", \"45-54\"…\n#> $ `Do you like to play video games` <chr> \"Yes\", \"No\", \"Ye…\n#> $ `What kind of games do you like?` <chr> \"Sandbox, Role-P…\n#> $ `What's your favorite game?`      <chr> \"It's hard to ch…"},{"path":"accessing-data-chapter.html","id":"using-the-data-in-r-markdown","chapter":"11 Accessing Data","heading":"Using the Data in R Markdown","text":"following code taken R Markdown report Meghan Harris made summarize video games data. can see YAML, setup code chunk, code chunk loads packages, code import data Google Sheets:R Markdown document resembles discussed previous chapters except way ’re importing data. ’re bringing directly Google Sheets, ’s risk , say, accidentally reading wrong CSV. Automating step reduces risk error.next code chunk cleans survey_data_raw object, saving result survey_data_clean:, use clean_names() function janitor package make variable names easier work . add participant_id variable using row_number() function, adds consecutively increasing number row. (also make character using .character() function.) Next, change several variable names rename() finally using mutate() make age variable data structure known factor; make sure age variable shows right order charts. use relocate() put participant_id age variable. can now take look survey_data_clean data frame using glimpse() function :rest report uses data highlight variety statistics:sections calculate number survey respondents, put text using inline R code; create table shows respondents broken age group; generate graph shows many respondents like video games. Figure 11.3 shows resulting report.\nFigure 11.3: rendered video game report\ncan re-run code point bring updated data. survey five responses today, run tomorrow additional responses, included import. used Google Forms run survey saved results Google Sheet, produce --date report simply clicking Knit button RStudio.","code":"---\ntitle: \"Video Game Survey\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  echo = FALSE,\n  warning = FALSE,\n  message = FALSE\n)\n```\n\n```{r}\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(googlesheets4)\nlibrary(gt)\n```\n\n```{r}\n# Import data from Google Sheets\nsurvey_data_raw <- read_sheet(\"https://docs.google.com/spreadsheets/d/1AR0_RcFBg8wdiY4Cj-k8vRypp_txh27MyZuiRdqScog/edit?usp=sharing\")\n``````{r}\n# Clean data\nsurvey_data_clean <- survey_data_raw %>%\n  clean_names() %>%\n  mutate(participant_id = as.character(row_number())) %>%\n  rename(\n    age = how_old_are_you,\n    like_games = do_you_like_to_play_video_games,\n    game_types = what_kind_of_games_do_you_like,\n    favorite_game = whats_your_favorite_game\n  ) %>%\n  relocate(participant_id, .before = age) %>%\n  mutate(age = factor(age, levels = c(\"Under 18\", \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"Over 65\")))\n```#> Rows: 5\n#> Columns: 6\n#> $ timestamp      <dttm> 2022-05-16 15:20:50, 2022-05-16 15…\n#> $ participant_id <chr> \"1\", \"2\", \"3\", \"4\", \"5\"\n#> $ age            <fct> 25-34, 45-54, Under 18, Over 65, Un…\n#> $ like_games     <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\"\n#> $ game_types     <chr> \"Sandbox, Role-Playing (RPG), Simul…\n#> $ favorite_game  <chr> \"It's hard to choose. House Flipper…# Respondent Demographics\n\n```{r}\n# Calculate number of respondents\nnumber_of_respondents <- nrow(survey_data_clean)\n```\n\nWe received responses from `r number_of_respondents` respondents. Their ages are below.\n\n```{r}\nsurvey_data_clean %>%\n  select(participant_id, age) %>%\n  gt() %>%\n  cols_label(\n    participant_id = \"Participant ID\",\n    age = \"Age\"\n  ) %>%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels()\n  ) %>%\n  cols_align(\n    align = \"left\",\n    columns = everything()\n  ) %>%\n  cols_width(\n    participant_id ~ px(200),\n    age ~ px(700)\n  )\n```\n\n# Video Games\n\nWe asked if respondents liked video games. Their responses are below.\n\n```{r}\nsurvey_data_clean %>%\n  count(like_games) %>%\n  ggplot(aes(\n    x = like_games,\n    y = n,\n    fill = like_games\n  )) +\n  geom_col() +\n  scale_fill_manual(values = c(\n    \"No\" = \"#6cabdd\",\n    \"Yes\" = \"#ff7400\"\n  )) +\n  labs(\n    title = \"How Many People Like Video Games?\",\n    x = NULL,\n    y = \"Number of Participants\"\n  ) +\n  theme_minimal(base_size = 16) +\n  theme(\n    legend.position = \"none\",\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    axis.title.y = element_blank(),\n    plot.title = element_text(\n      face = \"bold\",\n      hjust = 0.5\n    )\n  )\n```"},{"path":"accessing-data-chapter.html","id":"importing-only-certain-columns","chapter":"11 Accessing Data","heading":"Importing Only Certain Columns","text":"previous sections, read data entire Google Sheet. , however, possible import section Sheet. example, survey data imported includes timestamp column. variable added automatically whenever someone submits Google Form pipes data Google Sheet, don’t use analysis, get rid ., use range argument read_sheet() function importing data. argument lets us specify range data bring. uses syntax may used select columns Google Sheets. example, use range = \"Sheet1!B:E\" import columns B E (, contains timestamp) adding glimpse().Running code produces output without timestamp variable:number functions googlesheets4 package can use. example, ever need write output back Google Sheet, write_sheet() function help. explore functions package, check documentation website https://googlesheets4.tidyverse.org/index.html.","code":"\nread_sheet(\n  \"https://docs.google.com/spreadsheets/d/1AR0_RcFBg8wdiY4Cj-k8vRypp_txh27MyZuiRdqScog/edit?usp=sharing\",\n  range = \"Sheet1!B:E\"\n) %>%\n  glimpse()#> Rows: 5\n#> Columns: 4\n#> $ `How old are you?`                <chr> \"25-34\", \"45-54\"…\n#> $ `Do you like to play video games` <chr> \"Yes\", \"No\", \"Ye…\n#> $ `What kind of games do you like?` <chr> \"Sandbox, Role-P…\n#> $ `What's your favorite game?`      <chr> \"It's hard to ch…"},{"path":"accessing-data-chapter.html","id":"accessing-census-data-with-tidycensus","chapter":"11 Accessing Data","heading":"Accessing Census Data with tidycensus","text":"’ve ever worked data United States Census Bureau, know hassle can . Usually, process involves visiting Census Bureau website, searching website data need, downloading , analyzing tool choice. pointing clicking gets tedious time.Kyle Walker, geographer Texas Christian University, Matt Herman (creator Westchester COVID-19 website discussed Chapter 9) developed package automate process bringing Census Bureau data R: tidycensus package. tidycensus, user can write just lines code get data , say, median income counties United States.section shows tidycensus package works using examples two datasets provides access: Decennial Census administered every 10 years annual American Community Survey. ’ll also show use data two sources perform additional analysis make maps accessing geospatial demographic data simultaneously.","code":""},{"path":"accessing-data-chapter.html","id":"connecting-to-the-census-bureau-with-an-api-key","chapter":"11 Accessing Data","heading":"Connecting to the Census Bureau with an API Key","text":"Begin installing tidycensus using install.packages(\"tidycensus\"). use tidycensus, must get application programming interface (API) key Census Bureau. API keys like passwords allow online services determine whether authorized access data.can obtain key, free, going https://api.census.gov/data/key_signup.html entering details. receive key email, need put place tidycensus can find . census_api_key() function , loading tidycensus package, run function follows, replacing 123456789 actual API key:install = TRUE argument save API key .Renviron file, designed storing confidential information like API keys. package look API key future don’t reenter every time use package.Now can use tidycensus access data. common Decennial Census American Community Survey. can find discussion datasets can access Chapter 2 Kyle Walker’s book Analyzing US Census Data: Methods, Maps, Models R.","code":"\nlibrary(tidycensus)\n\ncensus_api_key(\"123456789\", install = TRUE)"},{"path":"accessing-data-chapter.html","id":"working-with-decennial-census-data","chapter":"11 Accessing Data","heading":"Working with Decennial Census Data","text":"Census Bureau puts many datasets, several can access using dedicated tidycensus functions. Let’s access data 2020 Decennial Census Asian population state using get_decennial() function three arguments:geography argument tells get_decennial() access data state level. addition 50 states, return District Columbia Puerto Rico. many geographies, including county, census tract, . variables argument specifies variable variables want access. , P2_002N variable name total Asian population. ’ll discuss identify variables may want use next section. Lastly, year specifies year want access data. ’re using data 2020 Census.Running code returns following:resulting data frame four variables. GEOID geographic identifier given Census Bureau state. state geographic identifier, counties, census tracts, geographies. NAME name state, variable name variable passed get_decennial() function. Lastly, value numeric value state variable row. case, represents total Asian population state.","code":"\nget_decennial(\n  geography = \"state\",\n  variables = \"P1_006N\",\n  year = 2020\n)#> # A tibble: 52 × 4\n#>    GEOID NAME                 variable   value\n#>    <chr> <chr>                <chr>      <dbl>\n#>  1 42    Pennsylvania         P1_006N   510501\n#>  2 06    California           P1_006N  6085947\n#>  3 54    West Virginia        P1_006N    15109\n#>  4 49    Utah                 P1_006N    80438\n#>  5 36    New York             P1_006N  1933127\n#>  6 11    District of Columbia P1_006N    33545\n#>  7 02    Alaska               P1_006N    44032\n#>  8 12    Florida              P1_006N   643682\n#>  9 45    South Carolina       P1_006N    90466\n#> 10 38    North Dakota         P1_006N    13213\n#> # ℹ 42 more rows"},{"path":"accessing-data-chapter.html","id":"identifying-census-variable-values","chapter":"11 Accessing Data","heading":"Identifying Census Variable Values","text":"pass specific variable get_decennial(), first look . Let’s say want calculate Asian population percentage people state. , ’d first need retrieve variable state’s total population.tidycensus package function called load_variables() shows variables Decennial Census. Run year argument set 2020 dataset set pl. pull data -called redistricting summary data files, public law 94-171 requires census produce every 10 years:Running code returns name, label (description), concept (category) variables available us:looking list, can see variable P1_001N gives us total population.","code":"\nload_variables(\n  year = 2020,\n  dataset = \"pl\"\n)#> # A tibble: 301 × 3\n#>    name    label                                     concept\n#>    <chr>   <chr>                                     <chr>  \n#>  1 H1_001N \" !!Total:\"                               OCCUPA…\n#>  2 H1_002N \" !!Total:!!Occupied\"                     OCCUPA…\n#>  3 H1_003N \" !!Total:!!Vacant\"                       OCCUPA…\n#>  4 P1_001N \" !!Total:\"                               RACE   \n#>  5 P1_002N \" !!Total:!!Population of one race:\"      RACE   \n#>  6 P1_003N \" !!Total:!!Population of one race:!!Whi… RACE   \n#>  7 P1_004N \" !!Total:!!Population of one race:!!Bla… RACE   \n#>  8 P1_005N \" !!Total:!!Population of one race:!!Ame… RACE   \n#>  9 P1_006N \" !!Total:!!Population of one race:!!Asi… RACE   \n#> 10 P1_007N \" !!Total:!!Population of one race:!!Nat… RACE   \n#> # ℹ 291 more rows"},{"path":"accessing-data-chapter.html","id":"using-multiple-census-variables","chapter":"11 Accessing Data","heading":"Using Multiple Census Variables","text":"Now know variables need, can use get_decennial() function two variables :add arrange(NAME) get_decennial() results sorted state name, allowing us see variables state:’re working multiple census variables, however, might trouble remembering names like P1_001N P1_006N mean. Fortunately, can adjust code call get_decennial() give variables meaningful names using following syntax:Within variables argument, give name want variables , followed equal sign original variable name. can rename multiple variables putting within c() function, ’ve done . now much easier see variables ’re working :Instead P1_001N P1_006N, total_population asian_population. Much better!","code":"\nget_decennial(\n  geography = \"state\",\n  variables = c(\"P1_001N\", \"P1_006N\"),\n  year = 2020\n) %>%\n  arrange(NAME)#> # A tibble: 104 × 4\n#>    GEOID NAME       variable    value\n#>    <chr> <chr>      <chr>       <dbl>\n#>  1 01    Alabama    P1_001N   5024279\n#>  2 01    Alabama    P1_006N     76660\n#>  3 02    Alaska     P1_001N    733391\n#>  4 02    Alaska     P1_006N     44032\n#>  5 04    Arizona    P1_001N   7151502\n#>  6 04    Arizona    P1_006N    257430\n#>  7 05    Arkansas   P1_001N   3011524\n#>  8 05    Arkansas   P1_006N     51839\n#>  9 06    California P1_001N  39538223\n#> 10 06    California P1_006N   6085947\n#> # ℹ 94 more rows\nget_decennial(\n  geography = \"state\",\n  variables = c(\n    total_population = \"P1_001N\",\n    asian_population = \"P1_006N\"\n  ),\n  year = 2020\n) %>%\n  arrange(NAME)#> # A tibble: 104 × 4\n#>    GEOID NAME       variable            value\n#>    <chr> <chr>      <chr>               <dbl>\n#>  1 01    Alabama    total_population  5024279\n#>  2 01    Alabama    asian_population    76660\n#>  3 02    Alaska     total_population   733391\n#>  4 02    Alaska     asian_population    44032\n#>  5 04    Arizona    total_population  7151502\n#>  6 04    Arizona    asian_population   257430\n#>  7 05    Arkansas   total_population  3011524\n#>  8 05    Arkansas   asian_population    51839\n#>  9 06    California total_population 39538223\n#> 10 06    California asian_population  6085947\n#> # ℹ 94 more rows"},{"path":"accessing-data-chapter.html","id":"analyzing-census-data","chapter":"11 Accessing Data","heading":"Analyzing Census Data","text":"Now data need calculate Asian population state percentage total. , add things code previous section:use group_by(NAME) create one group state want calculate Asian population percentage state (entire United States). use mutate() calculate percentage, taking value row dividing total_population asian_population rows state. use ungroup() remove state-level grouping. use filter() show Asian population percentage.run code, see Asian population Asian population percentage total population state:one way calculate Asian population percentage total population state, ’s way.","code":"\nget_decennial(\n  geography = \"state\",\n  variables = c(\n    total_population = \"P1_001N\",\n    asian_population = \"P1_006N\"\n  ),\n  year = 2020\n) %>%\n  arrange(NAME) %>%\n  group_by(NAME) %>%\n  mutate(pct = value / sum(value)) %>%\n  ungroup() %>%\n  filter(variable == \"asian_population\")#> # A tibble: 52 × 5\n#>    GEOID NAME                 variable        value      pct\n#>    <chr> <chr>                <chr>           <dbl>    <dbl>\n#>  1 01    Alabama              asian_popula…   76660 0.015029\n#>  2 02    Alaska               asian_popula…   44032 0.056638\n#>  3 04    Arizona              asian_popula…  257430 0.034746\n#>  4 05    Arkansas             asian_popula…   51839 0.016922\n#>  5 06    California           asian_popula… 6085947 0.13339 \n#>  6 08    Colorado             asian_popula…  199827 0.033452\n#>  7 09    Connecticut          asian_popula…  172455 0.045642\n#>  8 10    Delaware             asian_popula…   42699 0.041349\n#>  9 11    District of Columbia asian_popula…   33545 0.046391\n#> 10 12    Florida              asian_popula…  643682 0.029018\n#> # ℹ 42 more rows"},{"path":"accessing-data-chapter.html","id":"using-a-summary-variable","chapter":"11 Accessing Data","heading":"Using a Summary Variable","text":"Kyle Walker knew calculating summaries like ’ve just done common use case tidycensus. calculate, say, Asian population percentage whole, need numerator (Asian population) denominator (total population). , simplify things, gives us summary_var argument can use within get_decennial() import total population separate variable. Instead putting P1_001N (total population) variables argument, can use summary_var argument follows.returns nearly identical data frame got earlier, except total population now separate variable, rather additional rows state:data new format, can calculate Asian population percentage whole dividing value variable summary_value variable. drop summary_value variable longer need calculation:resulting output identical output previous section:choose calculate summary statistics ; tidycensus makes easy either way.","code":"\nget_decennial(\n  geography = \"state\",\n  variables = c(asian_population = \"P1_006N\"),\n  summary_var = \"P1_001N\",\n  year = 2020\n) %>%\n  arrange(NAME)#> # A tibble: 52 × 5\n#>    GEOID NAME                 variable   value summary_value\n#>    <chr> <chr>                <chr>      <dbl>         <dbl>\n#>  1 01    Alabama              asian_p…   76660       5024279\n#>  2 02    Alaska               asian_p…   44032        733391\n#>  3 04    Arizona              asian_p…  257430       7151502\n#>  4 05    Arkansas             asian_p…   51839       3011524\n#>  5 06    California           asian_p… 6085947      39538223\n#>  6 08    Colorado             asian_p…  199827       5773714\n#>  7 09    Connecticut          asian_p…  172455       3605944\n#>  8 10    Delaware             asian_p…   42699        989948\n#>  9 11    District of Columbia asian_p…   33545        689545\n#> 10 12    Florida              asian_p…  643682      21538187\n#> # ℹ 42 more rows\nget_decennial(\n  geography = \"state\",\n  variables = c(asian_population = \"P1_006N\"),\n  summary_var = \"P1_001N\",\n  year = 2020\n) %>%\n  arrange(NAME) %>%\n  mutate(pct = value / summary_value) %>%\n  select(-summary_value)#> # A tibble: 52 × 6\n#>    GEOID NAME        variable   value summary_value      pct\n#>    <chr> <chr>       <chr>      <dbl>         <dbl>    <dbl>\n#>  1 01    Alabama     asian_p…   76660       5024279 0.015258\n#>  2 02    Alaska      asian_p…   44032        733391 0.060039\n#>  3 04    Arizona     asian_p…  257430       7151502 0.035997\n#>  4 05    Arkansas    asian_p…   51839       3011524 0.017214\n#>  5 06    California  asian_p… 6085947      39538223 0.15393 \n#>  6 08    Colorado    asian_p…  199827       5773714 0.034610\n#>  7 09    Connecticut asian_p…  172455       3605944 0.047825\n#>  8 10    Delaware    asian_p…   42699        989948 0.043133\n#>  9 11    District o… asian_p…   33545        689545 0.048648\n#> 10 12    Florida     asian_p…  643682      21538187 0.029886\n#> # ℹ 42 more rows"},{"path":"accessing-data-chapter.html","id":"visualizing-american-community-survey-data","chapter":"11 Accessing Data","heading":"Visualizing American Community Survey Data","text":"’ve accessed data using tidycensus package, can whatever want . Let’s practice analyzing visualizing survey data using American Community Survey. survey, conducted every year, differs decennial Census two major ways: given sample people rather entire population, includes wider range questions.Despite differences, can access data American Community Survey manner nearly identical access Decennial Census data. Instead get_decennial(), use function get_acs(), arguments pass functions . following example, ’ve identified variable ’m interested (B01002_001, shows median age) use get data state:output looks like:notice two differences output get_acs() compared get_decennial(). First, instead value column, get_acs() produces column called estimate. also produces additional column called moe, margin error. see changes American Community Survey given sample population. result, must extrapolate values sample population whole, estimate comes margin error.state-level data, margins error relatively low, get data smaller geographies, tend higher. cases margins error high relative estimates, interpret results caution, greater uncertainty well data represents population whole.","code":"\nget_acs(\n  geography = \"state\",\n  variables = \"B01002_001\",\n  year = 2020\n)#> # A tibble: 52 × 5\n#>    GEOID NAME                 variable   estimate   moe\n#>    <chr> <chr>                <chr>         <dbl> <dbl>\n#>  1 01    Alabama              B01002_001     39.2   0.1\n#>  2 02    Alaska               B01002_001     34.6   0.2\n#>  3 04    Arizona              B01002_001     37.9   0.2\n#>  4 05    Arkansas             B01002_001     38.3   0.2\n#>  5 06    California           B01002_001     36.7   0.1\n#>  6 08    Colorado             B01002_001     36.9   0.1\n#>  7 09    Connecticut          B01002_001     41.1   0.2\n#>  8 10    Delaware             B01002_001     41     0.2\n#>  9 11    District of Columbia B01002_001     34.1   0.1\n#> 10 12    Florida              B01002_001     42.2   0.2\n#> # ℹ 42 more rows"},{"path":"accessing-data-chapter.html","id":"making-charts","chapter":"11 Accessing Data","heading":"Making Charts","text":"take data median age pipe ggplot create bar chart:import data get_acs() function pipe directly ggplot. put states (use variable NAME) y axis median age (estimate) x axis. simple geom_col() creates bar chart, shown Figure 11.4.\nFigure 11.4: bar chart showing median age state\nchart nothing special, fact takes just six lines code create definitely .","code":"\nget_acs(\n  geography = \"state\",\n  variables = \"B01002_001\",\n  year = 2020\n) %>%\n  ggplot(aes(\n    x = estimate,\n    y = NAME\n  )) +\n  geom_col()"},{"path":"accessing-data-chapter.html","id":"making-population-maps-with-the-geometry-argument","chapter":"11 Accessing Data","heading":"Making Population Maps with the geometry Argument","text":"Kyle Walker, creator tidycensus, also created tigris package working geospatial data. result, packages tightly integrated. Within get_acs() function, can set geometry argument TRUE receive demographic data Census Bureau geospatial data tigris:take look resulting data, can see metadata geometry column simple features objects saw Chapter 4.can see geometry type MULTIPOLYGON, learned Chapter 4. can pipe data ggplot make map following code:, import data get_acs() function piping ggplot() function. set estimate variable use fill aesthetic property; , fill color state vary depending median age residents. use geom_sf() draw map. scale_fill_viridis_c() function gives us colorblind-friendly palette.resulting map, seen Figure 11.5, less ideal Aleutian Islands Alaska cross 180-degree line longitude, also known international date line. result, Alaska appears one side map small part appears side. ’s , Hawaii Puerto Rico hard see.\nFigure 11.5: hard--read map showing median age state\nfix problems, load tigris package, use shift_geometry() function move Alaska, Hawaii, Puerto Rico places ’ll easily visible:set preserve_area argument FALSE shrink giant state Alaska make Hawaii Puerto Rico larger. Although state sizes map won’t precise, map easier read, can see Figure 11.6.\nFigure 11.6: easier--read map showing median age state\n’ve made map shows median age state. exercise, try making map 3,000 counties changing geography argument \"county\". geographies include region, tract (census tracts), place (census-designated places, commonly known towns cities), congressional district, . Chapter 2 Kyle Walker’s book Analyzing US Census Data: Methods, Maps, Models R discusses various geographies available. also many arguments get_decennial() get_acs() functions. ’ve shown common. want learn , Walker’s book great resource.","code":"\nget_acs(\n  geography = \"state\",\n  variables = \"B01002_001\",\n  year = 2020,\n  geometry = TRUE\n)#> Simple feature collection with 52 features and 5 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: -179.1467 ymin: 17.88328 xmax: 179.7785 ymax: 71.38782\n#> Geodetic CRS:  NAD83\n#> First 10 features:\n#>    GEOID         NAME   variable estimate moe\n#> 1     35   New Mexico B01002_001     38.1 0.1\n#> 2     46 South Dakota B01002_001     37.2 0.2\n#> 3     06   California B01002_001     36.7 0.1\n#> 4     21     Kentucky B01002_001     39.0 0.1\n#> 5     01      Alabama B01002_001     39.2 0.1\n#> 6     13      Georgia B01002_001     36.9 0.1\n#> 7     05     Arkansas B01002_001     38.3 0.2\n#> 8     42 Pennsylvania B01002_001     40.9 0.2\n#> 9     29     Missouri B01002_001     38.7 0.2\n#> 10    08     Colorado B01002_001     36.9 0.1\n#>                          geometry\n#> 1  MULTIPOLYGON (((-109.0502 3...\n#> 2  MULTIPOLYGON (((-104.0579 4...\n#> 3  MULTIPOLYGON (((-118.6044 3...\n#> 4  MULTIPOLYGON (((-89.41728 3...\n#> 5  MULTIPOLYGON (((-88.05338 3...\n#> 6  MULTIPOLYGON (((-81.27939 3...\n#> 7  MULTIPOLYGON (((-94.61792 3...\n#> 8  MULTIPOLYGON (((-80.51989 4...\n#> 9  MULTIPOLYGON (((-95.77355 4...\n#> 10 MULTIPOLYGON (((-109.0603 3...\nget_acs(\n  geography = \"state\",\n  variables = \"B01002_001\",\n  year = 2020,\n  geometry = TRUE\n) %>%\n  ggplot(aes(fill = estimate)) +\n  geom_sf() +\n  scale_fill_viridis_c()\nlibrary(tigris)\n\nget_acs(\n  geography = \"state\",\n  variables = \"B01002_001\",\n  year = 2020,\n  geometry = TRUE\n) %>%\n  shift_geometry(preserve_area = FALSE) %>%\n  ggplot(aes(fill = estimate)) +\n  geom_sf() +\n  scale_fill_viridis_c()"},{"path":"accessing-data-chapter.html","id":"packages-like-googlesheets4-and-tidycensus-make-it-easy-to-access-data","chapter":"11 Accessing Data","heading":"Packages like googlesheets4 and tidycensus Make it Easy to Access Data","text":"chapter explored two packages use APIs access data directly source. googlesheets4 package lets import data Google Sheet. ’s particularly useful ’re working survey data, makes easy update reports new results come . don’t work Sheets, use similar packages fetch data Excel365 (Microsoft365R), Qualtrics (qualtRics), Survey Monkey (surveymonkey), sources.work US census data, tidycensus package huge timesaver. Rather manually download data Census Bureau website, can use write R code accesses automatically, making ready analysis reporting. integration tigris, can also easily map demographic data.’re looking census data countries, Walker’s Analyzing US Census Data book gives examples packages can help. R packages bring census data Canada (cancensus), Kenya (rKenyaCensus), Mexico (mxmaps inegiR), Europe (eurostat), countries. hitting download button data collection tool choice, ’s worth looking package can import data directly R.","code":""},{"path":"packages-chapter.html","id":"packages-chapter","chapter":"12 Creating Your Own R Packages","heading":"12 Creating Your Own R Packages","text":"chapter discusses make R functions packages. ’ll learn define functions, including parameters accept. ’ll create package, add code dependencies , write documentation, choose license release .Saving code functions distributing functions packages can numerous benefits. First, packages make code easier others use. example, researchers Moffitt Cancer Center needed access code database, data scientists Travis Gerke Garrick Aden-Buie used write R code researcher, quickly realized reusing code . Instead, made package functions accessing databases. Now researchers longer ask help. install package Gerke Aden-Buie made use functions .’s , developing packages allows shape others work. Say make ggplot theme follows principles high-quality data visualization discussed Chapter 2. put theme package, can give others easy way follow principles. Functions packages can help work others using shared code.","code":""},{"path":"packages-chapter.html","id":"creating-your-own-functions","chapter":"12 Creating Your Own R Packages","heading":"Creating Your Own Functions","text":"Hadley Wickham, developer tidyverse set packages, recommends creating function ’ve copied code three times. Functions three pieces: name, body, arguments.","code":""},{"path":"packages-chapter.html","id":"writing-a-simple-function","chapter":"12 Creating Your Own R Packages","heading":"Writing a Simple Function","text":"Let’s begin taking example relatively simple function. function, called show_in_excel_penguins(), opens Excel data penguins used Chapter 6.first import data read_csv() function creating show_in_excel_penguins() function:load tidyverse fs packages. ’ll use tidyverse create filename CSV file save . fs package enable us open CSV file Excel (whichever program computer uses open CSV files default).give function name, use assignment operator (<-) function() specify show_in_excel_penguins variable name function name. open curly bracket ({) end line indicates start function body, meat function can found. case, body three things:Creates location CSV file saved using str_glue() function combined tempfile() function. creates file temporary location .csv extension saves csv_file.Creates location CSV file saved using str_glue() function combined tempfile() function. creates file temporary location .csv extension saves csv_file.Writes penguins location set csv_file. x argument write_csv() refers data frame saved. also make NA values show blanks. default, show text NA.Writes penguins location set csv_file. x argument write_csv() refers data frame saved. also make NA values show blanks. default, show text NA.Uses file_show() function fs package open temporarily created CSV file Excel.Uses file_show() function fs package open temporarily created CSV file Excel.wanted use show_in_excel_penguins() function, run lines define function highlighting lines hitting Command + Enter Mac Ctrl + Enter Windows. see function show global environment, shown Figure 12.1.\nFigure 12.1: function created global environment\nnow , time run code show_in_excel_penguins(), R open penguins data frame Excel.","code":"\nlibrary(tidyverse)\nlibrary(fs)\n\npenguins <- read_csv(\"https://data.rwithoutstatistics.com/penguins-2007.csv\")\n\nshow_in_excel_penguins <- function() {\n  csv_file <- str_glue(\"{tempfile()}.csv\")\n\n  write_csv(\n    x = penguins,\n    file = csv_file,\n    na = \"\"\n  )\n\n  file_show(path = csv_file)\n}"},{"path":"packages-chapter.html","id":"adding-arguments","chapter":"12 Creating Your Own R Packages","heading":"Adding Arguments","text":"Now, ’re probably thinking function wrote doesn’t seem useful. open penguins data frame. want keep ? practical function let open data Excel can use variety contexts.show_in_excel() function takes data frame R, saves CSV file, opens CSV file Excel. Bruno Rodrigues, head Department Statistics Data Strategy Ministry Higher Education Research Luxembourg, wrote easily share data non-R-user colleagues. Whenever needed data CSV file, run function.make function, need add arguments. slightly simplified version actual code Bruno Rodrigues used. looks show_in_excel_penguins() function, two exceptions:Notice first line now says function(data). Items listed within parentheses function definition arguments. look , ’ll see another change. Within write_csv(), instead x = penguins, now use line x = data. allows us use function data, just penguins.use function, tell show_in_excel() data use, function open data Excel. example, can tell open penguins data frame follows:created function data argument, can run data want . code, example, import COVID case data saw Chapter 9 open Excel:can also use function end pipeline. code filters covid_data data frame include data California opening Excel:Bruno Rodrigues copied code within show_in_excel() function re-run every time wanted view data Excel. , creating function, able write code just run many times necessary.","code":"\nshow_in_excel <- function(data) {\n  csv_file <- str_glue(\"{tempfile()}.csv\")\n  write_csv(\n    x = data,\n    file = csv_file,\n    na = \"\"\n  )\n  file_show(path = csv_file)\n}\nshow_in_excel(data = penguins)\ncovid_data <- read_csv(\"https://data.rwithoutstatistics.com/us-states-covid-rolling-average.csv\")\n\nshow_in_excel(data = covid_data)\ncovid_data %>%\n  filter(state == \"California\") %>%\n  show_in_excel()"},{"path":"packages-chapter.html","id":"creating-a-function-to-automatically-format-race-and-ethnicity-data","chapter":"12 Creating Your Own R Packages","heading":"Creating a Function to Automatically Format Race and Ethnicity Data","text":"Now understand functions work, let’s walk example function use simplify activities discussed previous chapters.Chapter 11, used tidycensus package easily import data United States Census Bureau, learned can hard remember names census data’s many variables. Say regularly want access data race ethnicity American Community Survey, never remember variables enable . section, ’ll create get_acs_race_ethnicity() function help task, walking development step--step show important concepts making functions.first version function might look like :Within function’s body, call get_acs() function tidycensus retrieve population data state level. instead returning function’s default output, relabel hard--remember variable names human-readable names, White Black/African American. Next, save names object called race_ethnicity_data. Lastly, use object return data function run.can run function entering following:return data easy--read race ethnicity group names:improve function ways. example, might want resulting variables names follow consistent syntax. , use clean_names() function janitor package, formats variable names using snake case (words lowercase separated underscores). snake case, variable name GEOID become geoid. However, might also want leave option keeping original variable names. can accomplish adding argument function:add clean_variable_names argument function specify FALSE default. , function body, set statement. argument TRUE, run line overwrites variable names versions formatted snake case. argument FALSE, leave variable names unchanged.run function, nothing change, new argument set FALSE default. Try setting clean_variable_names TRUE follows:function call return data consistent variable names:Now ’ve seen add arguments two separate functions, let’s explore pass arguments one function another.","code":"\nlibrary(tidycensus)\n\nget_acs_race_ethnicity <- function() {\n  race_ethnicity_data <-\n    get_acs(\n      geography = \"state\",\n      variables = c(\n        \"White\" = \"B03002_003\",\n        \"Black/African American\" = \"B03002_004\",\n        \"American Indian/Alaska Native\" = \"B03002_005\",\n        \"Asian\" = \"B03002_006\",\n        \"Native Hawaiian/Pacific Islander\" = \"B03002_007\",\n        \"Other race\" = \"B03002_008\",\n        \"Multi-Race\" = \"B03002_009\",\n        \"Hispanic/Latino\" = \"B03002_012\"\n      )\n    )\n\n  race_ethnicity_data\n}\nget_acs_race_ethnicity()#> # A tibble: 416 × 5\n#>    GEOID NAME    variable                     estimate   moe\n#>    <chr> <chr>   <chr>                           <dbl> <dbl>\n#>  1 01    Alabama White                         3247262  2133\n#>  2 01    Alabama Black/African American        1318388  3585\n#>  3 01    Alabama American Indian/Alaska Nati…    14864   868\n#>  4 01    Alabama Asian                           69099  1113\n#>  5 01    Alabama Native Hawaiian/Pacific Isl…     1557   303\n#>  6 01    Alabama Other race                      14724  1851\n#>  7 01    Alabama Multi-Race                     129791  3724\n#>  8 01    Alabama Hispanic/Latino                232407   199\n#>  9 02    Alaska  White                          428802  1173\n#> 10 02    Alaska  Black/African American          22400   935\n#> # ℹ 406 more rows\nget_acs_race_ethnicity <- function(clean_variable_names = FALSE) {\n  race_ethnicity_data <-\n    get_acs(\n      geography = \"state\",\n      variables = c(\n        \"White\" = \"B03002_003\",\n        \"Black/African American\" = \"B03002_004\",\n        \"American Indian/Alaska Native\" = \"B03002_005\",\n        \"Asian\" = \"B03002_006\",\n        \"Native Hawaiian/Pacific Islander\" = \"B03002_007\",\n        \"Other race\" = \"B03002_008\",\n        \"Multi-Race\" = \"B03002_009\",\n        \"Hispanic/Latino\" = \"B03002_012\"\n      )\n    )\n\n  if (clean_variable_names == TRUE) {\n    race_ethnicity_data <- clean_names(race_ethnicity_data)\n  }\n\n  race_ethnicity_data\n}\nget_acs_race_ethnicity(clean_variable_names = TRUE)#> # A tibble: 416 × 5\n#>    geoid name    variable                     estimate   moe\n#>    <chr> <chr>   <chr>                           <dbl> <dbl>\n#>  1 01    Alabama White                         3247262  2133\n#>  2 01    Alabama Black/African American        1318388  3585\n#>  3 01    Alabama American Indian/Alaska Nati…    14864   868\n#>  4 01    Alabama Asian                           69099  1113\n#>  5 01    Alabama Native Hawaiian/Pacific Isl…     1557   303\n#>  6 01    Alabama Other race                      14724  1851\n#>  7 01    Alabama Multi-Race                     129791  3724\n#>  8 01    Alabama Hispanic/Latino                232407   199\n#>  9 02    Alaska  White                          428802  1173\n#> 10 02    Alaska  Black/African American          22400   935\n#> # ℹ 406 more rows"},{"path":"packages-chapter.html","id":"using-...-to-pass-arguments-to-another-function","chapter":"12 Creating Your Own R Packages","heading":"Using ... to Pass Arguments to Another Function","text":"function created retrieves population data state level passing geography = \"state\" argument get_acs() function. wanted obtain county-level data, else data census tracts? using get_acs(), ’ve written get_acs_race_ethnicity() function way isn’t flexible enough allow .first thought modify function might involve adding additional argument level data retrieve. edit first two lines function follows add my_geography argument use get_acs() function:also want select year retrieve data? Well, add argument well. However, saw Chapter 11, get_acs() function many arguments, repeating code become cumbersome.... syntax allows us avoid . placing ... get_acs_race_ethnicity() function, can automatically pass arguments listed get_acs() function including ... well:Try running function passing geography argument set \"state\":return following:Alternatively, change value argument get data county:also run function geometry = TRUE argument return geospatial data alongside demographic data:function return data like following:... syntax allows create function pass arguments another function without repeating function’s arguments code. approach gives flexibility keeping code concise.Now ’ve discussed make functions, ’ll learn put package.","code":"\nget_acs_race_ethnicity <- function(\n  clean_variable_names = FALSE,\n  my_geography\n) {\n  race_ethnicity_data <-\n    get_acs(\n      geography = my_geography,\n      variables = c(\n        \"White\" = \"B03002_003\",\n        \"Black/African American\" = \"B03002_004\",\n        \"American Indian/Alaska Native\" = \"B03002_005\",\n        \"Asian\" = \"B03002_006\",\n        \"Native Hawaiian/Pacific Islander\" = \"B03002_007\",\n        \"Other race\" = \"B03002_008\",\n        \"Multi-Race\" = \"B03002_009\",\n        \"Hispanic/Latino\" = \"B03002_012\"\n      )\n    )\n\n  if (clean_variable_names == TRUE) {\n    race_ethnicity_data <- clean_names(race_ethnicity_data)\n  }\n\n  race_ethnicity_data\n}\nget_acs_race_ethnicity <- function(\n  clean_variable_names = FALSE,\n  ...\n) {\n  race_ethnicity_data <-\n    get_acs(\n      ...,\n      variables = c(\n        \"White\" = \"B03002_003\",\n        \"Black/African American\" = \"B03002_004\",\n        \"American Indian/Alaska Native\" = \"B03002_005\",\n        \"Asian\" = \"B03002_006\",\n        \"Native Hawaiian/Pacific Islander\" = \"B03002_007\",\n        \"Other race\" = \"B03002_008\",\n        \"Multi-Race\" = \"B03002_009\",\n        \"Hispanic/Latino\" = \"B03002_012\"\n      )\n    )\n\n  if (clean_variable_names == TRUE) {\n    race_ethnicity_data <- clean_names(race_ethnicity_data)\n  }\n\n  race_ethnicity_data\n}\nget_acs_race_ethnicity(geography = \"state\")#> # A tibble: 416 × 5\n#>    GEOID NAME    variable                     estimate   moe\n#>    <chr> <chr>   <chr>                           <dbl> <dbl>\n#>  1 01    Alabama White                         3247262  2133\n#>  2 01    Alabama Black/African American        1318388  3585\n#>  3 01    Alabama American Indian/Alaska Nati…    14864   868\n#>  4 01    Alabama Asian                           69099  1113\n#>  5 01    Alabama Native Hawaiian/Pacific Isl…     1557   303\n#>  6 01    Alabama Other race                      14724  1851\n#>  7 01    Alabama Multi-Race                     129791  3724\n#>  8 01    Alabama Hispanic/Latino                232407   199\n#>  9 02    Alaska  White                          428802  1173\n#> 10 02    Alaska  Black/African American          22400   935\n#> # ℹ 406 more rows\nget_acs_race_ethnicity(geography = \"state\")\nget_acs_race_ethnicity(\n  geography = \"county\",\n  geometry = TRUE\n)#> Simple feature collection with 416 features and 5 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: -179.1467 ymin: 17.88328 xmax: 179.7785 ymax: 71.38782\n#> Geodetic CRS:  NAD83\n#> First 10 features:\n#>    GEOID         NAME                         variable\n#> 1     35   New Mexico                            White\n#> 2     35   New Mexico           Black/African American\n#> 3     35   New Mexico    American Indian/Alaska Native\n#> 4     35   New Mexico                            Asian\n#> 5     35   New Mexico Native Hawaiian/Pacific Islander\n#> 6     35   New Mexico                       Other race\n#> 7     35   New Mexico                       Multi-Race\n#> 8     35   New Mexico                  Hispanic/Latino\n#> 9     46 South Dakota                            White\n#> 10    46 South Dakota           Black/African American\n#>    estimate  moe                       geometry\n#> 1    752424 1849 MULTIPOLYGON (((-109.0502 3...\n#> 2     37996 1116 MULTIPOLYGON (((-109.0502 3...\n#> 3    178608 1339 MULTIPOLYGON (((-109.0502 3...\n#> 4     32214  868 MULTIPOLYGON (((-109.0502 3...\n#> 5      1117  190 MULTIPOLYGON (((-109.0502 3...\n#> 6      7680  967 MULTIPOLYGON (((-109.0502 3...\n#> 7     50798 2565 MULTIPOLYGON (((-109.0502 3...\n#> 8   1051626   NA MULTIPOLYGON (((-109.0502 3...\n#> 9    718056  978 MULTIPOLYGON (((-104.0579 4...\n#> 10    19172  805 MULTIPOLYGON (((-104.0579 4..."},{"path":"packages-chapter.html","id":"how-to-create-a-package","chapter":"12 Creating Your Own R Packages","heading":"How to Create a Package","text":"Packages bundle functions can use multiple projects. find copying functions one project another, perhaps set functions ’ve saved functions.R file copy new project, good indications make package.can run functions functions.R file environment, code may work someone else’s computer. users may necessary packages installed, may confused functions’ arguments work know go help. put functions package, likely work, include necessary dependencies. R packages also contain built-documentation help others use functions .","code":""},{"path":"packages-chapter.html","id":"starting-the-package","chapter":"12 Creating Your Own R Packages","heading":"Starting the Package","text":"create package RStudio, go File menu, select New Project. , select New Directory. ’ll given list options, one R Package. Select , give package name. Figure 12.2, ’ve called mine dk. Also decide want package live computer. can leave everything else .\nFigure 12.2: RStudio menu creating package\nRStudio now create open package. already contain files, including hello.R, pre-built function called hello() , run, prints text “Hello, world!” console. Let’s get rid default files can start clean slate. Delete hello.R, NAMESPACE, hello.Rd man directory.","code":""},{"path":"packages-chapter.html","id":"adding-functions-with-use_r","chapter":"12 Creating Your Own R Packages","heading":"Adding Functions with use_r()","text":"functions package go separate files R folder. add files package automatically test work correctly, ’ll use usethis devtools packages. Install using install.packages() don’t already installed:add function package, run use_r() function usethis package console:package::function() syntax makes possible use function without loading package. function create file called acs.R R directory name give argument. name file doesn’t really matter, choosing something gives indication functions within good practice. Now can open file add code . Copy get_acs_race_ethnicity() function package.","code":"\ninstall.packages(\"usethis\")\ninstall.packages(\"devtools\")\nusethis::use_r(\"acs\")"},{"path":"packages-chapter.html","id":"checking-our-package-with-devtools","chapter":"12 Creating Your Own R Packages","heading":"Checking our Package with devtools","text":"need change get_acs_race_ethnicity() ways make work package. easiest way figure changes need make use built-tools check package built correctly. Run function devtools::check() console perform known R CMD check, makes sure others can install package system. Running R CMD check dk package gives us long message. last part important:Let’s review output bottom top. line 0 errors ✔ | 2 warnings ✖ | 1 note ✖ highlights three levels issues identified package. Errors severe, mean others won’t able install package, warnings notes may cause problems others. ’s best practice eliminate errors, warnings, notes.’ll start addressing note. understand R CMD check saying , need explain bit packages work. install package using install.packages() function, often takes . ’s package telling R install likely uses functions packages. access functions, R must install packages (known dependencies) ; , pain manually install whole set dependencies every time installed package. make sure appropriate packages installed user dk package, make changes.R CMD check tells us several “undefined global functions variables” “visible global function definition” various functions. attempting use functions tidycensus janitor packages, haven’t specified functions come . can run code environment tidycensus janitor installed, can’t assume others.","code":"── R CMD check results ─────────────── dk 0.1.0 ────\nDuration: 4s\n\n❯ checking DESCRIPTION meta-information ... WARNING\nNon-standard license specification:\nWhat license is it under?\nStandardizable: FALSE\n\n❯ checking for missing documentation entries ... WARNING\nUndocumented code objects:\n‘get_acs_race_ethnicity’\nAll user-level objects in a package should have documentation entries.\nSee chapter ‘Writing R documentation files’ in the ‘Writing R\nExtensions’ manual.\n\n❯ checking R code for possible problems ... NOTE\nget_acs_race_ethnicity: no visible global function definition for\n‘get_acs’\nget_acs_race_ethnicity: no visible global function definition for\n‘clean_names’\nUndefined global functions or variables:\nclean_names get_acs\n\n0 errors ✔ | 2 warnings ✖ | 1 note ✖"},{"path":"packages-chapter.html","id":"adding-dependency-packages","chapter":"12 Creating Your Own R Packages","heading":"Adding Dependency Packages","text":"ensure package’s code work, need install tidycensus janitor users install dk package. , run use_package() function usethis package console:get following message:“Setting active project …” line indicates ’re working dk project. second line indicates DESCRIPTION file edited. file provides meta information package ’re developing.Next, order use clean_names() function, ’ll need add janitor package using code usethis::use_package(package = \"janitor\"), give following output:open DESCRIPTION file root directory project, see following:Look Imports section way bottom file. contents indicate user installs dk package, tidycensus janitor packages also installed .","code":"\nusethis::use_package(package = \"tidycensus\")✔ Setting active project to '/Users/davidkeyes/Documents/Work/R Without Statistics/dk'\n✔ Adding 'tidycensus' to Imports field in DESCRIPTION\n• Refer to functions with `tidycensus::fun()`✔ Adding 'janitor' to Imports field in DESCRIPTION\n• Refer to functions with `janitor::fun()`Package: dk\nType: Package\nTitle: What the Package Does (Title Case)\nVersion: 0.1.0\nAuthor: Who wrote it\nMaintainer: The package maintainer <yourself@somewhere.net>\nDescription: More about what it does (maybe more than one line)\n    Use four spaces when indenting paragraphs within the Description.\nLicense: What license is it under?\nEncoding: UTF-8\nLazyData: true\nImports: \n    janitor,\n    tidycensus"},{"path":"packages-chapter.html","id":"referring-to-functions-correctly","chapter":"12 Creating Your Own R Packages","heading":"Referring to Functions Correctly","text":"R CMD check output also included line: “Refer functions tidycensus::fun()” (fun() stands function name) tells us , order use functions packages dk package, need specify package name function name ensure correct function used times. rare occasions, ’ll find functions identical names used across multiple packages, syntax avoids ambiguity. Remember ran R CMD check got ?using functions without saying package came . clean_names() function comes janitor package, get_acs() comes tidycensus, need add package names function:Now ’ve specified packages functions come , can run devtools::check() . , see notes gone away:However, still two warnings need deal . Let’s next.","code":"Undefined global functions or variables:\nclean_names get_acs\nget_acs_race_ethnicity <- function(\n  clean_variable_names = FALSE,\n  ...\n) {\n  race_ethnicity_data <- tidycensus::get_acs(\n    ...,\n    variables = c(\n      \"White\" = \"B03002_003\",\n      \"Black/African American\" = \"B03002_004\",\n      \"American Indian/Alaska Native\" = \"B03002_005\",\n      \"Asian\" = \"B03002_006\",\n      \"Native Hawaiian/Pacific Islander\" = \"B03002_007\",\n      \"Other race\" = \"B03002_008\",\n      \"Multi-Race\" = \"B03002_009\",\n      \"Hispanic/Latino\" = \"B03002_012\"\n    )\n  )\n\n  if (clean_variable_names == TRUE) {\n    race_ethnicity_data <- janitor::clean_names(race_ethnicity_data)\n  }\n\n  race_ethnicity_data\n}❯ checking DESCRIPTION meta-information ... WARNING\nNon-standard license specification:\nWhat license is it under?\nStandardizable: FALSE\n\n❯ checking for missing documentation entries ... WARNING\nUndocumented code objects:\n‘get_acs_race_ethnicity’\nAll user-level objects in a package should have documentation entries.\nSee chapter ‘Writing R documentation files’ in the ‘Writing R\nExtensions’ manual.\n\n0 errors ✔ | 2 warnings ✖ | 0 notes ✔"},{"path":"packages-chapter.html","id":"adding-documentation","chapter":"12 Creating Your Own R Packages","heading":"Adding Documentation","text":"Take look “checking missing documentation entries” warning. warning tells us need document get_acs_race_ethnicity() function. One benefits creating package can add documentation help others use code. way users can enter ?get_acs() see documentation function, want able enter ?get_acs_race_ethnicity() learn works.create documentation function, ’ll use Roxygen, documentation tool uses package called roxygen2. get started, place cursor anywhere function. , go Code menu RStudio select Insert Roxygen Skeleton. add text get_acs_race_ethnicity() function looks like :text documentation’s skeleton. line starts special characters #', indicate ’re working Roxygen. can now edit text create documentation. Begin replacing Title sentence describes function:Next, turn attention lines beginning @param. Roxygen automatically creates one lines function’s arguments, ’s us fill description. Begin describing clean_variable_names argument . Next, specify ... pass additional arguments tidycensus::get_acs() function:@return line tell user get_acs_race_ethnicity() function returns. case, returns data, document follows:@return @export. don’t need change anything . functions package known exported functions, meaning available users package. contrast, internal functions, used package developers, @export Roxygen skeleton.last section @examples. can give examples code users can run learn function works. introduces complexity isn’t required, ’ll skip delete line @examples . want learn adding examples documentation, second edition Hadley Wickham Jenny Bryan’s book R Packages great resource.Now ’ve added documentation Roxygen, run devtools::document() console. create get_acs_race_ethnicity.Rd documentation file man directory using specific format R packages require. ’re welcome look , can’t change , since read .Running function also create NAMESPACE file, lists functions package makes available users. look like :get_acs_race_ethnicity() function now almost ready users.","code":"#' Title\n#'\n#' @param clean_variable_names \n#' @param ... \n#'\n#' @return\n#' @export\n#'\n#' @examples#' Access race and ethnicity data from the American Community Survey#' @param clean_variable_names Should variable names be cleaned (i.e. snake case)\n#' @param ... Other arguments passed to tidycensus::get_acs()#' @return A tibble with five variables: GEOID, NAME, variable, estimate, and moe# Generated by roxygen2: do not edit by hand\n\nexport(get_acs_race_ethnicity)"},{"path":"packages-chapter.html","id":"adding-a-license-and-metadata","chapter":"12 Creating Your Own R Packages","heading":"Adding a License and Metadata","text":"Try running devtools::check() see ’ve fixed issues led warnings. warning missing documentation longer . However, still one warning:warning tells us haven’t given package license. plan make package publicly available, choosing license important tells people can code. information choose right license package, see https://choosealicense.com/.example, use MIT license. allows people essentially whatever want code, running usethis::use_mit_license(). usethis package similar functions common licenses. returns following:use_mit_license() function handles lot tedious parts adding license package. importantly us, specifies license DESCRIPTION file. open , see confirmation ’ve added MIT license:addition license, DESCRIPTION file contains metadata package. can make changes identify title add author, maintainer, description. final DESCRIPTION file might look something like :made changes, let’s run devtools::check() one time make sure everything order:get exactly hoped see.","code":"❯ checking DESCRIPTION meta-information ... WARNING\nNon-standard license specification:\nWhat license is it under?\nStandardizable: FALSE\n\n0 errors ✔ | 1 warning ✖ | 0 notes ✔✔ Setting active project to '/Users/davidkeyes/Documents/Work/R Without Statistics/dk'\n✔ Setting License field in DESCRIPTION to 'MIT + file LICENSE'\n✔ Writing 'LICENSE'\n✔ Writing 'LICENSE.md'\n✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'License: MIT + file LICENSEPackage: dk\nType: Package\nTitle: David Keyes's Personal Package\nVersion: 0.1.0\nAuthor: David Keyes\nMaintainer: David Keyes <david@rfortherestofus.com>\n    Description: A package with functions that David Keyes may find \n    useful.\nLicense: MIT + file LICENSE\nEncoding: UTF-8\nLazyData: true\nImports: \n    janitor,\n    tidycensus0 errors ✔ | 0 warnings ✔ | 0 notes ✔"},{"path":"packages-chapter.html","id":"adding-additional-functions","chapter":"12 Creating Your Own R Packages","heading":"Adding Additional Functions","text":"’ve now got package one working function . wanted add additional functions, follow procedure:Create new .R file usethis::use_r() copy another function existing .R file.Create new .R file usethis::use_r() copy another function existing .R file.Develop function using package::function() syntax refer functions packages.Develop function using package::function() syntax refer functions packages.Add dependency packages use_package().Add dependency packages use_package().Add documentation function.Add documentation function.Run devtools::check() make sure everything correctly.Run devtools::check() make sure everything correctly.package can contain single function, like dk, many functions want.","code":""},{"path":"packages-chapter.html","id":"installing-the-package","chapter":"12 Creating Your Own R Packages","heading":"Installing the Package","text":"developed package, ’re now ready install use . ’re developing package, installing use relatively straightforward. Simply run devtools::install() package ready use project.course, ’re developing package, ’re likely just , others well. common way make package available others code-sharing website GitHub. details put code GitHub beyond can cover , book Happy Git GitHub useR Jenny Bryan great place get started.’ve pushed dk package GitHub, can find https://github.com/dgkeyes/dk. anyone else wants install , first make sure remotes package installed. package, can installed running install.packages(\"remotes\"), allows install packages wide range locations, including GitHub. ’ve installed remotes package, can run code remotes::install_github(\"dgkeyes/dk\") console install dk package.","code":""},{"path":"packages-chapter.html","id":"conclusion-7","chapter":"12 Creating Your Own R Packages","heading":"Conclusion","text":"Packages useful let bundle several elements needed reliably run code: set functions, instructions automatically install dependency packages, code documentation.Creating R package especially beneficial ’re working organization, can allow advanced R users help less experience. Gerke Aden-Buie provided researchers Moffitt Cancer Center package contained functions easily accessing databases, researchers began use R creatively.create package, can also guide people use R way think best. Packages way ensure others follow best practices (without even aware ). make easy reuse functions across projects, help others, adhere consistent style.","code":""},{"path":"packages-chapter.html","id":"learn-more-10","chapter":"12 Creating Your Own R Packages","heading":"Learn More","text":"Consult following resources learn make packages R:R Packages, Second Edition Hadley Wickham Jennifer Bryan (O’Reilly Media, Forthcoming), https://r-pkgs.org/Package Development R, course Malcolm Barrett, https://rfortherestofus.com/courses/package-development-course/","code":""},{"path":"packages-chapter.html","id":"wrapping-up","chapter":"12 Creating Your Own R Packages","heading":"Wrapping Up","text":"R invented 1993 tool statistics, years since , used plenty statistical analysis. last three decades, R also become tool can much statistics.’ve seen book, R great making visualizations. can use create high-quality graphics maps, make theme keep visuals consistent -brand, generate tables look good communicate well. Using R Markdown Quarto, can create reports, presentations, websites. best , documents reproducible, meaning updating easy rerunning code. Finally, ’ve seen R can help automate access data, well assist collaborating others functions packages make.R new started book, now feel inspired use . experienced R user, book shown ways use R hadn’t previously considered. matter background, understand use R like pro, without statistics.","code":""}]
